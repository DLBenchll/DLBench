[
    {
        "sql_id": 1,
        "database_name": "BUTTERTrans_1",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM t0 WHERE (a, b) IN (ROW(1, 10)); -- ROW",
        "target_query": "SELECT * FROM t0 WHERE (a, b) IN (ROW (1, 10));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [{
          "dialect_token": "ROW",
          "start_pos": 34,
          "end_pos": 37
        }],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t0`\nColumns:\n(a, int(11), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 2,
        "database_name": "BUTTERTrans_2",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM t0 WHERE (a, b) IN (VALUES ROW(1, 10), ROW(2, 20)); -- ROW",
        "target_query": "SELECT * FROM t0 WHERE (a, b) IN (ROW (1, 10), ROW (2, 20));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [{
          "dialect_token": "ROW",
          "start_pos": 41,
          "end_pos": 44
        },
          {
            "dialect_token": "ROW",
            "start_pos": 53,
            "end_pos": 56
          }],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t0`\nColumns:\n(a, int(11), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 3,
        "database_name": "BUTTERTrans_3",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM t0 WHERE (a, b) NOT IN (VALUES ROW(1, 10)); -- ROW",
        "target_query": "SELECT * FROM t0 WHERE (a, b) NOT IN (ROW (1, 10));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [{
          "dialect_token": "ROW",
          "start_pos": 45,
          "end_pos": 48
        }],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t0`\nColumns:\n(a, int(11), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 4,
        "database_name": "BUTTERTrans_4",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM t0 WHERE (a, b) NOT IN (VALUES ROW(1, 10), ROW(2, 20)); -- ROW",
        "target_query": "SELECT * FROM t0 WHERE (a, b) NOT IN (ROW (1, 10), ROW (2, 20));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [{
          "dialect_token": "ROW",
          "start_pos": 45,
          "end_pos": 48
        },
          {
            "dialect_token": "ROW",
            "start_pos": 57,
            "end_pos": 60
          }],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t0`\nColumns:\n(a, int(11), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 5,
        "database_name": "BUTTERTrans_5",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select a1,a2,b,min(c) from t1 where (ord(a1) > 97) and (ord(a2) + ord(a1) > 194) and (b = 'a') group by a1,a2,b; -- ORD",
        "target_query": "select a1,a2,b,min(c) from t1 where (ord(a1) > 97) and (ord(a2) + ord(a1) > 194) and (b = 'a') group by a1,a2,b;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ORD",
                "start_pos": 37,
                "end_pos": 40
            },
            {
                "dialect_token": "ORD",
                "start_pos": 56,
                "end_pos": 59
            },
            {
                "dialect_token": "ORD",
                "start_pos": 66,
                "end_pos": 69
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ORD(string)",
                "description": "The ORD() function returns the Unicode code point of the first character of a string.",
                "examples": [
                    "SELECT ORD('A');",
                    "SELECT ORD('B');",
                    "SELECT ORD('C') > 60;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "ORD(string)",
                "description": "MariaDB supports ORD(), which returns the Unicode code point of the first character of a string, identical to MySQL.",
                "examples": [
                    "SELECT ORD('A');",
                    "SELECT ORD('B');",
                    "SELECT ORD('C') > 60;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a1, char(64), )\n(a2, char(64), )\n(b, char(16), )\n(c, char(16), )\n(d, char(16), )\n(dummy, char(248), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a1, char(64), )\n(a2, char(64), )\n(b, char(16), )\n(c, char(16), )\n(d, char(16), )\n(dummy, char(248), )\n"
        ]
    },
    {
        "sql_id": 6,
        "database_name": "BUTTERTrans_6",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat(a1,min(c)),b from t1 where a1 < 'd' group by a1,a2,b; -- CONCAT",
        "target_query": "select concat(a1,min(c)),b from t1 where a1 < 'd' group by a1,a2,b;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a1, char(64), )\n(a2, char(64), )\n(b, char(16), )\n(c, char(16), )\n(d, char(16), )\n(dummy, char(248), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a1, char(64), )\n(a2, char(64), )\n(b, char(16), )\n(c, char(16), )\n(d, char(16), )\n(dummy, char(248), )\n"
        ]
    },
    {
        "sql_id": 7,
        "database_name": "BUTTERTrans_7",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat(a1,min(c)),b,max(c) from t1 where a1 < 'd' group by a1,a2,b; -- CONCAT",
        "target_query": "select concat(a1,min(c)),b,max(c) from t1 where a1 < 'd' group by a1,a2,b;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a1, char(64), )\n(a2, char(64), )\n(b, char(16), )\n(c, char(16), )\n(d, char(16), )\n(dummy, char(248), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a1, char(64), )\n(a2, char(64), )\n(b, char(16), )\n(c, char(16), )\n(d, char(16), )\n(dummy, char(248), )\n"
        ]
    },
    {
        "sql_id": 8,
        "database_name": "BUTTERTrans_8",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat(a1,a2),b,min(c),max(c) from t1 where a1 < 'd' group by a1,a2,b; -- CONCAT",
        "target_query": "select concat(a1,a2),b,min(c),max(c) from t1 where a1 < 'd' group by a1,a2,b;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a1, char(64), )\n(a2, char(64), )\n(b, char(16), )\n(c, char(16), )\n(d, char(16), )\n(dummy, char(248), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a1, char(64), )\n(a2, char(64), )\n(b, char(16), )\n(c, char(16), )\n(d, char(16), )\n(dummy, char(248), )\n"
        ]
    },
    {
        "sql_id": 9,
        "database_name": "BUTTERTrans_9",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat(ord(min(b)),ord(max(b))),min(b),max(b) from t1 group by a1,a2; -- CONCAT, ORD",
        "target_query": "select concat(ord(min(b)),ord(max(b))),min(b),max(b) from t1 group by a1,a2;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "ORD",
                "start_pos": 14,
                "end_pos": 17
            },
            {
                "dialect_token": "ORD",
                "start_pos": 26,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "ORD(string)",
                "description": "The ORD() function returns the Unicode code point of the first character of a string.",
                "examples": [
                    "SELECT ORD('A');",
                    "SELECT ORD('B');",
                    "SELECT ORD('C') > 60;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "ORD(string)",
                "description": "MariaDB supports ORD(), which returns the Unicode code point of the first character of a string, identical to MySQL.",
                "examples": [
                    "SELECT ORD('A');",
                    "SELECT ORD('B');",
                    "SELECT ORD('C') > 60;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a1, char(64), )\n(a2, char(64), )\n(b, char(16), )\n(c, char(16), )\n(d, char(16), )\n(dummy, char(248), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a1, char(64), )\n(a2, char(64), )\n(b, char(16), )\n(c, char(16), )\n(d, char(16), )\n(dummy, char(248), )\n"
        ]
    },
    {
        "sql_id": 10,
        "database_name": "BUTTERTrans_10",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 (ts) VALUES (Unix_timestamp('2002-10-27 01:00')); -- UNIX_TIMESTAMP",
        "target_query": "INSERT INTO t1 (ts) VALUES (Unix_timestamp('2002-10-27 01:00'));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 28,
                "end_pos": 42
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(ts, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(ts, int(11), )\n"
        ]
    },
    {
        "sql_id": 11,
        "database_name": "BUTTERTrans_11",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 (ts) VALUES (Unix_timestamp('2002-10-27 02:00')); -- UNIX_TIMESTAMP",
        "target_query": "INSERT INTO t1 (ts) VALUES (Unix_timestamp('2002-10-27 02:00'));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 28,
                "end_pos": 42
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(ts, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(ts, int(11), )\n"
        ]
    },
    {
        "sql_id": 12,
        "database_name": "BUTTERTrans_12",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 (ts) VALUES (Unix_timestamp('2002-10-27 03:00')); -- UNIX_TIMESTAMP",
        "target_query": "INSERT INTO t1 (ts) VALUES (Unix_timestamp('2002-10-27 03:00'));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 28,
                "end_pos": 42
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(ts, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(ts, int(11), )\n"
        ]
    },
    {
        "sql_id": 13,
        "database_name": "BUTTERTrans_13",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ts,from_unixtime(ts) FROM t1; -- FROM_UNIXTIME",
        "target_query": "SELECT ts,from_unixtime(ts) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "FROM_UNIXTIME",
                "start_pos": 10,
                "end_pos": 23
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(ts, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(ts, int(11), )\n"
        ]
    },
    {
        "sql_id": 14,
        "database_name": "BUTTERTrans_14",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIMESTAMP( '2001-01-01 00:00:00' ); -- TIMESTAMP",
        "target_query": "SELECT TIMESTAMP( '2001-01-01 00:00:00' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMESTAMP",
                "start_pos": 7,
                "end_pos": 16
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MySQL that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MariaDB that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 15,
        "database_name": "BUTTERTrans_15",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TO_DAYS( '2001-01-01 00:00:00' ); -- TO_DAYS",
        "target_query": "SELECT TO_DAYS( '2001-01-01 00:00:00' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TO_DAYS",
                "start_pos": 7,
                "end_pos": 14
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TO_DAYS(date)",
                "description": "Returns the number of days since 0000-01-01 for a given date.",
                "examples": [
                    "SELECT TO_DAYS('2024-05-07');",
                    "SELECT TO_DAYS(CURDATE());",
                    "SELECT TO_DAYS('1999-12-31 23:59:59');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_DAYS(date)",
                "description": "Same as MySQL.",
                "examples": [
                    "SELECT TO_DAYS('2024-05-07');",
                    "SELECT TO_DAYS(CURDATE());",
                    "SELECT TO_DAYS('1999-12-31 23:59:59');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 16,
        "database_name": "BUTTERTrans_16",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TO_DAYS( '2001-01-01 00:00:00' ); -- TO_DAYS",
        "target_query": "SELECT TO_DAYS( '2001-01-01 00:00:00' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TO_DAYS",
                "start_pos": 7,
                "end_pos": 14
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TO_DAYS(date)",
                "description": "Returns the number of days since 0000-01-01 for a given date.",
                "examples": [
                    "SELECT TO_DAYS('2024-05-07');",
                    "SELECT TO_DAYS(CURDATE());",
                    "SELECT TO_DAYS('1999-12-31 23:59:59');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_DAYS(date)",
                "description": "Same as MySQL.",
                "examples": [
                    "SELECT TO_DAYS('2024-05-07');",
                    "SELECT TO_DAYS(CURDATE());",
                    "SELECT TO_DAYS('1999-12-31 23:59:59');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 17,
        "database_name": "BUTTERTrans_17",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT DATEDIFF( '2007-12-31 23:59:59', '2007-12-30  00:00:00' ); -- DATEDIFF",
        "target_query": "SELECT DATEDIFF( '2007-12-31 23:59:59', '2007-12-30  00:00:00' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATEDIFF",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATEDIFF(date1, date2)",
                "description": "Returns the number of days between two date or datetime expressions (date1 - date2), ignoring time part.",
                "examples": [
                    "SELECT DATEDIFF('2025-12-31', '2025-12-01');",
                    "SELECT DATEDIFF('2025-01-01', '2024-12-31');",
                    "SELECT DATEDIFF(NULL, '2025-01-01');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATEDIFF(date1, date2)",
                "description": "Returns the number of days between two date or datetime expressions (date1 - date2), ignoring time part.",
                "examples": [
                    "SELECT DATEDIFF('2025-12-31', '2025-12-01');",
                    "SELECT DATEDIFF('2025-01-01', '2024-12-31');",
                    "SELECT DATEDIFF(NULL, '2025-01-01');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 18,
        "database_name": "BUTTERTrans_18",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIMEDIFF( '2000:01:01 00:00:00','2000:01:01 00:00:00' ); -- TIMEDIFF",
        "target_query": "SELECT TIMEDIFF( '2000:01:01 00:00:00','2000:01:01 00:00:00' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMEDIFF",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MySQL that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MariaDB that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 19,
        "database_name": "BUTTERTrans_19",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT DATE_FORMAT( '2009-10-10 23:59:59', '%W %M %Y' ); -- DATE_FORMAT",
        "target_query": "SELECT DATE_FORMAT( '2009-10-10 23:59:59', '%W %M %Y' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 20,
        "database_name": "BUTTERTrans_20",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIME( '2003-12-31 23:59:59' ); -- TIME",
        "target_query": "SELECT TIME( '2003-12-31 23:59:59' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIME",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME(time-value) | TIME_FORMAT(time-value, format)",
                "description": "The TIME(time-value) function in MySQL returns the time as text formatted as 'HH:MM:SS' from a given time-value. MySQL's TIME function does not support modifiers like in SQLite. To modify the time, you can use functions like DATE_ADD (to add an interval) or TIME_FORMAT (to custom format the time, including fractional seconds).",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time, formatted as 'HH:MM:SS'.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Adds 1 hour to the time, returning '15:16:00'.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME(time-value) | TIME_FORMAT(DATE_ADD(time-value, INTERVAL n unit), '%H:%i:%s')",
                "description": "MySQL's TIME(time-value) function returns the time in 'HH:MM:SS' format. It does not support SQLite-style inline modifiers. Instead, time modification is done via DATE_ADD(), and formatting via TIME_FORMAT(). Fractional seconds (milliseconds) can be included using '%f'.\nParameters: time-value (e.g., NOW(), '14:16:00'), interval modifier (e.g., INTERVAL 1 HOUR).\nReturns: A string formatted as 'HH:MM:SS' or 'HH:MM:SS.SSSSSS'.",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time in 'HH:MM:SS' format.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Returns the time one hour after now.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 21,
        "database_name": "BUTTERTrans_21",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIMESTAMP( '2003-12-31 23:59:59', '12:00:00' ); -- TIMESTAMP",
        "target_query": "SELECT TIMESTAMP( '2003-12-31 23:59:59', '12:00:00' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMESTAMP",
                "start_pos": 7,
                "end_pos": 16
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MySQL that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MariaDB that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 22,
        "database_name": "BUTTERTrans_22",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02 23:59:59' ); -- TIMESTAMPADD",
        "target_query": "SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02 23:59:59' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMESTAMPADD",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMPADD(unit, interval, datetime_expr)",
                "description": "Adds a time interval to a date or timestamp expression using the specified unit.",
                "examples": [
                    "SELECT TIMESTAMPADD(DAY, 2, '2023-01-01');",
                    "SELECT TIMESTAMPADD(MINUTE, -5, '2023-05-10 12:00:00');",
                    "SELECT TIMESTAMPADD(YEAR, 1, '2020-06-15');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMESTAMPADD(unit, interval, datetime_expr)",
                "description": "Adds a specified interval of time to a date or timestamp expression using a given unit.",
                "examples": [
                    "SELECT TIMESTAMPADD(DAY, 2, '2023-01-01');",
                    "SELECT TIMESTAMPADD(MINUTE, -5, '2023-05-10 12:00:00');",
                    "SELECT TIMESTAMPADD(YEAR, 1, '2020-06-15');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 23,
        "database_name": "BUTTERTrans_23",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIMESTAMPDIFF(MONTH, '2003-02-01 23:59:59', '2003-05-01' ); -- TIMESTAMPDIFF",
        "target_query": "SELECT TIMESTAMPDIFF(MONTH, '2003-02-01 23:59:59', '2003-05-01' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMESTAMPDIFF",
                "start_pos": 7,
                "end_pos": 20
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMPDIFF(unit, datetime1, datetime2)",
                "description": "Returns the difference between two datetime values in the specified unit.",
                "examples": [
                    "SELECT TIMESTAMPDIFF(YEAR, '2001-01-01', '2005-01-01');  -- 4",
                    "SELECT TIMESTAMPDIFF(MONTH, '2020-01-01', '2020-03-01');  -- 2",
                    "SELECT TIMESTAMPDIFF(DAY, '2020-01-01', '2020-01-31');    -- 30"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMESTAMPDIFF(unit, datetime1, datetime2)",
                "description": "Same as MySQL, returns the interval between two timestamps.",
                "examples": [
                    "SELECT TIMESTAMPDIFF(YEAR, '2001-01-01', '2005-01-01');  -- 4",
                    "SELECT TIMESTAMPDIFF(MONTH, '2020-01-01', '2020-03-01');  -- 2",
                    "SELECT TIMESTAMPDIFF(DAY, '2020-01-01', '2020-01-31');    -- 30"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 24,
        "database_name": "BUTTERTrans_24",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TO_SECONDS( '2009-11-29 23:59:59' ); -- TO_SECONDS",
        "target_query": "SELECT TO_SECONDS( '2009-11-29 23:59:59' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TO_SECONDS",
                "start_pos": 7,
                "end_pos": 17
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TO_SECONDS(datetime_expr)",
                "description": "Returns the number of seconds since year 0 to the given datetime.",
                "examples": [
                    "SELECT TO_SECONDS('2000-01-01 00:00:00');",
                    "SELECT TO_SECONDS(NOW());",
                    "SELECT TO_SECONDS(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_SECONDS(datetime_expr)",
                "description": "Returns the number of seconds since year 0 to the specified datetime value.",
                "examples": [
                    "SELECT TO_SECONDS('2020-12-31 12:00:00');",
                    "SELECT TO_SECONDS(UTC_TIMESTAMP());",
                    "SELECT TO_SECONDS(NULL);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 25,
        "database_name": "BUTTERTrans_25",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT UNIX_TIMESTAMP( '2015-11-13 23:59:59' ); -- UNIX_TIMESTAMP",
        "target_query": "SELECT UNIX_TIMESTAMP( '2015-11-13 23:59:59' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 26,
        "database_name": "BUTTERTrans_26",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(s1) from t1; -- HEX",
        "target_query": "select hex(s1) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, blob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, blob, )\n"
        ]
    },
    {
        "sql_id": 27,
        "database_name": "BUTTERTrans_27",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select length(concat('*',s1,'*',s2,'*')) from t1; -- LENGTH, CONCAT",
        "target_query": "select length(concat('*',s1,'*',s2,'*')) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "CONCAT",
                "start_pos": 14,
                "end_pos": 20
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, blob, )\n(s2, blob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, blob, )\n(s2, blob, )\n"
        ]
    },
    {
        "sql_id": 28,
        "database_name": "BUTTERTrans_28",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(s1),s2 from t1 order by s1,s2; -- HEX",
        "target_query": "select hex(s1),s2 from t1 order by s1,s2;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, blob, )\n(s2, varchar(1), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, blob, )\n(s2, varchar(1), )\n"
        ]
    },
    {
        "sql_id": 29,
        "database_name": "BUTTERTrans_29",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select convert(123456789,unsigned); -- CONVERT",
        "target_query": "select convert(123456789,unsigned);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONVERT",
                "start_pos": 7,
                "end_pos": 14
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "Converts data types or changes the character set.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8);",
                    "SELECT CONVERT(1234, CHAR);",
                    "SELECT CONVERT(column_name USING latin1) FROM my_table;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "MariaDB supports CONVERT similar to MySQL, for both character set and type conversion.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8mb4);",
                    "SELECT CONVERT('2021-12-31', CHAR);",
                    "SELECT CONVERT(column_name USING utf8mb4) FROM my_table;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, blob, )\n(s2, varchar(1), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, blob, )\n(s2, varchar(1), )\n"
        ]
    },
    {
        "sql_id": 30,
        "database_name": "BUTTERTrans_30",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (DATE(NOW()), 1); -- DATE, NOW",
        "target_query": "INSERT INTO t1 VALUES (DATE(NOW()), 1);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE",
                "start_pos": 23,
                "end_pos": 27
            },
            {
                "dialect_token": "NOW",
                "start_pos": 28,
                "end_pos": 31
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "In MySQL, the DATE function extracts the date part from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "MariaDB also supports the DATE function, which extracts the date from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 31,
        "database_name": "BUTTERTrans_31",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a = NOW();",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "NOW",
                "start_pos": 34,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 32,
        "database_name": "BUTTERTrans_32",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (DATE(NOW()), 2); -- DATE, NOW",
        "target_query": "INSERT INTO t1 VALUES (DATE(NOW()), 2);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE",
                "start_pos": 23,
                "end_pos": 27
            },
            {
                "dialect_token": "NOW",
                "start_pos": 28,
                "end_pos": 31
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "In MySQL, the DATE function extracts the date part from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "MariaDB also supports the DATE function, which extracts the date from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 33,
        "database_name": "BUTTERTrans_33",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a = NOW();",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "NOW",
                "start_pos": 34,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 34,
        "database_name": "BUTTERTrans_34",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a = NOW() AND b = 1; -- COUNT, NOW",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a = NOW() AND b = 1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "NOW",
                "start_pos": 34,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 35,
        "database_name": "BUTTERTrans_35",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "CREATE TABLE t1 SELECT curdate() AS f1; -- CURDATE",
        "target_query": "CREATE TABLE t1 SELECT curdate() AS f1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CURDATE",
                "start_pos": 23,
                "end_pos": 30
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CURDATE()",
                "description": "Returns the current date without the time component.",
                "examples": [
                    "SELECT CURDATE();",
                    "SELECT CONCAT('Today\\'s date is: ', CURDATE());",
                    "SELECT 1 WHERE CURDATE() = CURDATE();"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CURDATE()",
                "description": "Returns the current date without the time component, identical to MySQL.",
                "examples": [
                    "SELECT CURDATE();",
                    "SELECT CONCAT('Today\\'s date is: ', CURDATE());",
                    "SELECT 1 WHERE CURDATE() = CURDATE();"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 SELECT curdate() AS f1; -- CURDATE"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 SELECT curdate() AS f1;"
        ]
    },
    {
        "sql_id": 36,
        "database_name": "BUTTERTrans_36",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT hour(f1), minute(f1), second(f1) FROM t1; -- HOUR, MINUTE, SECOND",
        "target_query": "SELECT hour(f1), minute(f1), second(f1) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HOUR",
                "start_pos": 7,
                "end_pos": 11
            },
            {
                "dialect_token": "MINUTE",
                "start_pos": 17,
                "end_pos": 23
            },
            {
                "dialect_token": "SECOND",
                "start_pos": 29,
                "end_pos": 35
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HOUR(expr)",
                "description": "Extracts the hour (0\u201323) from a time or datetime expression.",
                "examples": [
                    "SELECT HOUR('18:45:30');",
                    "SELECT HOUR('2023-10-01 08:15:00');",
                    "SELECT HOUR(CURRENT_TIMESTAMP);"
                ]
            },
            {
                "expression": "MINUTE()",
                "description": "Extracts the minute part from a time or datetime value.",
                "examples": [
                    "SELECT MINUTE('12:34:56');",
                    "SELECT MINUTE('2025-01-01 10:30:00');",
                    "SELECT MINUTE(NULL);"
                ]
            },
            {
                "expression": "SECOND(time)",
                "description": "Extracts the second part from a TIME, DATETIME, or TIMESTAMP value.",
                "examples": [
                    "SELECT SECOND('10:11:12');",
                    "SELECT SECOND(4.99999999991e0);",
                    "SELECT SECOND(CAST('2007-07-19' AS DATE));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HOUR(expr)",
                "description": "Returns the hour part of the given time or datetime expression.",
                "examples": [
                    "SELECT HOUR('18:45:30');",
                    "SELECT HOUR('2023-10-01 08:15:00');",
                    "SELECT HOUR(CURRENT_TIMESTAMP);"
                ]
            },
            {
                "expression": "MINUTE()",
                "description": "Extracts the minute part from a time or datetime value.",
                "examples": [
                    "SELECT MINUTE('12:34:56');",
                    "SELECT MINUTE('2025-01-01 10:30:00');",
                    "SELECT MINUTE(NULL);"
                ]
            },
            {
                "expression": "SECOND(time)",
                "description": "Extracts the second part from a TIME, DATETIME, or TIMESTAMP value.",
                "examples": [
                    "SELECT SECOND('10:11:12');",
                    "SELECT SECOND(4.99999999991e0);",
                    "SELECT SECOND(CAST('2007-07-19' AS DATE));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, date, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, date, )\n"
        ]
    },
    {
        "sql_id": 37,
        "database_name": "BUTTERTrans_37",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT b = CONVERT(a, DATE) FROM t1; -- CONVERT",
        "target_query": "SELECT b = CONVERT(a, DATE) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONVERT",
                "start_pos": 11,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "Converts data types or changes the character set.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8);",
                    "SELECT CONVERT(1234, CHAR);",
                    "SELECT CONVERT(column_name USING latin1) FROM my_table;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "MariaDB supports CONVERT similar to MySQL, for both character set and type conversion.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8mb4);",
                    "SELECT CONVERT('2021-12-31', CHAR);",
                    "SELECT CONVERT(column_name USING utf8mb4) FROM my_table;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, year, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, year(4), )\n"
        ]
    },
    {
        "sql_id": 38,
        "database_name": "BUTTERTrans_38",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT b = (SELECT CONVERT(a, DATE) FROM t1 GROUP BY a) FROM t1; -- CONVERT",
        "target_query": "SELECT b = (SELECT CONVERT(a, DATE) FROM t1 GROUP BY a) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONVERT",
                "start_pos": 19,
                "end_pos": 26
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "Converts data types or changes the character set.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8);",
                    "SELECT CONVERT(1234, CHAR);",
                    "SELECT CONVERT(column_name USING latin1) FROM my_table;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "MariaDB supports CONVERT similar to MySQL, for both character set and type conversion.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8mb4);",
                    "SELECT CONVERT('2021-12-31', CHAR);",
                    "SELECT CONVERT(column_name USING utf8mb4) FROM my_table;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, year, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, year(4), )\n"
        ]
    },
    {
        "sql_id": 39,
        "database_name": "BUTTERTrans_39",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT b = CONVERT((SELECT CONVERT(a, DATE) FROM t1 GROUP BY a), DATE) FROM t1; -- CONVERT",
        "target_query": "SELECT b = CONVERT((SELECT CONVERT(a, DATE) FROM t1 GROUP BY a), DATE) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONVERT",
                "start_pos": 11,
                "end_pos": 18
            },
            {
                "dialect_token": "CONVERT",
                "start_pos": 27,
                "end_pos": 34
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "Converts data types or changes the character set.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8);",
                    "SELECT CONVERT(1234, CHAR);",
                    "SELECT CONVERT(column_name USING latin1) FROM my_table;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "MariaDB supports CONVERT similar to MySQL, for both character set and type conversion.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8mb4);",
                    "SELECT CONVERT('2021-12-31', CHAR);",
                    "SELECT CONVERT(column_name USING utf8mb4) FROM my_table;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, year, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, year(4), )\n"
        ]
    },
    {
        "sql_id": 40,
        "database_name": "BUTTERTrans_40",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT 1 FROM (SELECT LAST_DAY('0')) a; -- LAST_DAY",
        "target_query": "SELECT 1 FROM (SELECT LAST_DAY('0')) a;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LAST_DAY",
                "start_pos": 22,
                "end_pos": 30
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LAST_DAY()",
                "description": "Returns the last day of the month for a given date or datetime expression.",
                "examples": [
                    "SELECT LAST_DAY('2000-02-05') AS last_day_1;",
                    "SELECT LAST_DAY(CURRENT_DATE) AS last_day_2;",
                    "SELECT LAST_DAY('2025-05-17 15:32:00') AS last_day_3;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LAST_DAY()",
                "description": "Returns the last day of the month for a given date or datetime expression.",
                "examples": [
                    "SELECT LAST_DAY('2000-02-05') AS last_day_1;",
                    "SELECT LAST_DAY(CURRENT_DATE) AS last_day_2;",
                    "SELECT LAST_DAY('2025-05-17 15:32:00') AS last_day_3;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 41,
        "database_name": "BUTTERTrans_41",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT 1 FROM (SELECT MAKEDATE(2011,0)) a; -- MAKEDATE",
        "target_query": "SELECT 1 FROM (SELECT MAKEDATE(2011,0)) a;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MAKEDATE",
                "start_pos": 22,
                "end_pos": 30
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 42,
        "database_name": "BUTTERTrans_42",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CAST(LEAST(20010101,20020202) AS DATE); -- LEAST",
        "target_query": "SELECT CAST(LEAST(20010101,20020202) AS DATE);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LEAST",
                "start_pos": 12,
                "end_pos": 17
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 43,
        "database_name": "BUTTERTrans_43",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CAST(UNIX_TIMESTAMP() AS DATE); -- UNIX_TIMESTAMP",
        "target_query": "SELECT CAST(UNIX_TIMESTAMP() AS DATE);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 12,
                "end_pos": 26
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 44,
        "database_name": "BUTTERTrans_44",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT DATE(20110512154559.6 + 0e0); -- DATE",
        "target_query": "SELECT DATE(20110512154559.6 + 0e0);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "In MySQL, the DATE function extracts the date part from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "MariaDB also supports the DATE function, which extracts the date from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 45,
        "database_name": "BUTTERTrans_45",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select Fld1, max(Fld2) from t1 group by Fld1 having std(Fld2) is not null; -- STD",
        "target_query": "select Fld1, max(Fld2) from t1 group by Fld1 having std(Fld2) is not null;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STD",
                "start_pos": 52,
                "end_pos": 55
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STD(expression)",
                "description": "Calculates the standard deviation for the sample of a given expression.",
                "examples": [
                    "SELECT some_dimension, COUNT(*), MIN(some_expression), MAX(some_expression), SUM(some_expression), AVG(some_expression), STD(some_expression) FROM some_data GROUP BY some_dimension LIMIT 5;",
                    "SELECT another_dimension, COUNT(*), STD(expression1 / expression2) FROM another_data GROUP BY another_dimension ORDER BY another_dimension;",
                    "SELECT ROUND(STD(expression1 / expression2), 5) FROM more_data;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STD(expression)",
                "description": "Calculates the standard deviation for the sample of a given expression.",
                "examples": [
                    "SELECT some_dimension, COUNT(*), MIN(some_expression), MAX(some_expression), SUM(some_expression), AVG(some_expression), STD(some_expression) FROM some_data GROUP BY some_dimension LIMIT 5;",
                    "SELECT another_dimension, COUNT(*), STD(expression1 / expression2) FROM another_data GROUP BY another_dimension ORDER BY another_dimension;",
                    "SELECT ROUND(STD(expression1 / expression2), 5) FROM more_data;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(Fld1, int, )\n(Fld2, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(Fld1, int(11), )\n(Fld2, int(11), )\n"
        ]
    },
    {
        "sql_id": 46,
        "database_name": "BUTTERTrans_46",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select Fld1, max(Fld2) from t1 group by Fld1 having variance(Fld2) is not null; -- VARIANCE",
        "target_query": "select Fld1, max(Fld2) from t1 group by Fld1 having variance(Fld2) is not null;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "VARIANCE",
                "start_pos": 52,
                "end_pos": 60
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "VARIANCE(column1)",
                "description": "In MySQL, the VARIANCE() function calculates the variance of a given column of numeric values. It is used to measure the spread or dispersion of the data in a column.",
                "examples": [
                    "SELECT VARIANCE(column1) AS variance_value FROM some_table;",
                    "SELECT department, VARIANCE(salary) AS department_salary_variance FROM employees GROUP BY department;",
                    "SELECT VARIANCE(price) AS price_variance FROM items;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "VARIANCE(column1)",
                "description": "MariaDB supports the VARIANCE() function, which calculates the statistical variance of a given numeric column in a table. It is commonly used for analyzing the distribution of data points.",
                "examples": [
                    "SELECT VARIANCE(column1) AS variance_value FROM some_table;",
                    "SELECT department, VARIANCE(salary) AS department_salary_variance FROM employees GROUP BY department;",
                    "SELECT VARIANCE(price) AS price_variance FROM items;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(Fld1, int, )\n(Fld2, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(Fld1, int(11), )\n(Fld2, int(11), )\n"
        ]
    },
    {
        "sql_id": 47,
        "database_name": "BUTTERTrans_47",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t3 select concat('c-', 1000+A.a, '=w'), concat('c-', 2000+A.a, '=w'),'filler-1' from t2 A; -- CONCAT",
        "target_query": "insert into t3 select concat('c-', 1000+A.a, '=w'), concat('c-', 2000+A.a, '=w'),'filler-1' from t2 A;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 22,
                "end_pos": 28
            },
            {
                "dialect_token": "CONCAT",
                "start_pos": 52,
                "end_pos": 58
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n",
            "Table: `t2`\nColumns:\n(a, int, )\n",
            "Table: `t3`\nColumns:\n(a, char(8), )\n(b, char(8), )\n(filler, char(200), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n",
            "Table: `t2`\nColumns:\n(a, int(11), )\n",
            "Table: `t3`\nColumns:\n(a, char(8), )\n(b, char(8), )\n(filler, char(200), )\n"
        ]
    },
    {
        "sql_id": 48,
        "database_name": "BUTTERTrans_48",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t3 select concat('c-', 1000+A.a, '=w'), concat('c-', 3000+A.a, '=w'),'filler-2' from t2 A; -- CONCAT",
        "target_query": "insert into t3 select concat('c-', 1000+A.a, '=w'), concat('c-', 3000+A.a, '=w'),'filler-2' from t2 A;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 22,
                "end_pos": 28
            },
            {
                "dialect_token": "CONCAT",
                "start_pos": 52,
                "end_pos": 58
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n",
            "Table: `t2`\nColumns:\n(a, int, )\n",
            "Table: `t3`\nColumns:\n(a, char(8), )\n(b, char(8), )\n(filler, char(200), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n",
            "Table: `t2`\nColumns:\n(a, int(11), )\n",
            "Table: `t3`\nColumns:\n(a, char(8), )\n(b, char(8), )\n(filler, char(200), )\n"
        ]
    },
    {
        "sql_id": 49,
        "database_name": "BUTTERTrans_49",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "update t1 set b=repeat(char(65+a), 20) where a < 25; -- REPEAT",
        "target_query": "update t1 set b=repeat(char(65+a), 20) where a < 25;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 16,
                "end_pos": 22
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0`\nColumns:\n(a, int, )\n",
            "Table: `t1`\nColumns:\n(a, int, )\n(b, char(20), )\n(filler, char(200), )\n"
        ],
        "target_related_schemas": [
            "Table: `t0`\nColumns:\n(a, int(11), )\n",
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, char(20), )\n(filler, char(200), )\n"
        ]
    },
    {
        "sql_id": 50,
        "database_name": "BUTTERTrans_50",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "explain select * from t1 where a < 10 and b = repeat(char(65+a), 20); -- REPEAT",
        "target_query": "explain select * from t1 where a < 10 and b = repeat(char(65+a), 20);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 46,
                "end_pos": 52
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0`\nColumns:\n(a, int, )\n",
            "Table: `t1`\nColumns:\n(a, int, )\n(b, char(20), )\n(filler, char(200), )\n"
        ],
        "target_related_schemas": [
            "Table: `t0`\nColumns:\n(a, int(11), )\n",
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, char(20), )\n(filler, char(200), )\n"
        ]
    },
    {
        "sql_id": 51,
        "database_name": "BUTTERTrans_51",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select * from t1 where a < 10 and b = repeat(char(65+a), 20); -- REPEAT",
        "target_query": "select * from t1 where a < 10 and b = repeat(char(65+a), 20);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 38,
                "end_pos": 44
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0`\nColumns:\n(a, int, )\n",
            "Table: `t1`\nColumns:\n(a, int, )\n(b, char(20), )\n(filler, char(200), )\n"
        ],
        "target_related_schemas": [
            "Table: `t0`\nColumns:\n(a, int(11), )\n",
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, char(20), )\n(filler, char(200), )\n"
        ]
    },
    {
        "sql_id": 52,
        "database_name": "BUTTERTrans_52",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select a,hex(b),hex(c),filler from t1 order by filler; -- HEX",
        "target_query": "select a,hex(b),hex(c),filler from t1 order by filler;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 9,
                "end_pos": 12
            },
            {
                "dialect_token": "HEX",
                "start_pos": 16,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, char(10), )\n(c, char(10), )\n(filler, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, char(10), )\n(c, char(10), )\n(filler, char(10), )\n"
        ]
    },
    {
        "sql_id": 53,
        "database_name": "BUTTERTrans_53",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "UPDATE t1 set data=repeat('a',18*1024); -- REPEAT",
        "target_query": "UPDATE t1 set data=repeat('a',18*1024);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 19,
                "end_pos": 25
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(data, longblob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(data, longblob, )\n"
        ]
    },
    {
        "sql_id": 54,
        "database_name": "BUTTERTrans_54",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select length(data) from t1; -- LENGTH",
        "target_query": "select length(data) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(data, longblob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(data, longblob, )\n"
        ]
    },
    {
        "sql_id": 55,
        "database_name": "BUTTERTrans_55",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 (data) VALUES (repeat('a',1*1024)); -- REPEAT",
        "target_query": "INSERT INTO t1 (data) VALUES (repeat('a',1*1024));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 30,
                "end_pos": 36
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(data, longblob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(data, longblob, )\n"
        ]
    },
    {
        "sql_id": 56,
        "database_name": "BUTTERTrans_56",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 (data) VALUES (repeat('b',16*1024-1024)); -- REPEAT",
        "target_query": "INSERT INTO t1 (data) VALUES (repeat('b',16*1024-1024));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 30,
                "end_pos": 36
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(data, longblob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(data, longblob, )\n"
        ]
    },
    {
        "sql_id": 57,
        "database_name": "BUTTERTrans_57",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "UPDATE t1 set data=repeat('c',17*1024); -- REPEAT",
        "target_query": "UPDATE t1 set data=repeat('c',17*1024);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 19,
                "end_pos": 25
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(data, longblob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(data, longblob, )\n"
        ]
    },
    {
        "sql_id": 58,
        "database_name": "BUTTERTrans_58",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select length(data) from t1; -- LENGTH",
        "target_query": "select length(data) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (data LONGBLOB);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (data LONGBLOB);"
        ]
    },
    {
        "sql_id": 59,
        "database_name": "BUTTERTrans_59",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 set data=repeat('a',18*1024); -- REPEAT",
        "target_query": "INSERT INTO t1 set data=repeat('a',18*1024);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(data, longblob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(data, longblob, )\n"
        ]
    },
    {
        "sql_id": 60,
        "database_name": "BUTTERTrans_60",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select length(data) from t1; -- LENGTH",
        "target_query": "select length(data) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(data, longblob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(data, longblob, )\n"
        ]
    },
    {
        "sql_id": 61,
        "database_name": "BUTTERTrans_61",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT UNIX_TIMESTAMP('2011-01-01 00:00:00') as time_t,UNIX_TIMESTAMP('2011-01-01 00:00:00') % 3 as part,1234567890 % 3 as part2; -- UNIX_TIMESTAMP",
        "target_query": "SELECT UNIX_TIMESTAMP('2011-01-01 00:00:00') as time_t,UNIX_TIMESTAMP('2011-01-01 00:00:00') % 3 as part,1234567890 % 3 as part2;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 7,
                "end_pos": 21
            },
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 55,
                "end_pos": 69
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 62,
        "database_name": "BUTTERTrans_62",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t3 (a) VALUES (NOW()); -- NOW",
        "target_query": "INSERT INTO t3 (a) VALUES (NOW());",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "NOW",
                "start_pos": 27,
                "end_pos": 30
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t3`\nColumns:\n(a, timestamp, )\n(b, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t3`\nColumns:\n(a, timestamp, )\n(b, char(10), )\n"
        ]
    },
    {
        "sql_id": 63,
        "database_name": "BUTTERTrans_63",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t2 VALUES (1 + (SELECT a FROM t1),CONCAT(\"subq: \", (SELECT b FROM t1))); -- CONCAT",
        "target_query": "INSERT INTO t2 VALUES (1 + (SELECT a FROM t1),CONCAT(\"subq: \", (SELECT b FROM t1)));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 46,
                "end_pos": 52
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, varchar(64), )\n",
            "Table: `t2`\nColumns:\n(a, int, )\n(b, varchar(64), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, varchar(64), )\n",
            "Table: `t2`\nColumns:\n(a, int(11), )\n(b, varchar(64), )\n"
        ]
    },
    {
        "sql_id": 64,
        "database_name": "BUTTERTrans_64",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select USER(),CURRENT_USER(); -- USER, CURRENT_USER",
        "target_query": "SELECT USER(), CURRENT_USER();",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "USER",
                "start_pos": 7,
                "end_pos": 11
            },
            {
                "dialect_token": "CURRENT_USER",
                "start_pos": 14,
                "end_pos": 26
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "USER()",
                "description": "Returns the current MySQL user and host in the format 'username@hostname'.",
                "examples": [
                    "SELECT USER();"
                ]
            },
            {
                "expression": "CURRENT_USER()",
                "description": "Returns the account name of the user that the server used to authenticate the current client, in 'user_name@host_name' format.",
                "examples": [
                    "SELECT CURRENT_USER();",
                    "SELECT USER(), CURRENT_USER();",
                    "SELECT CURRENT_USER() = USER();"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "USER()",
                "description": "Returns the current MariaDB user and host in the format 'username@hostname'.",
                "examples": [
                    "SELECT USER();"
                ]
            },
            {
                "expression": "CURRENT_USER()",
                "description": "Returns the authenticated user name and host name in 'user_name@host_name' format, same as in MySQL.",
                "examples": [
                    "SELECT CURRENT_USER();",
                    "SELECT USER(), CURRENT_USER();",
                    "SELECT CURRENT_USER() LIKE '%@%';"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 65,
        "database_name": "BUTTERTrans_65",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_instr( 'abc', 'a' ); -- REGEXP_INSTR",
        "target_query": "SELECT REGEXP_INSTR('abc', 'a');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MySQL's REGEXP_INSTR function returns the position of the first match of a regular expression in a string.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a', 1, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MariaDB's REGEXP_INSTR function returns the position of the first match of a regular expression in a string, but does not support some of MySQL's extended features like match occurrence.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ]
    },
    {
        "sql_id": 66,
        "database_name": "BUTTERTrans_66",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_instr( 'abc', 'b' ); -- REGEXP_INSTR",
        "target_query": "SELECT REGEXP_INSTR('abc', 'b');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MySQL's REGEXP_INSTR function returns the position of the first match of a regular expression in a string.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a', 1, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MariaDB's REGEXP_INSTR function returns the position of the first match of a regular expression in a string, but does not support some of MySQL's extended features like match occurrence.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ]
    },
    {
        "sql_id": 67,
        "database_name": "BUTTERTrans_67",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_instr( 'abc', 'c' ); -- REGEXP_INSTR",
        "target_query": "SELECT REGEXP_INSTR('abc', 'c');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MySQL's REGEXP_INSTR function returns the position of the first match of a regular expression in a string.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a', 1, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MariaDB's REGEXP_INSTR function returns the position of the first match of a regular expression in a string, but does not support some of MySQL's extended features like match occurrence.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ]
    },
    {
        "sql_id": 68,
        "database_name": "BUTTERTrans_68",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_instr( 'abc', 'd' ); -- REGEXP_INSTR",
        "target_query": "SELECT REGEXP_INSTR('abc', 'd');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MySQL's REGEXP_INSTR function returns the position of the first match of a regular expression in a string.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a', 1, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MariaDB's REGEXP_INSTR function returns the position of the first match of a regular expression in a string, but does not support some of MySQL's extended features like match occurrence.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ]
    },
    {
        "sql_id": 69,
        "database_name": "BUTTERTrans_69",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_instr( NULL, 'a' ); -- REGEXP_INSTR",
        "target_query": "SELECT REGEXP_INSTR(NULL, 'a');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MySQL's REGEXP_INSTR function returns the position of the first match of a regular expression in a string.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a', 1, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MariaDB's REGEXP_INSTR function returns the position of the first match of a regular expression in a string, but does not support some of MySQL's extended features like match occurrence.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ]
    },
    {
        "sql_id": 70,
        "database_name": "BUTTERTrans_70",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_instr( 'a', NULL ); -- REGEXP_INSTR",
        "target_query": "SELECT REGEXP_INSTR('a', NULL);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MySQL's REGEXP_INSTR function returns the position of the first match of a regular expression in a string.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a', 1, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MariaDB's REGEXP_INSTR function returns the position of the first match of a regular expression in a string, but does not support some of MySQL's extended features like match occurrence.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ]
    },
    {
        "sql_id": 71,
        "database_name": "BUTTERTrans_71",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_instr( NULL, NULL ); -- REGEXP_INSTR",
        "target_query": "SELECT REGEXP_INSTR(NULL, NULL);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MySQL's REGEXP_INSTR function returns the position of the first match of a regular expression in a string.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a', 1, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MariaDB's REGEXP_INSTR function returns the position of the first match of a regular expression in a string, but does not support some of MySQL's extended features like match occurrence.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ]
    },
    {
        "sql_id": 72,
        "database_name": "BUTTERTrans_72",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT hex( concat(regexp_instr( 'a', 'a' )) ); -- HEX, CONCAT, REGEXP_INSTR",
        "target_query": "SELECT HEX(CONCAT(REGEXP_INSTR('a', 'a')));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "CONCAT",
                "start_pos": 12,
                "end_pos": 18
            },
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 19,
                "end_pos": 31
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MySQL's REGEXP_INSTR function returns the position of the first match of a regular expression in a string.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a', 1, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MariaDB's REGEXP_INSTR function returns the position of the first match of a regular expression in a string, but does not support some of MySQL's extended features like match occurrence.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ]
    },
    {
        "sql_id": 73,
        "database_name": "BUTTERTrans_73",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_instr( 1, 'a' ); -- REGEXP_INSTR",
        "target_query": "SELECT REGEXP_INSTR(CAST(1 AS CHAR), 'a');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MySQL's REGEXP_INSTR function returns the position of the first match of a regular expression in a string.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a', 1, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MariaDB's REGEXP_INSTR function returns the position of the first match of a regular expression in a string, but does not support some of MySQL's extended features like match occurrence.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ]
    },
    {
        "sql_id": 74,
        "database_name": "BUTTERTrans_74",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_instr( 1.1, 'a' ); -- REGEXP_INSTR",
        "target_query": "SELECT REGEXP_INSTR(CAST(1.1 AS CHAR), 'a');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MySQL's REGEXP_INSTR function returns the position of the first match of a regular expression in a string.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a', 1, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MariaDB's REGEXP_INSTR function returns the position of the first match of a regular expression in a string, but does not support some of MySQL's extended features like match occurrence.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ]
    },
    {
        "sql_id": 75,
        "database_name": "BUTTERTrans_75",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_instr( 'a', 1 ); -- REGEXP_INSTR",
        "target_query": "SELECT REGEXP_INSTR('a', CAST(1 AS CHAR));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MySQL's REGEXP_INSTR function returns the position of the first match of a regular expression in a string.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a', 1, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MariaDB's REGEXP_INSTR function returns the position of the first match of a regular expression in a string, but does not support some of MySQL's extended features like match occurrence.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ]
    },
    {
        "sql_id": 76,
        "database_name": "BUTTERTrans_76",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_instr( 'a', 1.1 ); -- REGEXP_INSTR",
        "target_query": "SELECT REGEXP_INSTR('a', CAST(1.1 AS CHAR));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MySQL's REGEXP_INSTR function returns the position of the first match of a regular expression in a string.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a', 1, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MariaDB's REGEXP_INSTR function returns the position of the first match of a regular expression in a string, but does not support some of MySQL's extended features like match occurrence.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ]
    },
    {
        "sql_id": 77,
        "database_name": "BUTTERTrans_77",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_instr( subject, pattern ) FROM t1; -- REGEXP_INSTR",
        "target_query": "SELECT REGEXP_INSTR(subject, pattern) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MySQL's REGEXP_INSTR function returns the position of the first match of a regular expression in a string.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a', 1, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MariaDB's REGEXP_INSTR function returns the position of the first match of a regular expression in a string, but does not support some of MySQL's extended features like match occurrence.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ]
    },
    {
        "sql_id": 78,
        "database_name": "BUTTERTrans_78",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_instr( 'abcabcabc', 'a+', 1 ); -- REGEXP_INSTR",
        "target_query": "SELECT REGEXP_INSTR('abcabcabc', 'a+');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MySQL's REGEXP_INSTR function returns the position of the first match of a regular expression in a string.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a', 1, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MariaDB's REGEXP_INSTR function returns the position of the first match of a regular expression in a string, but does not support some of MySQL's extended features like match occurrence.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ]
    },
    {
        "sql_id": 79,
        "database_name": "BUTTERTrans_79",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_instr( 'abcabcabc', 'a+', 2 ); -- REGEXP_INSTR",
        "target_query": "SELECT REGEXP_INSTR('abcabcabc', 'a+');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MySQL's REGEXP_INSTR function returns the position of the first match of a regular expression in a string.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a', 1, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MariaDB's REGEXP_INSTR function returns the position of the first match of a regular expression in a string, but does not support some of MySQL's extended features like match occurrence.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ]
    },
    {
        "sql_id": 80,
        "database_name": "BUTTERTrans_80",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_instr( 'abcabcabc', 'b+', 1 ); -- REGEXP_INSTR",
        "target_query": "SELECT REGEXP_INSTR('abcabcabc', 'b+');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MySQL's REGEXP_INSTR function returns the position of the first match of a regular expression in a string.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a', 1, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MariaDB's REGEXP_INSTR function returns the position of the first match of a regular expression in a string, but does not support some of MySQL's extended features like match occurrence.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ]
    },
    {
        "sql_id": 81,
        "database_name": "BUTTERTrans_81",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_instr( 'abcabcabc', 'b+', 2 ); -- REGEXP_INSTR",
        "target_query": "SELECT REGEXP_INSTR('abcabcabc', 'b+');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MySQL's REGEXP_INSTR function returns the position of the first match of a regular expression in a string.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a', 1, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MariaDB's REGEXP_INSTR function returns the position of the first match of a regular expression in a string, but does not support some of MySQL's extended features like match occurrence.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ]
    },
    {
        "sql_id": 82,
        "database_name": "BUTTERTrans_82",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_instr( 'abcabcabc', 'b+', 3 ); -- REGEXP_INSTR",
        "target_query": "SELECT REGEXP_INSTR('abcabcabc', 'b+');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MySQL's REGEXP_INSTR function returns the position of the first match of a regular expression in a string.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a', 1, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MariaDB's REGEXP_INSTR function returns the position of the first match of a regular expression in a string, but does not support some of MySQL's extended features like match occurrence.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(subject, char(10), )\n(pattern, char(10), )\n"
        ]
    },
    {
        "sql_id": 83,
        "database_name": "BUTTERTrans_83",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'aaa', 'a', 'X' ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'aaa', 'a', 'X' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 84,
        "database_name": "BUTTERTrans_84",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'abc', 'b', 'X' ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'abc', 'b', 'X' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 85,
        "database_name": "BUTTERTrans_85",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( NULL, 'a', 'X' ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( NULL, 'a', 'X' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 86,
        "database_name": "BUTTERTrans_86",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'aaa', NULL, 'X' ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'aaa', NULL, 'X' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 87,
        "database_name": "BUTTERTrans_87",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'aaa', 'a', NULL ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'aaa', 'a', NULL );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 88,
        "database_name": "BUTTERTrans_88",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT concat( regexp_replace( 'aaa', 'a', 'X' ), 'x' ); -- CONCAT, REGEXP_REPLACE",
        "target_query": "SELECT CONCAT( REGEXP_REPLACE( 'aaa', 'a', 'X' ), 'x' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 15,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 89,
        "database_name": "BUTTERTrans_89",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'aaa', 'a', 'X', 1 ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'aaa', 'a', 'X' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 90,
        "database_name": "BUTTERTrans_90",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'aaabbccbbddaa', 'b+', 'X', 1, 1 ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'aaabbccbbddaa', 'b+', 'X' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 91,
        "database_name": "BUTTERTrans_91",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'aaabbccbbddaa', 'b+', 'X', 1, 2 ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'aaabbccbbddaa', 'b+', 'X' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 92,
        "database_name": "BUTTERTrans_92",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'aaabbccbbddaa', '(b+)', '<$1>', 1, 2 ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'aaabbccbbddaa', '(b+)', '<$1>' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 93,
        "database_name": "BUTTERTrans_93",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'aaabbccbbddaa', 'x+', 'x', 1, 0 ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'aaabbccbbddaa', 'x+', 'x' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 94,
        "database_name": "BUTTERTrans_94",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'aaabbccbbddaa', 'b+', 'x', 1, 0 ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'aaabbccbbddaa', 'b+', 'x' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 95,
        "database_name": "BUTTERTrans_95",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'aaab', 'b', 'x', 1, 2 ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'aaab', 'b', 'x' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 96,
        "database_name": "BUTTERTrans_96",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'aaabccc', 'b', 'x', 1, 2 ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'aaabccc', 'b', 'x' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 97,
        "database_name": "BUTTERTrans_97",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'abc', 'b', 'X' ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'abc', 'b', 'X' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 98,
        "database_name": "BUTTERTrans_98",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'abcbdb', 'b', 'X' ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'abcbdb', 'b', 'X' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 99,
        "database_name": "BUTTERTrans_99",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'abcbdb', 'b', 'X', 3 ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'abcbdb', 'b', 'X' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 100,
        "database_name": "BUTTERTrans_100",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'aaabcbdb', 'b', 'X', 1 ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'aaabcbdb', 'b', 'X' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 101,
        "database_name": "BUTTERTrans_101",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'aaabcbdb', 'b', 'X', 2 ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'aaabcbdb', 'b', 'X' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 102,
        "database_name": "BUTTERTrans_102",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'aaabcbdb', 'b', 'X', 3 ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'aaabcbdb', 'b', 'X' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 103,
        "database_name": "BUTTERTrans_103",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'aaa', 'a', 'X', 2 ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'aaa', 'a', 'X' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 104,
        "database_name": "BUTTERTrans_104",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace( 'aaa', 'a', 'XX', 2 ); -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE( 'aaa', 'a', 'XX' );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 105,
        "database_name": "BUTTERTrans_105",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES ( regexp_instr('a', 'a'),regexp_instr('a', 'a'),regexp_instr('a', 'a'),regexp_instr('a', 'a') ); -- REGEXP_INSTR",
        "target_query": "INSERT INTO t1 VALUES (REGEXP_INSTR('a', 'a'),REGEXP_INSTR('a', 'a'),REGEXP_INSTR('a', 'a'),REGEXP_INSTR('a', 'a'));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 24,
                "end_pos": 36
            },
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 47,
                "end_pos": 59
            },
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 70,
                "end_pos": 82
            },
            {
                "dialect_token": "REGEXP_INSTR",
                "start_pos": 93,
                "end_pos": 105
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MySQL's REGEXP_INSTR function returns the position of the first match of a regular expression in a string.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a', 1, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_INSTR('hello world', 'o')",
                "description": "MariaDB's REGEXP_INSTR function returns the position of the first match of a regular expression in a string, but does not support some of MySQL's extended features like match occurrence.",
                "examples": [
                    "SELECT REGEXP_INSTR('hello world', 'o');",
                    "SELECT REGEXP_INSTR('hello world', 'x');",
                    "SELECT REGEXP_INSTR('openai', 'a');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, double, )\n(b, int, )\n(c, char(100), )\n(d, decimal(10,0), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, double, )\n(b, int(11), )\n(c, char(100), )\n(d, decimal(10,0), )\n"
        ]
    },
    {
        "sql_id": 106,
        "database_name": "BUTTERTrans_106",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 ( c ) VALUES ( regexp_replace('a', 'a', 'a') ); -- REGEXP_REPLACE",
        "target_query": "INSERT INTO t1 (c) VALUES (REGEXP_REPLACE('a', 'a', 'a'));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 30,
                "end_pos": 44
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, double, )\n(b, int, )\n(c, char(100), )\n(d, decimal(10,0), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, double, )\n(b, int(11), )\n(c, char(100), )\n(d, decimal(10,0), )\n"
        ]
    },
    {
        "sql_id": 107,
        "database_name": "BUTTERTrans_107",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT length(regexp_replace( repeat('a', 'b'), 'a', 'b' )); -- LENGTH, REGEXP_REPLACE, REPEAT",
        "target_query": "SELECT LENGTH(REGEXP_REPLACE(REPEAT('a', 3), 'a', 'b'));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 14,
                "end_pos": 28
            },
            {
                "dialect_token": "REPEAT",
                "start_pos": 30,
                "end_pos": 36
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            },
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            },
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 108,
        "database_name": "BUTTERTrans_108",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES ( repeat( 'a', 16384 ) ); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES (REPEAT('a', 16384));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 24,
                "end_pos": 30
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, text, )\n"
        ]
    },
    {
        "sql_id": 109,
        "database_name": "BUTTERTrans_109",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT char_length ( regexp_replace( a, 'a', 'b' ) ) FROM t1; -- CHAR_LENGTH, REGEXP_REPLACE",
        "target_query": "SELECT CHAR_LENGTH(REGEXP_REPLACE(a, 'a', 'b')) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CHAR_LENGTH",
                "start_pos": 7,
                "end_pos": 18
            },
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 21,
                "end_pos": 35
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CHAR_LENGTH(expr)",
                "description": "Returns the number of characters in the string, not bytes.",
                "examples": [
                    "SELECT CHAR_LENGTH('abc');",
                    "SELECT CHAR_LENGTH('\u4f60\u597d');",
                    "SELECT CHAR_LENGTH('a\u4f60b\u597dc');"
                ]
            },
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CHAR_LENGTH(expr)",
                "description": "Returns the character count of the input string, ignoring byte size.",
                "examples": [
                    "SELECT CHAR_LENGTH('abc');",
                    "SELECT CHAR_LENGTH('\u4f60\u597d');",
                    "SELECT CHAR_LENGTH('a\u4f60b\u597dc');"
                ]
            },
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, text, )\n"
        ]
    },
    {
        "sql_id": 110,
        "database_name": "BUTTERTrans_110",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT regexp_replace(a, '^([[:alpha:]]+)[[:space:]].*$', '$1') FROM t1; -- REGEXP_REPLACE",
        "target_query": "SELECT REGEXP_REPLACE(a, '^([[:alpha:]]+)[[:space:]].*$', '\\\\1') FROM t1; -- \u8f6c\u4e49\u66ff\u6362\u5b57\u7b26\u4e32\u4e2d\u7684 $",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(10), )\n"
        ]
    },
    {
        "sql_id": 111,
        "database_name": "BUTTERTrans_111",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES ( regexp_replace ('a', 'a', 'x') ); -- REGEXP_REPLACE",
        "target_query": "INSERT INTO t1 VALUES (REGEXP_REPLACE('a', 'a', 'x'));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 24,
                "end_pos": 38
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 ( a CHAR(3) );"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (a CHAR(3));"
        ]
    },
    {
        "sql_id": 112,
        "database_name": "BUTTERTrans_112",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "UPDATE t1 SET a = regexp_replace ( 'b', 'b', 'y' ); -- REGEXP_REPLACE",
        "target_query": "UPDATE t1 SET a = REGEXP_REPLACE('b', 'b', 'y');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REGEXP_REPLACE",
                "start_pos": 18,
                "end_pos": 32
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement, position, occurrence, match_type)",
                "description": "Replaces substrings matching a regular expression with a replacement string. Supports optional position, occurrence, and match type arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X', 1, 2);",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-', 1, 1);",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_', 1, 1);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REGEXP_REPLACE(string, pattern, replacement)",
                "description": "Replaces all occurrences of the pattern in the input string with the replacement. Only supports three arguments.",
                "examples": [
                    "SELECT REGEXP_REPLACE('abcabcabc', 'b', 'X');",
                    "SELECT REGEXP_REPLACE('xxxyyyzzz', 'y+', '-');",
                    "SELECT REGEXP_REPLACE('qwe123rty456', '\\\\d+', '_');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(3), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(3), )\n"
        ]
    },
    {
        "sql_id": 113,
        "database_name": "BUTTERTrans_113",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "WITH recursive qn as (select 1 as n, cast('x' as char(100)) as un union all select 1+n, concat(un,'x') from qn where n<10) select * from qn; -- CONCAT",
        "target_query": "WITH RECURSIVE qn AS (SELECT 1 AS n, CAST('x' AS CHAR(100)) AS un UNION ALL SELECT 1+n, CONCAT(un,'x') FROM qn WHERE n<10) SELECT * FROM qn;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 88,
                "end_pos": 94
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `cmdata`\nColumns:\n(f1, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `cmdata`\nColumns:\n(f1, text, )\n"
        ]
    },
    {
        "sql_id": 114,
        "database_name": "BUTTERTrans_114",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT SUM(DISTINCT LENGTH(name)) s1 FROM t1; -- LENGTH",
        "target_query": "SELECT SUM(DISTINCT LENGTH(name)) s1 FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 20,
                "end_pos": 26
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n(gender, char(1), )\n(name, varchar(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int(11), PRI)\n(gender, char(1), )\n(name, varchar(20), )\n"
        ]
    },
    {
        "sql_id": 115,
        "database_name": "BUTTERTrans_115",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT SUM(DISTINCT LENGTH(name)) s1 FROM t1; -- LENGTH",
        "target_query": "SELECT SUM(DISTINCT LENGTH(name)) s1 FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 20,
                "end_pos": 26
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n(gender, char(1), )\n(name, varchar(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int(11), PRI)\n(gender, char(1), )\n(name, varchar(20), )\n"
        ]
    },
    {
        "sql_id": 116,
        "database_name": "BUTTERTrans_116",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT (SELECT SUM(DISTINCT LENGTH(name)) FROM t1) FROM t2; -- LENGTH",
        "target_query": "SELECT (SELECT SUM(DISTINCT LENGTH(name)) FROM t1) FROM t2;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 28,
                "end_pos": 34
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n(gender, char(1), )\n(name, varchar(20), )\n",
            "Table: `t2`\nColumns:\n(name, varchar(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int(11), PRI)\n(gender, char(1), )\n(name, varchar(20), )\n",
            "Table: `t2`\nColumns:\n(name, varchar(20), )\n"
        ]
    },
    {
        "sql_id": 117,
        "database_name": "BUTTERTrans_117",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t2 VALUES (1,'18:19:29',NOW()); -- NOW",
        "target_query": "INSERT INTO t2 VALUES (1,'18:19:29',NOW());",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "NOW",
                "start_pos": 36,
                "end_pos": 39
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n(gender, char(1), )\n(name, varchar(20), )\n",
            "Table: `t2`\nColumns:\n(pk, int, PRI)\n(time_nokey, time, )\n(datetime_key, time, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int(11), PRI)\n(gender, char(1), )\n(name, varchar(20), )\n",
            "Table: `t2`\nColumns:\n(pk, int(11), PRI)\n(time_nokey, time, )\n(datetime_key, time, )\n"
        ]
    },
    {
        "sql_id": 118,
        "database_name": "BUTTERTrans_118",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CONCAT_WS(pkCrash, strCrash) FROM t1; -- CONCAT_WS",
        "target_query": "SELECT CONCAT_WS(pkCrash, strCrash) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT_WS",
                "start_pos": 7,
                "end_pos": 16
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT_WS(separator, str1, str2, ...)",
                "description": "Concatenates multiple strings with the specified separator. If any argument is NULL, it is ignored.",
                "examples": [
                    "SELECT CONCAT_WS(',', 'apple', 'banana', 'cherry');",
                    "SELECT CONCAT_WS('-', 'hello', 'world');",
                    "SELECT CONCAT_WS(' ', 'this', NULL, 'is', 'a', 'test');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT_WS(separator, str1, str2, ...)",
                "description": "Concatenates strings using a separator and ignores NULL values.",
                "examples": [
                    "SELECT CONCAT_WS(',', 'apple', 'banana', 'cherry');",
                    "SELECT CONCAT_WS('-', 'hello', 'world');",
                    "SELECT CONCAT_WS(' ', 'this', NULL, 'is', 'a', 'test');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(pkCrash, int, PRI)\n(strCrash, varchar(255), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(pkCrash, int(11), PRI)\n(strCrash, varchar(255), )\n"
        ]
    },
    {
        "sql_id": 119,
        "database_name": "BUTTERTrans_119",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select one.id, two.val, elt(two.val,'one','two') from t1 one, t2 two where two.id=one.id order by one.id; -- ELT",
        "target_query": "select one.id, two.val, elt(two.val,'one','two') from t1 one, t2 two where two.id=one.id order by one.id;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ELT",
                "start_pos": 24,
                "end_pos": 27
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ELT(2, 'apple', 'banana', 'cherry')",
                "description": "Returns the N-th element from the list, where N is the first argument.",
                "examples": [
                    "SELECT ELT(2, 'apple', 'banana', 'cherry');  -- Returns 'banana'",
                    "SELECT ELT(1, 'red', 'green', 'blue');  -- Returns 'red'",
                    "SELECT ELT(3, 'dog', 'cat', 'bird');  -- Returns 'bird'"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "ELT(2, 'apple', 'banana', 'cherry')",
                "description": "Returns the N-th element from the list, where N is the first argument.",
                "examples": [
                    "SELECT ELT(2, 'apple', 'banana', 'cherry');  -- Returns 'banana'",
                    "SELECT ELT(1, 'red', 'green', 'blue');  -- Returns 'red'",
                    "SELECT ELT(3, 'dog', 'cat', 'bird');  -- Returns 'bird'"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n",
            "Table: `t2`\nColumns:\n(id, int, PRI)\n(val, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int(10), PRI)\n",
            "Table: `t2`\nColumns:\n(id, int(10), PRI)\n(val, int(10), )\n"
        ]
    },
    {
        "sql_id": 120,
        "database_name": "BUTTERTrans_120",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LEAST(CAST('01-01-01' AS DATETIME), '01-01:02'); -- LEAST",
        "target_query": "SELECT LEAST(CAST('01-01-01' AS DATETIME), '01-01:02');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LEAST",
                "start_pos": 7,
                "end_pos": 12
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 121,
        "database_name": "BUTTERTrans_121",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LEAST(CAST('2001-12-10' AS DATE), '2001-12/11'); -- LEAST",
        "target_query": "SELECT LEAST(CAST('2001-12-10' AS DATE), '2001-12/11');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LEAST",
                "start_pos": 7,
                "end_pos": 12
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 122,
        "database_name": "BUTTERTrans_122",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LEAST(CAST('10:11:12' AS TIME), '10:11:13 '); -- LEAST",
        "target_query": "SELECT LEAST(CAST('10:11:12' AS TIME), '10:11:13 ');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LEAST",
                "start_pos": 7,
                "end_pos": 12
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 123,
        "database_name": "BUTTERTrans_123",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select unix_timestamp(utc_timestamp())-unix_timestamp(current_timestamp()); -- UNIX_TIMESTAMP, UTC_TIMESTAMP, CURRENT_TIMESTAMP",
        "target_query": "SELECT UNIX_TIMESTAMP(UTC_TIMESTAMP())-UNIX_TIMESTAMP(CURRENT_TIMESTAMP());",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 7,
                "end_pos": 21
            },
            {
                "dialect_token": "UTC_TIMESTAMP",
                "start_pos": 22,
                "end_pos": 35
            },
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 39,
                "end_pos": 53
            },
            {
                "dialect_token": "CURRENT_TIMESTAMP",
                "start_pos": 54,
                "end_pos": 71
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            },
            {
                "expression": "UTC_TIMESTAMP()",
                "description": "Returns the current UTC date and time as a DATETIME value.",
                "examples": [
                    "SELECT UTC_TIMESTAMP();",
                    "SELECT YEAR(UTC_TIMESTAMP());",
                    "SELECT UNIX_TIMESTAMP(UTC_TIMESTAMP());"
                ]
            },
            {
                "expression": "CURRENT_TIMESTAMP(6)",
                "description": "Returns the current date and time, with precision up to microseconds.",
                "examples": [
                    "SELECT CURRENT_TIMESTAMP(6);",
                    "SELECT CURRENT_TIMESTAMP(6) = LOCALTIMESTAMP(6);",
                    "SELECT CURRENT_TIMESTAMP(6) > '2025-01-01 00:00:00.000000';"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            },
            {
                "expression": "UTC_TIMESTAMP()",
                "description": "Returns the current UTC date and time as a DATETIME value.",
                "examples": [
                    "SELECT UTC_TIMESTAMP();",
                    "SELECT YEAR(UTC_TIMESTAMP());",
                    "SELECT UNIX_TIMESTAMP(UTC_TIMESTAMP());"
                ]
            },
            {
                "expression": "CURRENT_TIMESTAMP(6)",
                "description": "Returns the current date and time, with precision up to microseconds.",
                "examples": [
                    "SELECT CURRENT_TIMESTAMP(6);",
                    "SELECT CURRENT_TIMESTAMP(6) = LOCALTIMESTAMP(6);",
                    "SELECT CURRENT_TIMESTAMP(6) > '2025-01-01 00:00:00.000000';"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 124,
        "database_name": "BUTTERTrans_124",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t1 (i, ts) values(unix_timestamp('2003-03-01 00:00:00'),'2003-03-01 00:00:00'); -- UNIX_TIMESTAMP",
        "target_query": "INSERT INTO t1 (i, ts) VALUES(UNIX_TIMESTAMP('2003-03-01 00:00:00'),'2003-03-01 00:00:00');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 30,
                "end_pos": 44
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int, )\n(ts, timestamp, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int(11), )\n(ts, timestamp, )\n"
        ]
    },
    {
        "sql_id": 125,
        "database_name": "BUTTERTrans_125",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t1 (i, ts) values(unix_timestamp('2003-03-30 01:59:59'),'2003-03-30 01:59:59'),(unix_timestamp('2003-03-30 02:30:00'),'2003-03-30 02:30:00'),(unix_timestamp('2003-03-30 03:00:00'),'2003-03-30 03:00:00'); -- UNIX_TIMESTAMP",
        "target_query": "INSERT INTO t1 (i, ts) VALUES(UNIX_TIMESTAMP('2003-03-30 01:59:59'),'2003-03-30 01:59:59'),(UNIX_TIMESTAMP('2003-03-30 02:30:00'),'2003-03-30 02:30:00'),(UNIX_TIMESTAMP('2003-03-30 03:00:00'),'2003-03-30 03:00:00');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 30,
                "end_pos": 44
            },
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 92,
                "end_pos": 106
            },
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 154,
                "end_pos": 168
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int, )\n(ts, timestamp, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int(11), )\n(ts, timestamp, )\n"
        ]
    },
    {
        "sql_id": 126,
        "database_name": "BUTTERTrans_126",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t1 (i, ts) values(unix_timestamp(20030330015959),20030330015959),(unix_timestamp(20030330023000),20030330023000),(unix_timestamp(20030330030000),20030330030000); -- UNIX_TIMESTAMP",
        "target_query": "INSERT INTO t1 (i, ts) VALUES(UNIX_TIMESTAMP(20030330015959),20030330015959),(UNIX_TIMESTAMP(20030330023000),20030330023000),(UNIX_TIMESTAMP(20030330030000),20030330030000);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 30,
                "end_pos": 44
            },
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 78,
                "end_pos": 92
            },
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 126,
                "end_pos": 140
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int, )\n(ts, timestamp, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int(11), )\n(ts, timestamp, )\n"
        ]
    },
    {
        "sql_id": 127,
        "database_name": "BUTTERTrans_127",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t1 (i, ts) values(unix_timestamp('2003-05-01 00:00:00'),'2003-05-01 00:00:00'); -- UNIX_TIMESTAMP",
        "target_query": "INSERT INTO t1 (i, ts) VALUES(UNIX_TIMESTAMP('2003-05-01 00:00:00'),'2003-05-01 00:00:00');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 30,
                "end_pos": 44
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int, )\n(ts, timestamp, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int(11), )\n(ts, timestamp, )\n"
        ]
    },
    {
        "sql_id": 128,
        "database_name": "BUTTERTrans_128",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t1 (i, ts) values(unix_timestamp('2003-10-26 01:00:00'),'2003-10-26 01:00:00'),(unix_timestamp('2003-10-26 02:00:00'),'2003-10-26 02:00:00'),(unix_timestamp('2003-10-26 02:59:59'),'2003-10-26 02:59:59'),(unix_timestamp('2003-10-26 04:00:00'),'2003-10-26 04:00:00'),(unix_timestamp('2003-10-26 02:59:59'),'2003-10-26 02:59:59'); -- UNIX_TIMESTAMP",
        "target_query": "INSERT INTO t1 (i, ts) VALUES(UNIX_TIMESTAMP('2003-10-26 01:00:00'),'2003-10-26 01:00:00'),(UNIX_TIMESTAMP('2003-10-26 02:00:00'),'2003-10-26 02:00:00'),(UNIX_TIMESTAMP('2003-10-26 02:59:59'),'2003-10-26 02:59:59'),(UNIX_TIMESTAMP('2003-10-26 04:00:00'),'2003-10-26 04:00:00'),(UNIX_TIMESTAMP('2003-10-26 02:59:59'),'2003-10-26 02:59:59');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 30,
                "end_pos": 44
            },
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 92,
                "end_pos": 106
            },
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 154,
                "end_pos": 168
            },
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 216,
                "end_pos": 230
            },
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 278,
                "end_pos": 292
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int, )\n(ts, timestamp, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int(11), )\n(ts, timestamp, )\n"
        ]
    },
    {
        "sql_id": 129,
        "database_name": "BUTTERTrans_129",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select from_unixtime(362793609); -- FROM_UNIXTIME",
        "target_query": "SELECT FROM_UNIXTIME(362793609);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "FROM_UNIXTIME",
                "start_pos": 7,
                "end_pos": 20
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 130,
        "database_name": "BUTTERTrans_130",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t1 (ts) values (now()); -- NOW",
        "target_query": "INSERT INTO t1 (ts) VALUES (NOW());",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "NOW",
                "start_pos": 28,
                "end_pos": 31
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(ts, timestamp, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(ts, timestamp, )\n"
        ]
    },
    {
        "sql_id": 131,
        "database_name": "BUTTERTrans_131",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES('2003-03-30 01:59:59', 'Before the gap'),('2003-03-30 02:30:00', 'Inside the gap'),('2003-03-30 03:00:00',  'After the gap'); -- UNIX_TIMESTAMP",
        "target_query": "INSERT INTO t1 VALUES('2003-03-30 01:59:59', 'Before the gap'),('2003-03-30 02:30:00', 'Inside the gap'),('2003-03-30 03:00:00',  'After the gap');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, timestamp, )\n(b, varchar(30), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, timestamp, )\n(b, varchar(30), )\n"
        ]
    },
    {
        "sql_id": 132,
        "database_name": "BUTTERTrans_132",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT a, UNIX_TIMESTAMP(a), b FROM t1; -- UNIX_TIMESTAMP",
        "target_query": "SELECT a, UNIX_TIMESTAMP(a), b FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 10,
                "end_pos": 24
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (a TIMESTAMP, b VARCHAR(30));"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (a TIMESTAMP, b VARCHAR(30));"
        ]
    },
    {
        "sql_id": 133,
        "database_name": "BUTTERTrans_133",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT UNIX_TIMESTAMP('2003-03-30 01:59:59'), 'Before the gap' AS b; -- UNIX_TIMESTAMP",
        "target_query": "SELECT UNIX_TIMESTAMP('2003-03-30 01:59:59'), 'Before the gap' AS b;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 134,
        "database_name": "BUTTERTrans_134",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT UNIX_TIMESTAMP('2003-03-30 02:30:00'), 'Inside the gap' AS b; -- UNIX_TIMESTAMP",
        "target_query": "SELECT UNIX_TIMESTAMP('2003-03-30 02:30:00'), 'Inside the gap' AS b;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 135,
        "database_name": "BUTTERTrans_135",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT UNIX_TIMESTAMP('2003-03-30 03:00:00'), 'After the gap' AS b; -- UNIX_TIMESTAMP",
        "target_query": "SELECT UNIX_TIMESTAMP('2003-03-30 03:00:00'), 'After the gap' AS b;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 136,
        "database_name": "BUTTERTrans_136",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT FROM_UNIXTIME(0); -- FROM_UNIXTIME",
        "target_query": "SELECT FROM_UNIXTIME(0);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "FROM_UNIXTIME",
                "start_pos": 7,
                "end_pos": 20
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 137,
        "database_name": "BUTTERTrans_137",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT UNIX_TIMESTAMP(\"1969-12-31 15:59:59\"); -- UNIX_TIMESTAMP",
        "target_query": "SELECT UNIX_TIMESTAMP(\"1969-12-31 15:59:59\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 138,
        "database_name": "BUTTERTrans_138",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT UNIX_TIMESTAMP(\"1969-12-31 16:00:00\"); -- UNIX_TIMESTAMP",
        "target_query": "SELECT UNIX_TIMESTAMP(\"1969-12-31 16:00:00\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 139,
        "database_name": "BUTTERTrans_139",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT UNIX_TIMESTAMP(\"1969-12-31 16:00:01\"); -- UNIX_TIMESTAMP",
        "target_query": "SELECT UNIX_TIMESTAMP(\"1969-12-31 16:00:01\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 140,
        "database_name": "BUTTERTrans_140",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT UNIX_TIMESTAMP(\"1970-01-01 00:00:01\"); -- UNIX_TIMESTAMP",
        "target_query": "SELECT UNIX_TIMESTAMP(\"1970-01-01 00:00:01\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 141,
        "database_name": "BUTTERTrans_141",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT UNIX_TIMESTAMP(\"2022-01-01 16:00:01\"); -- UNIX_TIMESTAMP",
        "target_query": "SELECT UNIX_TIMESTAMP(\"2022-01-01 16:00:01\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 142,
        "database_name": "BUTTERTrans_142",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(a) from t1; -- HEX",
        "target_query": "select hex(a) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bit(64), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bit(64), )\n"
        ]
    },
    {
        "sql_id": 143,
        "database_name": "BUTTERTrans_143",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(a) from t1; -- HEX",
        "target_query": "select hex(a) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bit(1), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bit(1), )\n"
        ]
    },
    {
        "sql_id": 144,
        "database_name": "BUTTERTrans_144",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(min(a)) from t1; -- HEX, MIN",
        "target_query": "select hex(min(a)) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "MIN()",
                "description": "The MIN() function returns the smallest value in a column or expression. It is used in both SELECT queries and in the HAVING clause for aggregated queries.",
                "examples": [
                    "SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0';",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0') AS dt;",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(ci) = '0') AS dt;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "MIN()",
                "description": "The MIN() function returns the smallest value in a column or expression. It is used in both SELECT queries and in the HAVING clause for aggregated queries.",
                "examples": [
                    "SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0';",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0') AS dt;",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(ci) = '0') AS dt;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bit(7), )\n(b, bit(9), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bit(7), )\n(b, bit(9), )\n"
        ]
    },
    {
        "sql_id": 145,
        "database_name": "BUTTERTrans_145",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(min(b)) from t1; -- HEX, MIN",
        "target_query": "select hex(min(b)) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "MIN()",
                "description": "The MIN() function returns the smallest value in a column or expression. It is used in both SELECT queries and in the HAVING clause for aggregated queries.",
                "examples": [
                    "SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0';",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0') AS dt;",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(ci) = '0') AS dt;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "MIN()",
                "description": "The MIN() function returns the smallest value in a column or expression. It is used in both SELECT queries and in the HAVING clause for aggregated queries.",
                "examples": [
                    "SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0';",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0') AS dt;",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(ci) = '0') AS dt;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bit(7), )\n(b, bit(9), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bit(7), )\n(b, bit(9), )\n"
        ]
    },
    {
        "sql_id": 146,
        "database_name": "BUTTERTrans_146",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(min(a)), hex(max(a)), hex(min(b)), hex(max(b)) from t1; -- HEX, MIN, MAX",
        "target_query": "select hex(min(a)), hex(max(a)), hex(min(b)), hex(max(b)) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "HEX",
                "start_pos": 20,
                "end_pos": 23
            },
            {
                "dialect_token": "HEX",
                "start_pos": 33,
                "end_pos": 36
            },
            {
                "dialect_token": "HEX",
                "start_pos": 46,
                "end_pos": 49
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "MIN()",
                "description": "The MIN() function returns the smallest value in a column or expression. It is used in both SELECT queries and in the HAVING clause for aggregated queries.",
                "examples": [
                    "SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0';",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0') AS dt;",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(ci) = '0') AS dt;"
                ]
            },
            {
                "expression": "MAX(expr)",
                "description": "Returns the maximum value of the expression in an aggregation context.",
                "examples": [
                    "SELECT MAX(10), MAX(5), MAX(20);",
                    "SELECT MAX('apple'), MAX('banana'), MAX('pear');",
                    "SELECT MAX(ABS(-5)), MAX(ABS(3));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "MIN()",
                "description": "The MIN() function returns the smallest value in a column or expression. It is used in both SELECT queries and in the HAVING clause for aggregated queries.",
                "examples": [
                    "SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0';",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0') AS dt;",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(ci) = '0') AS dt;"
                ]
            },
            {
                "expression": "MAX(expr)",
                "description": "Returns the maximum value among given values in aggregation.",
                "examples": [
                    "SELECT MAX(7), MAX(14), MAX(3);",
                    "SELECT MAX('zebra'), MAX('dog'), MAX('cat');",
                    "SELECT MAX(POWER(2, 3)), MAX(POWER(3, 2));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bit(7), )\n(b, bit(9), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bit(7), )\n(b, bit(9), )\n"
        ]
    },
    {
        "sql_id": 147,
        "database_name": "BUTTERTrans_147",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(min(b)) from t1 where a = 4; -- HEX, MIN",
        "target_query": "select hex(min(b)) from t1 where a = 4;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "MIN()",
                "description": "The MIN() function returns the smallest value in a column or expression. It is used in both SELECT queries and in the HAVING clause for aggregated queries.",
                "examples": [
                    "SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0';",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0') AS dt;",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(ci) = '0') AS dt;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "MIN()",
                "description": "The MIN() function returns the smallest value in a column or expression. It is used in both SELECT queries and in the HAVING clause for aggregated queries.",
                "examples": [
                    "SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0';",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0') AS dt;",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(ci) = '0') AS dt;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, bit(1), )\n(c, bit(9), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, bit(1), )\n(c, bit(9), )\n"
        ]
    },
    {
        "sql_id": 148,
        "database_name": "BUTTERTrans_148",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(min(c)) from t1 where a = 4 and b = 0; -- HEX, MIN",
        "target_query": "select hex(min(c)) from t1 where a = 4 and b = 0;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "MIN()",
                "description": "The MIN() function returns the smallest value in a column or expression. It is used in both SELECT queries and in the HAVING clause for aggregated queries.",
                "examples": [
                    "SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0';",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0') AS dt;",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(ci) = '0') AS dt;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "MIN()",
                "description": "The MIN() function returns the smallest value in a column or expression. It is used in both SELECT queries and in the HAVING clause for aggregated queries.",
                "examples": [
                    "SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0';",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0') AS dt;",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(ci) = '0') AS dt;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, bit(1), )\n(c, bit(9), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, bit(1), )\n(c, bit(9), )\n"
        ]
    },
    {
        "sql_id": 149,
        "database_name": "BUTTERTrans_149",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(max(b)) from t1; -- HEX",
        "target_query": "select hex(max(b)) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, bit(1), )\n(c, bit(9), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, bit(1), )\n(c, bit(9), )\n"
        ]
    },
    {
        "sql_id": 150,
        "database_name": "BUTTERTrans_150",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "update t1 set b= concat(a); -- CONCAT",
        "target_query": "update t1 set b= concat(a);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 17,
                "end_pos": 23
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bit(2), )\n(b, bit(2), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bit(2), )\n(b, bit(2), )\n"
        ]
    },
    {
        "sql_id": 151,
        "database_name": "BUTTERTrans_151",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HEX(GROUP_CONCAT(DISTINCT b)) FROM t1 GROUP BY a; -- HEX, GROUP_CONCAT",
        "target_query": "SELECT HEX(GROUP_CONCAT(DISTINCT b)) FROM t1 GROUP BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "GROUP_CONCAT",
                "start_pos": 11,
                "end_pos": 23
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "group_concat(X)group_concat(X,Y)string_agg(X,Y)",
                "description": "The GROUP_CONCAT([DISTINCT] expr [,expr ...]  [ORDER BY {unsigned_integer | col_name | expr}  [ASC | DESC] [,col_name ...]]  [SEPARATOR str_val])\nfunction returns a string result with the concatenated non-NULL values from a group.\nDISTINGUISHED keyword can be used to eliminate duplicate values.\nORDER BY clause can be used to sort the values.\nSEPARATOR keyword specifies the separator between values, default is comma(,).\nThe maximum length of the result is controlled by group_concat_max_len system variable, default is 1024.",
                "examples": [
                    "SELECT group_concat(name) FROM students; -- Returns a comma-separated list of names",
                    "SELECT group_concat(name, ' | ') FROM students; -- Returns names separated by '|'"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "group_concat(X)group_concat(X,Y)string_agg(X,Y)",
                "description": "The group_concat(X) function returns a string that concatenates all the non-NULL values in X, separated by commas. The group_concat(X,Y) function returns a string that concatenates all the non-NULL values in X, separated by Y. The string_agg(X,Y) function returns a string that concatenates all the non-NULL values in X, separated by Y.",
                "examples": [
                    "SELECT group_concat(name) FROM students; -- Returns a comma-separated list of names",
                    "SELECT group_concat(name, ' | ') FROM students; -- Returns names separated by '|'"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, bit(2), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, bit(2), )\n"
        ]
    },
    {
        "sql_id": 152,
        "database_name": "BUTTERTrans_152",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HEX(b), i2 FROM t1 WHERE (i2>=100 AND i2<201) AND b=TRUE; -- HEX",
        "target_query": "SELECT HEX(b), i2 FROM t1 WHERE (i2>=100 AND i2<201) AND b=TRUE;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(b, bit(1), )\n(i2, int, )\n(s, varchar(255), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(b, bit(1), )\n(i2, int(11), )\n(s, varchar(255), )\n"
        ]
    },
    {
        "sql_id": 153,
        "database_name": "BUTTERTrans_153",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HEX(b1), i2 FROM t2 WHERE (i2>=100 AND i2<201) AND b1=TRUE; -- HEX",
        "target_query": "SELECT HEX(b1), i2 FROM t2 WHERE (i2>=100 AND i2<201) AND b1=TRUE;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(b, bit(1), )\n(i2, int, )\n(s, varchar(255), )\n",
            "Table: `t2`\nColumns:\n(b1, bit(1), )\n(b2, bit(1), )\n(i2, int, )\n(s, varchar(255), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(b, bit(1), )\n(i2, int(11), )\n(s, varchar(255), )\n",
            "Table: `t2`\nColumns:\n(b1, bit(1), )\n(b2, bit(1), )\n(i2, int(11), )\n(s, varchar(255), )\n"
        ]
    },
    {
        "sql_id": 154,
        "database_name": "BUTTERTrans_154",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HEX(b2), i2 FROM t2 WHERE (i2>=100 AND i2<201) AND b2=FALSE; -- HEX",
        "target_query": "SELECT HEX(b2), i2 FROM t2 WHERE (i2>=100 AND i2<201) AND b2=FALSE;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(b, bit(1), )\n(i2, int, )\n(s, varchar(255), )\n",
            "Table: `t2`\nColumns:\n(b1, bit(1), )\n(b2, bit(1), )\n(i2, int, )\n(s, varchar(255), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(b, bit(1), )\n(i2, int(11), )\n(s, varchar(255), )\n",
            "Table: `t2`\nColumns:\n(b1, bit(1), )\n(b2, bit(1), )\n(i2, int(11), )\n(s, varchar(255), )\n"
        ]
    },
    {
        "sql_id": 155,
        "database_name": "BUTTERTrans_155",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HEX(GROUP_CONCAT(DISTINCT b)) FROM t1 GROUP BY a; -- HEX, GROUP_CONCAT",
        "target_query": "SELECT HEX(GROUP_CONCAT(DISTINCT b)) FROM t1 GROUP BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "GROUP_CONCAT",
                "start_pos": 11,
                "end_pos": 23
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "group_concat(X)group_concat(X,Y)string_agg(X,Y)",
                "description": "The GROUP_CONCAT([DISTINCT] expr [,expr ...]  [ORDER BY {unsigned_integer | col_name | expr}  [ASC | DESC] [,col_name ...]]  [SEPARATOR str_val])\nfunction returns a string result with the concatenated non-NULL values from a group.\nDISTINGUISHED keyword can be used to eliminate duplicate values.\nORDER BY clause can be used to sort the values.\nSEPARATOR keyword specifies the separator between values, default is comma(,).\nThe maximum length of the result is controlled by group_concat_max_len system variable, default is 1024.",
                "examples": [
                    "SELECT group_concat(name) FROM students; -- Returns a comma-separated list of names",
                    "SELECT group_concat(name, ' | ') FROM students; -- Returns names separated by '|'"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "group_concat(X)group_concat(X,Y)string_agg(X,Y)",
                "description": "The group_concat(X) function returns a string that concatenates all the non-NULL values in X, separated by commas. The group_concat(X,Y) function returns a string that concatenates all the non-NULL values in X, separated by Y. The string_agg(X,Y) function returns a string that concatenates all the non-NULL values in X, separated by Y.",
                "examples": [
                    "SELECT group_concat(name) FROM students; -- Returns a comma-separated list of names",
                    "SELECT group_concat(name, ' | ') FROM students; -- Returns names separated by '|'"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, bit(2), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, bit(2), )\n"
        ]
    },
    {
        "sql_id": 156,
        "database_name": "BUTTERTrans_156",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HEX(t2.b) FROM t2; -- HEX",
        "target_query": "SELECT HEX(t2.b) FROM t2;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, bit(2), )\n",
            "Table: `t2`\nColumns:\n(b, bit(2), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, bit(2), )\n",
            "Table: `t2`\nColumns:\n(b, bit(2), )\n"
        ]
    },
    {
        "sql_id": 157,
        "database_name": "BUTTERTrans_157",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT a, HEX(b) FROM t1 ORDER BY b; -- HEX",
        "target_query": "SELECT a, HEX(b) FROM t1 ORDER BY b;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 10,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, bit(2), )\n",
            "Table: `t2`\nColumns:\n(b, bit(2), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, bit(2), )\n",
            "Table: `t2`\nColumns:\n(b, bit(2), )\n"
        ]
    },
    {
        "sql_id": 158,
        "database_name": "BUTTERTrans_158",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(a) from t1 order by a; -- HEX",
        "target_query": "select hex(a) from t1 order by a;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, blob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, blob, )\n"
        ]
    },
    {
        "sql_id": 159,
        "database_name": "BUTTERTrans_159",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(concat(a,'\\\\0')) as b from t1 order by concat(a,'\\\\0'); -- HEX, CONCAT",
        "target_query": "select hex(concat(a,'\\\\0')) as b from t1 order by concat(a,'\\\\0');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "CONCAT",
                "start_pos": 11,
                "end_pos": 17
            },
            {
                "dialect_token": "CONCAT",
                "start_pos": 50,
                "end_pos": 56
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, blob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, blob, )\n"
        ]
    },
    {
        "sql_id": 160,
        "database_name": "BUTTERTrans_160",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(a) from t1 order by a; -- HEX",
        "target_query": "select hex(a) from t1 order by a;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varbinary(5), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varbinary(5), )\n"
        ]
    },
    {
        "sql_id": 161,
        "database_name": "BUTTERTrans_161",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t (c) VALUES (REPEAT('3',65535)); -- REPEAT",
        "target_query": "INSERT INTO t (c) VALUES (REPEAT('3',65535));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 26,
                "end_pos": 32
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(c, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(c, text, )\n"
        ]
    },
    {
        "sql_id": 162,
        "database_name": "BUTTERTrans_162",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LENGTH(c), CHAR_LENGTH(c) FROM t; -- LENGTH, CHAR_LENGTH",
        "target_query": "SELECT LENGTH(c), CHAR_LENGTH(c) FROM t;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "CHAR_LENGTH",
                "start_pos": 18,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "CHAR_LENGTH(expr)",
                "description": "Returns the number of characters in the string, not bytes.",
                "examples": [
                    "SELECT CHAR_LENGTH('abc');",
                    "SELECT CHAR_LENGTH('\u4f60\u597d');",
                    "SELECT CHAR_LENGTH('a\u4f60b\u597dc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "CHAR_LENGTH(expr)",
                "description": "Returns the character count of the input string, ignoring byte size.",
                "examples": [
                    "SELECT CHAR_LENGTH('abc');",
                    "SELECT CHAR_LENGTH('\u4f60\u597d');",
                    "SELECT CHAR_LENGTH('a\u4f60b\u597dc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(c, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(c, text, )\n"
        ]
    },
    {
        "sql_id": 163,
        "database_name": "BUTTERTrans_163",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LENGTH(c) FROM t2; -- LENGTH",
        "target_query": "SELECT LENGTH(c) FROM t2;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t2`\nColumns:\n(id, int, )\n(c, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t2`\nColumns:\n(id, int(11), )\n(c, text, )\n"
        ]
    },
    {
        "sql_id": 164,
        "database_name": "BUTTERTrans_164",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select least(-1.1111111111111111111111111,- group_concat(1.7976931348623157E+308)) as foo; -- LEAST, GROUP_CONCAT",
        "target_query": "select least(-1.1111111111111111111111111,- group_concat(1.7976931348623157E+308)) as foo;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LEAST",
                "start_pos": 7,
                "end_pos": 12
            },
            {
                "dialect_token": "GROUP_CONCAT",
                "start_pos": 44,
                "end_pos": 56
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            },
            {
                "expression": "group_concat(X)group_concat(X,Y)string_agg(X,Y)",
                "description": "The GROUP_CONCAT([DISTINCT] expr [,expr ...]  [ORDER BY {unsigned_integer | col_name | expr}  [ASC | DESC] [,col_name ...]]  [SEPARATOR str_val])\nfunction returns a string result with the concatenated non-NULL values from a group.\nDISTINGUISHED keyword can be used to eliminate duplicate values.\nORDER BY clause can be used to sort the values.\nSEPARATOR keyword specifies the separator between values, default is comma(,).\nThe maximum length of the result is controlled by group_concat_max_len system variable, default is 1024.",
                "examples": [
                    "SELECT group_concat(name) FROM students; -- Returns a comma-separated list of names",
                    "SELECT group_concat(name, ' | ') FROM students; -- Returns names separated by '|'"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            },
            {
                "expression": "group_concat(X)group_concat(X,Y)string_agg(X,Y)",
                "description": "The group_concat(X) function returns a string that concatenates all the non-NULL values in X, separated by commas. The group_concat(X,Y) function returns a string that concatenates all the non-NULL values in X, separated by Y. The string_agg(X,Y) function returns a string that concatenates all the non-NULL values in X, separated by Y.",
                "examples": [
                    "SELECT group_concat(name) FROM students; -- Returns a comma-separated list of names",
                    "SELECT group_concat(name, ' | ') FROM students; -- Returns names separated by '|'"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 165,
        "database_name": "BUTTERTrans_165",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t1 values (now()); -- NOW",
        "target_query": "insert into t1 values (now());",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "NOW",
                "start_pos": 23,
                "end_pos": 26
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, timestamp, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, timestamp, )\n"
        ]
    },
    {
        "sql_id": 166,
        "database_name": "BUTTERTrans_166",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select date_format(a,\"%Y %y\"),year(a),year(now()) from t1; -- DATE_FORMAT, YEAR, NOW",
        "target_query": "select date_format(a,\"%Y %y\"),year(a),year(now()) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            },
            {
                "dialect_token": "YEAR",
                "start_pos": 30,
                "end_pos": 34
            },
            {
                "dialect_token": "YEAR",
                "start_pos": 38,
                "end_pos": 42
            },
            {
                "dialect_token": "NOW",
                "start_pos": 43,
                "end_pos": 46
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            },
            {
                "expression": "YEAR(date)",
                "description": "Extracts the year from a date or datetime and returns it as an integer.",
                "examples": [
                    "SELECT YEAR('2023-04-10');",
                    "SELECT YEAR(NOW());",
                    "SELECT YEAR('2022-03-15');"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            },
            {
                "expression": "YEAR(date)",
                "description": "Extracts the year from a date or datetime and returns it as an integer.",
                "examples": [
                    "SELECT YEAR('2023-04-10');",
                    "SELECT YEAR(NOW());",
                    "SELECT YEAR('2022-03-15');"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, timestamp, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, timestamp, )\n"
        ]
    },
    {
        "sql_id": 167,
        "database_name": "BUTTERTrans_167",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIMESTAMP('2000-01-27','23:13:41') - TIMESTAMP('2003-05-16','23:53:29'); -- TIMESTAMP",
        "target_query": "SELECT TIMESTAMP('2000-01-27','23:13:41') - TIMESTAMP('2003-05-16','23:53:29');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMESTAMP",
                "start_pos": 7,
                "end_pos": 16
            },
            {
                "dialect_token": "TIMESTAMP",
                "start_pos": 44,
                "end_pos": 53
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MySQL that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MariaDB that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 168,
        "database_name": "BUTTERTrans_168",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT IF (COUNT(*) > 0, \"YES\", \"NO\") AS \"IMPLICIT COMMIT\" FROM trans; -- IF",
        "target_query": "SELECT IF (COUNT(*) > 0, \"YES\", \"NO\") AS \"IMPLICIT COMMIT\" FROM trans;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IF",
                "start_pos": 7,
                "end_pos": 9
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `trans`\nColumns:\n(a, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `trans`\nColumns:\n(a, int(11), )\n"
        ]
    },
    {
        "sql_id": 169,
        "database_name": "BUTTERTrans_169",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select length(v),length(c),length(e),length(t) from t1; -- LENGTH",
        "target_query": "select length(v),length(c),length(e),length(t) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "LENGTH",
                "start_pos": 17,
                "end_pos": 23
            },
            {
                "dialect_token": "LENGTH",
                "start_pos": 27,
                "end_pos": 33
            },
            {
                "dialect_token": "LENGTH",
                "start_pos": 37,
                "end_pos": 43
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(v, varchar(30), )\n(c, char(3), )\n(e, char(3), )\n(t, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(v, varchar(30), )\n(c, char(3), )\n(e, char(3), )\n(t, text, )\n"
        ]
    },
    {
        "sql_id": 170,
        "database_name": "BUTTERTrans_170",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES(SUBSTR(f1, 1, 3)); -- SUBSTR",
        "target_query": "INSERT INTO t1 VALUES(SUBSTR(f1, 1, 3));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "SUBSTR",
                "start_pos": 22,
                "end_pos": 28
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "substr(X,Y,Z)substr(X,Y)substring(X,Y,Z)substring(X,Y)",
                "description": "The substr(str,pos[,len]) function returns a substring from string str starting at position pos.\nIf len is specified, returns a substring len characters long starting at position pos.\nIf pos is positive, the position is counted from the start of the string.\nIf pos is negative, the position is counted from the end of the string.\nlen must be positive. If len is omitted, returns all characters to the end of the string.\nReturns NULL if any argument is NULL.",
                "examples": [
                    "SELECT substr('Hello World', 1, 5); -- Returns 'Hello'",
                    "SELECT substr('Hello World', -5, 3); -- Returns 'Wor'"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "substr(X,Y,Z)substr(X,Y)substring(X,Y,Z)substring(X,Y)",
                "description": "The substr(str,pos[,len]) function returns a substring from string str starting at position pos.\nIf len is specified, returns a substring len characters long starting at position pos.\nIf pos is positive, the position is counted from the start of the string.\nIf pos is negative, the position is counted from the end of the string.\nlen must be positive. If len is omitted, returns all characters to the end of the string.\nReturns NULL if any argument is NULL.",
                "examples": [
                    "SELECT substr('Hello World', 1, 5); -- Returns 'Hello'",
                    "SELECT substr('Hello World', -5, 3); -- Returns 'Wor'"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, varchar(100), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, varchar(100), )\n"
        ]
    },
    {
        "sql_id": 171,
        "database_name": "BUTTERTrans_171",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT a,(a DIV 2) FROM t1 ORDER BY a; -- DIV",
        "target_query": "SELECT a,(a DIV 2) FROM t1 ORDER BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DIV",
                "start_pos": 12,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "a DIV b",
                "description": "Performs integer division between two numbers and returns the floor of the quotient.",
                "examples": [
                    "SELECT 10 DIV 3;",
                    "SELECT 5.8 DIV 2;",
                    "SELECT 9 DIV 4 + 1;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "a DIV b",
                "description": "Executes integer division and returns the floor of the result.",
                "examples": [
                    "SELECT 10 DIV 3;",
                    "SELECT 5.8 DIV 2;",
                    "SELECT 9 DIV 4 + 1;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(2), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(2), )\n"
        ]
    },
    {
        "sql_id": 172,
        "database_name": "BUTTERTrans_172",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t1 values (now()); -- NOW",
        "target_query": "INSERT INTO t1 VALUES (YEAR(NOW()));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "NOW",
                "start_pos": 23,
                "end_pos": 26
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(y, year, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(y, year(4), )\n"
        ]
    },
    {
        "sql_id": 173,
        "database_name": "BUTTERTrans_173",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select if(y = now(), 1, 0) from t1; -- IF, NOW",
        "target_query": "SELECT IF(y = NOW(), 1, 0) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IF",
                "start_pos": 7,
                "end_pos": 9
            },
            {
                "dialect_token": "NOW",
                "start_pos": 14,
                "end_pos": 17
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(y, year, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(y, year(4), )\n"
        ]
    },
    {
        "sql_id": 174,
        "database_name": "BUTTERTrans_174",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM t4 WHERE yyyy = NOW(); -- NOW",
        "target_query": "SELECT * FROM t4 WHERE yyyy = NOW();",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "NOW",
                "start_pos": 30,
                "end_pos": 33
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t4`\nColumns:\n(yyyy, year, )\n(c4, char(4), )\n"
        ],
        "target_related_schemas": [
            "Table: `t4`\nColumns:\n(yyyy, year(4), )\n(c4, char(4), )\n"
        ]
    },
    {
        "sql_id": 175,
        "database_name": "BUTTERTrans_175",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LEAST(d, y) FROM t1; -- LEAST",
        "target_query": "SELECT LEAST(d, y) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LEAST",
                "start_pos": 7,
                "end_pos": 12
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(y, year, )\n(d, date, )\n(i, int, )\n(v, varchar(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(y, year(4), )\n(d, date, )\n(i, int(11), )\n(v, varchar(10), )\n"
        ]
    },
    {
        "sql_id": 176,
        "database_name": "BUTTERTrans_176",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LEAST(y, d) FROM t1; -- LEAST",
        "target_query": "SELECT LEAST(y, d) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LEAST",
                "start_pos": 7,
                "end_pos": 12
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(y, year, )\n(d, date, )\n(i, int, )\n(v, varchar(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(y, year(4), )\n(d, date, )\n(i, int(11), )\n(v, varchar(10), )\n"
        ]
    },
    {
        "sql_id": 177,
        "database_name": "BUTTERTrans_177",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LEAST(i, y, v) FROM t1; -- LEAST",
        "target_query": "SELECT LEAST(i, y, v) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LEAST",
                "start_pos": 7,
                "end_pos": 12
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(y, year, )\n(d, date, )\n(i, int, )\n(v, varchar(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(y, year(4), )\n(d, date, )\n(i, int(11), )\n(v, varchar(10), )\n"
        ]
    },
    {
        "sql_id": 178,
        "database_name": "BUTTERTrans_178",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIMESTAMPDIFF(QUARTER, LEAST(y1, y2), dbl)FROM t1; -- TIMESTAMPDIFF, LEAST",
        "target_query": "SELECT TIMESTAMPDIFF(QUARTER, LEAST(y1, y2), dbl) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMESTAMPDIFF",
                "start_pos": 7,
                "end_pos": 20
            },
            {
                "dialect_token": "LEAST",
                "start_pos": 30,
                "end_pos": 35
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMPDIFF(unit, datetime1, datetime2)",
                "description": "Returns the difference between two datetime values in the specified unit.",
                "examples": [
                    "SELECT TIMESTAMPDIFF(YEAR, '2001-01-01', '2005-01-01');  -- 4",
                    "SELECT TIMESTAMPDIFF(MONTH, '2020-01-01', '2020-03-01');  -- 2",
                    "SELECT TIMESTAMPDIFF(DAY, '2020-01-01', '2020-01-31');    -- 30"
                ]
            },
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMESTAMPDIFF(unit, datetime1, datetime2)",
                "description": "Same as MySQL, returns the interval between two timestamps.",
                "examples": [
                    "SELECT TIMESTAMPDIFF(YEAR, '2001-01-01', '2005-01-01');  -- 4",
                    "SELECT TIMESTAMPDIFF(MONTH, '2020-01-01', '2020-03-01');  -- 2",
                    "SELECT TIMESTAMPDIFF(DAY, '2020-01-01', '2020-01-31');    -- 30"
                ]
            },
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(d, date, )\n(y1, year, )\n(y2, year, )\n(dbl, double, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(d, date, )\n(y1, year(4), )\n(y2, year(4), )\n(dbl, double, )\n"
        ]
    },
    {
        "sql_id": 179,
        "database_name": "BUTTERTrans_179",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HOUR(GREATEST(y1, y2))FROM t1; -- HOUR, GREATEST",
        "target_query": "SELECT HOUR(GREATEST(y1, y2)) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HOUR",
                "start_pos": 7,
                "end_pos": 11
            },
            {
                "dialect_token": "GREATEST",
                "start_pos": 12,
                "end_pos": 20
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HOUR(expr)",
                "description": "Extracts the hour (0\u201323) from a time or datetime expression.",
                "examples": [
                    "SELECT HOUR('18:45:30');",
                    "SELECT HOUR('2023-10-01 08:15:00');",
                    "SELECT HOUR(CURRENT_TIMESTAMP);"
                ]
            },
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HOUR(expr)",
                "description": "Returns the hour part of the given time or datetime expression.",
                "examples": [
                    "SELECT HOUR('18:45:30');",
                    "SELECT HOUR('2023-10-01 08:15:00');",
                    "SELECT HOUR(CURRENT_TIMESTAMP);"
                ]
            },
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(d, date, )\n(y1, year, )\n(y2, year, )\n(dbl, double, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(d, date, )\n(y1, year(4), )\n(y2, year(4), )\n(dbl, double, )\n"
        ]
    },
    {
        "sql_id": 180,
        "database_name": "BUTTERTrans_180",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT y, CONCAT('\"', c, '\"') FROM t1; -- CONCAT",
        "target_query": "SELECT y, CONCAT('\"', c, '\"') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 10,
                "end_pos": 16
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(y, year, )\n(i, int, )\n(c, varchar(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(y, year(4), )\n(i, int(11), )\n(c, varchar(20), )\n"
        ]
    },
    {
        "sql_id": 181,
        "database_name": "BUTTERTrans_181",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(b) from t1 order by pk1; -- HEX",
        "target_query": "select hex(b) from t1 order by pk1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(pk1, int, PRI)\n(b, bit(64), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(pk1, int(11), PRI)\n(b, bit(64), )\n"
        ]
    },
    {
        "sql_id": 182,
        "database_name": "BUTTERTrans_182",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(b) from t1 order by pk1; -- HEX",
        "target_query": "select hex(b) from t1 order by pk1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(pk1, int, PRI)\n(b, bit(9), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(pk1, int(11), PRI)\n(b, bit(9), )\n"
        ]
    },
    {
        "sql_id": 183,
        "database_name": "BUTTERTrans_183",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat(\"*\",name, \"*\") from t1 order by 1; -- CONCAT",
        "target_query": "select concat(\"*\",name, \"*\") from t1 order by 1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(name, char(20), PRI)\n",
            "Table: `t2`\nColumns:\n(name, char(20), PRI)\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(name, char(20), PRI)\n",
            "Table: `t2`\nColumns:\n(name, char(20), PRI)\n"
        ]
    },
    {
        "sql_id": 184,
        "database_name": "BUTTERTrans_184",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select min(name),min(concat(\"*\",name,\"*\")),max(name),max(concat(\"*\",name,\"*\")) from t1; -- CONCAT",
        "target_query": "select min(name),min(concat(\"*\",name,\"*\")),max(name),max(concat(\"*\",name,\"*\")) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 21,
                "end_pos": 27
            },
            {
                "dialect_token": "CONCAT",
                "start_pos": 57,
                "end_pos": 63
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(name, char(20), PRI)\n",
            "Table: `t2`\nColumns:\n(name, char(20), PRI)\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(name, char(20), PRI)\n",
            "Table: `t2`\nColumns:\n(name, char(20), PRI)\n"
        ]
    },
    {
        "sql_id": 185,
        "database_name": "BUTTERTrans_185",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat(\"-\",a,\"-\",b,\"-\") from t1 where a=\"hello\"; -- CONCAT",
        "target_query": "select concat(\"-\",a,\"-\",b,\"-\") from t1 where a=\"hello\";",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(10), )\n(b, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(10), )\n(b, char(10), )\n"
        ]
    },
    {
        "sql_id": 186,
        "database_name": "BUTTERTrans_186",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat(\"-\",a,\"-\",b,\"-\") from t1 where a=\"hello\"; -- CONCAT",
        "target_query": "select concat(\"-\",a,\"-\",b,\"-\") from t1 where a=\"hello\";",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(10), )\n(b, tinytext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(10), )\n(b, tinytext, )\n"
        ]
    },
    {
        "sql_id": 187,
        "database_name": "BUTTERTrans_187",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(col1) from t1; -- HEX",
        "target_query": "select hex(col1) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(col1, binary(4), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(col1, binary(4), )\n"
        ]
    },
    {
        "sql_id": 188,
        "database_name": "BUTTERTrans_188",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(col1) from t1; -- HEX",
        "target_query": "select hex(col1) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(col1, binary(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(col1, binary(10), )\n"
        ]
    },
    {
        "sql_id": 189,
        "database_name": "BUTTERTrans_189",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(col1) from t1; -- HEX",
        "target_query": "select hex(col1) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(col1, binary(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(col1, binary(10), )\n"
        ]
    },
    {
        "sql_id": 190,
        "database_name": "BUTTERTrans_190",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 SET a=unhex('1F9480179366F2BF567E1C4B964C1EF029087575'); -- UNHEX",
        "target_query": "INSERT INTO t1 SET a=unhex('1F9480179366F2BF567E1C4B964C1EF029087575');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [],
        "source_dialect_knowledge": [
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Returns NULL for invalid hex or NULL input.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Supports implicit zero-padding for odd-length strings.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, binary(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, binary(20), )\n"
        ]
    },
    {
        "sql_id": 191,
        "database_name": "BUTTERTrans_191",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 SET a=unhex('1F9480179366F2BF567E1C4B964C1EF029082020'); -- UNHEX",
        "target_query": "INSERT INTO t1 SET a=unhex('1F9480179366F2BF567E1C4B964C1EF029082020');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [],
        "source_dialect_knowledge": [
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Returns NULL for invalid hex or NULL input.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Supports implicit zero-padding for odd-length strings.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, binary(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, binary(20), )\n"
        ]
    },
    {
        "sql_id": 192,
        "database_name": "BUTTERTrans_192",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 SET a=unhex('1F9480179366F2BF567E1C4B964C1EF029080707'); -- UNHEX",
        "target_query": "INSERT INTO t1 SET a=unhex('1F9480179366F2BF567E1C4B964C1EF029080707');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [],
        "source_dialect_knowledge": [
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Returns NULL for invalid hex or NULL input.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Supports implicit zero-padding for odd-length strings.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, binary(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, binary(20), )\n"
        ]
    },
    {
        "sql_id": 193,
        "database_name": "BUTTERTrans_193",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT hex(a) FROM t1 order by a; -- HEX",
        "target_query": "SELECT hex(a) FROM t1 order by a;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, binary(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, binary(20), )\n"
        ]
    },
    {
        "sql_id": 194,
        "database_name": "BUTTERTrans_194",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "EXPLAIN SELECT hex(a) FROM t1 order by a; -- HEX",
        "target_query": "EXPLAIN SELECT hex(a) FROM t1 order by a;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 15,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, binary(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, binary(20), )\n"
        ]
    },
    {
        "sql_id": 195,
        "database_name": "BUTTERTrans_195",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT hex(a) from t1 WHERE a=unhex('1F9480179366F2BF567E1C4B964C1EF029082020'); -- HEX, UNHEX",
        "target_query": "SELECT hex(a) from t1 WHERE a=unhex('1F9480179366F2BF567E1C4B964C1EF029082020');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "UNHEX",
                "start_pos": 30,
                "end_pos": 35
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Returns NULL for invalid hex or NULL input.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Supports implicit zero-padding for odd-length strings.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, binary(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, binary(20), )\n"
        ]
    },
    {
        "sql_id": 196,
        "database_name": "BUTTERTrans_196",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT hex(a) from t1 WHERE a=unhex('1F9480179366F2BF567E1C4B964C1EF02908'); -- HEX, UNHEX",
        "target_query": "SELECT hex(a) from t1 WHERE a=unhex('1F9480179366F2BF567E1C4B964C1EF02908');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "UNHEX",
                "start_pos": 30,
                "end_pos": 35
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Returns NULL for invalid hex or NULL input.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Supports implicit zero-padding for odd-length strings.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, binary(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, binary(20), )\n"
        ]
    },
    {
        "sql_id": 197,
        "database_name": "BUTTERTrans_197",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT IF(NULL AND 1, 1, 2), IF(1 AND NULL, 1, 2); -- IF",
        "target_query": "SELECT IF(NULL AND 1, 1, 2), IF(1 AND NULL, 1, 2);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IF",
                "start_pos": 7,
                "end_pos": 9
            },
            {
                "dialect_token": "IF",
                "start_pos": 29,
                "end_pos": 31
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 198,
        "database_name": "BUTTERTrans_198",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM t1 WHERE IF(a AND 1, 0, 1); -- IF",
        "target_query": "SELECT * FROM t1 WHERE IF(a AND 1, 0, 1);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IF",
                "start_pos": 23,
                "end_pos": 25
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n"
        ]
    },
    {
        "sql_id": 199,
        "database_name": "BUTTERTrans_199",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM t1 WHERE IF(1 AND a, 0, 1); -- IF",
        "target_query": "SELECT * FROM t1 WHERE IF(1 AND a, 0, 1);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IF",
                "start_pos": 23,
                "end_pos": 25
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n"
        ]
    },
    {
        "sql_id": 200,
        "database_name": "BUTTERTrans_200",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select ifnull(A, 'N') as A, ifnull(B, 'N') as B, ifnull(not A, 'N') as nA, ifnull(not B, 'N') as nB, ifnull(A and B, 'N') as AB, ifnull(not (A and B), 'N') as `n(AB)`, ifnull((not A or not B), 'N') as nAonB, ifnull(A or B, 'N') as AoB, ifnull(not(A or B), 'N') as `n(AoB)`, ifnull(not A and not B, 'N') as nAnB from t1; -- IFNULL",
        "target_query": "select ifnull(A, 'N') as A, ifnull(B, 'N') as B, ifnull(not A, 'N') as nA, ifnull(not B, 'N') as nB, ifnull(A and B, 'N') as AB, ifnull(not (A and B), 'N') as `n(AB)`, ifnull((not A or not B), 'N') as nAonB, ifnull(A or B, 'N') as AoB, ifnull(not(A or B), 'N') as `n(AoB)`, ifnull(not A and not B, 'N') as nAnB from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IFNULL",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 28,
                "end_pos": 34
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 49,
                "end_pos": 55
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 75,
                "end_pos": 81
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 101,
                "end_pos": 107
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 129,
                "end_pos": 135
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 168,
                "end_pos": 174
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 208,
                "end_pos": 214
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 236,
                "end_pos": 242
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 274,
                "end_pos": 280
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 201,
        "database_name": "BUTTERTrans_201",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select ifnull(A=1, 'N') as A, ifnull(B=1, 'N') as B, ifnull(not (A=1), 'N') as nA, ifnull(not (B=1), 'N') as nB, ifnull((A=1) and (B=1), 'N') as AB, ifnull(not ((A=1) and (B=1)), 'N') as `n(AB)`, ifnull((not (A=1) or not (B=1)), 'N') as nAonB, ifnull((A=1) or (B=1), 'N') as AoB, ifnull(not((A=1) or (B=1)), 'N') as `n(AoB)`, ifnull(not (A=1) and not (B=1), 'N') as nAnB from t1; -- IFNULL",
        "target_query": "select ifnull(A=1, 'N') as A, ifnull(B=1, 'N') as B, ifnull(not (A=1), 'N') as nA, ifnull(not (B=1), 'N') as nB, ifnull((A=1) and (B=1), 'N') as AB, ifnull(not ((A=1) and (B=1)), 'N') as `n(AB)`, ifnull((not (A=1) or not (B=1)), 'N') as nAonB, ifnull((A=1) or (B=1), 'N') as AoB, ifnull(not((A=1) or (B=1)), 'N') as `n(AoB)`, ifnull(not (A=1) and not (B=1), 'N') as nAnB from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IFNULL",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 30,
                "end_pos": 36
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 53,
                "end_pos": 59
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 83,
                "end_pos": 89
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 113,
                "end_pos": 119
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 149,
                "end_pos": 155
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 196,
                "end_pos": 202
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 244,
                "end_pos": 250
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 280,
                "end_pos": 286
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 326,
                "end_pos": 332
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 202,
        "database_name": "BUTTERTrans_202",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select CONVERT(\"2004-01-22 21:45:33\",DATE); -- CONVERT",
        "target_query": "select CONVERT(\"2004-01-22 21:45:33\",DATE);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONVERT",
                "start_pos": 7,
                "end_pos": 14
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "Converts data types or changes the character set.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8);",
                    "SELECT CONVERT(1234, CHAR);",
                    "SELECT CONVERT(column_name USING latin1) FROM my_table;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "MariaDB supports CONVERT similar to MySQL, for both character set and type conversion.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8mb4);",
                    "SELECT CONVERT('2021-12-31', CHAR);",
                    "SELECT CONVERT(column_name USING utf8mb4) FROM my_table;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 203,
        "database_name": "BUTTERTrans_203",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select timediff(cast('2004-12-30 12:00:00' as time), '12:00:00'); -- TIMEDIFF",
        "target_query": "select timediff(cast('2004-12-30 12:00:00' as time), '12:00:00');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMEDIFF",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MySQL that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MariaDB that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 204,
        "database_name": "BUTTERTrans_204",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select timediff(cast('1 12:00:00' as time), '12:00:00'); -- TIMEDIFF",
        "target_query": "select timediff(cast('1 12:00:00' as time), '12:00:00');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMEDIFF",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MySQL that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MariaDB that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 205,
        "database_name": "BUTTERTrans_205",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select cast(concat('12345','6789') as unsigned); -- CONCAT",
        "target_query": "select cast(concat('12345','6789') as unsigned);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 12,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 206,
        "database_name": "BUTTERTrans_206",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select cast(concat('12345','6789') as signed); -- CONCAT",
        "target_query": "select cast(concat('12345','6789') as signed);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 12,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 207,
        "database_name": "BUTTERTrans_207",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select cast(repeat('1',9) as unsigned); -- REPEAT",
        "target_query": "select cast(repeat('1',9) as unsigned);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 12,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 208,
        "database_name": "BUTTERTrans_208",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select cast(repeat('1',9) as signed); -- REPEAT",
        "target_query": "select cast(repeat('1',9) as signed);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 12,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 209,
        "database_name": "BUTTERTrans_209",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select isnull(date(NULL)), isnull(cast(NULL as DATE)); -- ISNULL, DATE",
        "target_query": "select isnull(date(NULL)), isnull(cast(NULL as DATE));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ISNULL",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "DATE",
                "start_pos": 14,
                "end_pos": 18
            },
            {
                "dialect_token": "ISNULL",
                "start_pos": 27,
                "end_pos": 33
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Returns 1 if the expression is NULL, otherwise returns 0.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL(5 + NULL);",
                    "SELECT IF(ISNULL(score), 'N/A', score) FROM students;"
                ]
            },
            {
                "expression": "DATE()",
                "description": "In MySQL, the DATE function extracts the date part from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Checks whether a value is NULL. Returns 1 if NULL, 0 otherwise.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL('abc');",
                    "SELECT IF(ISNULL(balance), 0, balance) FROM accounts;"
                ]
            },
            {
                "expression": "DATE()",
                "description": "MariaDB also supports the DATE function, which extracts the date from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 210,
        "database_name": "BUTTERTrans_210",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(cast('a' as binary(2))); -- HEX",
        "target_query": "select hex(cast('a' as binary(2)));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 211,
        "database_name": "BUTTERTrans_211",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT cast(date(d1) as signed) FROM t1; -- DATE",
        "target_query": "SELECT cast(date(d1) as signed) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE",
                "start_pos": 12,
                "end_pos": 16
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "In MySQL, the DATE function extracts the date part from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "MariaDB also supports the DATE function, which extracts the date from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(d1, datetime, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(d1, datetime, )\n"
        ]
    },
    {
        "sql_id": 212,
        "database_name": "BUTTERTrans_212",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HOUR(f1),MINUTE(f1),SECOND(f1) FROM t1; -- HOUR, MINUTE, SECOND",
        "target_query": "SELECT HOUR(f1),MINUTE(f1),SECOND(f1) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HOUR",
                "start_pos": 7,
                "end_pos": 11
            },
            {
                "dialect_token": "MINUTE",
                "start_pos": 16,
                "end_pos": 22
            },
            {
                "dialect_token": "SECOND",
                "start_pos": 27,
                "end_pos": 33
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HOUR(expr)",
                "description": "Extracts the hour (0\u201323) from a time or datetime expression.",
                "examples": [
                    "SELECT HOUR('18:45:30');",
                    "SELECT HOUR('2023-10-01 08:15:00');",
                    "SELECT HOUR(CURRENT_TIMESTAMP);"
                ]
            },
            {
                "expression": "MINUTE()",
                "description": "Extracts the minute part from a time or datetime value.",
                "examples": [
                    "SELECT MINUTE('12:34:56');",
                    "SELECT MINUTE('2025-01-01 10:30:00');",
                    "SELECT MINUTE(NULL);"
                ]
            },
            {
                "expression": "SECOND(time)",
                "description": "Extracts the second part from a TIME, DATETIME, or TIMESTAMP value.",
                "examples": [
                    "SELECT SECOND('10:11:12');",
                    "SELECT SECOND(4.99999999991e0);",
                    "SELECT SECOND(CAST('2007-07-19' AS DATE));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HOUR(expr)",
                "description": "Returns the hour part of the given time or datetime expression.",
                "examples": [
                    "SELECT HOUR('18:45:30');",
                    "SELECT HOUR('2023-10-01 08:15:00');",
                    "SELECT HOUR(CURRENT_TIMESTAMP);"
                ]
            },
            {
                "expression": "MINUTE()",
                "description": "Extracts the minute part from a time or datetime value.",
                "examples": [
                    "SELECT MINUTE('12:34:56');",
                    "SELECT MINUTE('2025-01-01 10:30:00');",
                    "SELECT MINUTE(NULL);"
                ]
            },
            {
                "expression": "SECOND(time)",
                "description": "Extracts the second part from a TIME, DATETIME, or TIMESTAMP value.",
                "examples": [
                    "SELECT SECOND('10:11:12');",
                    "SELECT SECOND(4.99999999991e0);",
                    "SELECT SECOND(CAST('2007-07-19' AS DATE));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, date, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, date, )\n"
        ]
    },
    {
        "sql_id": 213,
        "database_name": "BUTTERTrans_213",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HOUR(CAST('2007-07-19' AS DATE)),MINUTE(CAST('2007-07-19' AS DATE)),SECOND(CAST('2007-07-19' AS DATE)); -- HOUR, MINUTE, SECOND",
        "target_query": "SELECT HOUR(CAST('2007-07-19' AS DATE)),MINUTE(CAST('2007-07-19' AS DATE)),SECOND(CAST('2007-07-19' AS DATE));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HOUR",
                "start_pos": 7,
                "end_pos": 11
            },
            {
                "dialect_token": "MINUTE",
                "start_pos": 40,
                "end_pos": 46
            },
            {
                "dialect_token": "SECOND",
                "start_pos": 75,
                "end_pos": 81
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HOUR(expr)",
                "description": "Extracts the hour (0\u201323) from a time or datetime expression.",
                "examples": [
                    "SELECT HOUR('18:45:30');",
                    "SELECT HOUR('2023-10-01 08:15:00');",
                    "SELECT HOUR(CURRENT_TIMESTAMP);"
                ]
            },
            {
                "expression": "MINUTE()",
                "description": "Extracts the minute part from a time or datetime value.",
                "examples": [
                    "SELECT MINUTE('12:34:56');",
                    "SELECT MINUTE('2025-01-01 10:30:00');",
                    "SELECT MINUTE(NULL);"
                ]
            },
            {
                "expression": "SECOND(time)",
                "description": "Extracts the second part from a TIME, DATETIME, or TIMESTAMP value.",
                "examples": [
                    "SELECT SECOND('10:11:12');",
                    "SELECT SECOND(4.99999999991e0);",
                    "SELECT SECOND(CAST('2007-07-19' AS DATE));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HOUR(expr)",
                "description": "Returns the hour part of the given time or datetime expression.",
                "examples": [
                    "SELECT HOUR('18:45:30');",
                    "SELECT HOUR('2023-10-01 08:15:00');",
                    "SELECT HOUR(CURRENT_TIMESTAMP);"
                ]
            },
            {
                "expression": "MINUTE()",
                "description": "Extracts the minute part from a time or datetime value.",
                "examples": [
                    "SELECT MINUTE('12:34:56');",
                    "SELECT MINUTE('2025-01-01 10:30:00');",
                    "SELECT MINUTE(NULL);"
                ]
            },
            {
                "expression": "SECOND(time)",
                "description": "Extracts the second part from a TIME, DATETIME, or TIMESTAMP value.",
                "examples": [
                    "SELECT SECOND('10:11:12');",
                    "SELECT SECOND(4.99999999991e0);",
                    "SELECT SECOND(CAST('2007-07-19' AS DATE));"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 214,
        "database_name": "BUTTERTrans_214",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HOUR(CAST(NULL AS DATE)),MINUTE(CAST(NULL AS DATE)),SECOND(CAST(NULL AS DATE)); -- HOUR, MINUTE, SECOND",
        "target_query": "SELECT HOUR(CAST(NULL AS DATE)),MINUTE(CAST(NULL AS DATE)),SECOND(CAST(NULL AS DATE));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HOUR",
                "start_pos": 7,
                "end_pos": 11
            },
            {
                "dialect_token": "MINUTE",
                "start_pos": 32,
                "end_pos": 38
            },
            {
                "dialect_token": "SECOND",
                "start_pos": 59,
                "end_pos": 65
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HOUR(expr)",
                "description": "Extracts the hour (0\u201323) from a time or datetime expression.",
                "examples": [
                    "SELECT HOUR('18:45:30');",
                    "SELECT HOUR('2023-10-01 08:15:00');",
                    "SELECT HOUR(CURRENT_TIMESTAMP);"
                ]
            },
            {
                "expression": "MINUTE()",
                "description": "Extracts the minute part from a time or datetime value.",
                "examples": [
                    "SELECT MINUTE('12:34:56');",
                    "SELECT MINUTE('2025-01-01 10:30:00');",
                    "SELECT MINUTE(NULL);"
                ]
            },
            {
                "expression": "SECOND(time)",
                "description": "Extracts the second part from a TIME, DATETIME, or TIMESTAMP value.",
                "examples": [
                    "SELECT SECOND('10:11:12');",
                    "SELECT SECOND(4.99999999991e0);",
                    "SELECT SECOND(CAST('2007-07-19' AS DATE));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HOUR(expr)",
                "description": "Returns the hour part of the given time or datetime expression.",
                "examples": [
                    "SELECT HOUR('18:45:30');",
                    "SELECT HOUR('2023-10-01 08:15:00');",
                    "SELECT HOUR(CURRENT_TIMESTAMP);"
                ]
            },
            {
                "expression": "MINUTE()",
                "description": "Extracts the minute part from a time or datetime value.",
                "examples": [
                    "SELECT MINUTE('12:34:56');",
                    "SELECT MINUTE('2025-01-01 10:30:00');",
                    "SELECT MINUTE(NULL);"
                ]
            },
            {
                "expression": "SECOND(time)",
                "description": "Extracts the second part from a TIME, DATETIME, or TIMESTAMP value.",
                "examples": [
                    "SELECT SECOND('10:11:12');",
                    "SELECT SECOND(4.99999999991e0);",
                    "SELECT SECOND(CAST('2007-07-19' AS DATE));"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 215,
        "database_name": "BUTTERTrans_215",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HOUR(NULL),MINUTE(NULL),SECOND(NULL); -- HOUR, MINUTE, SECOND",
        "target_query": "SELECT HOUR(NULL),MINUTE(NULL),SECOND(NULL);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HOUR",
                "start_pos": 7,
                "end_pos": 11
            },
            {
                "dialect_token": "MINUTE",
                "start_pos": 18,
                "end_pos": 24
            },
            {
                "dialect_token": "SECOND",
                "start_pos": 31,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HOUR(expr)",
                "description": "Extracts the hour (0\u201323) from a time or datetime expression.",
                "examples": [
                    "SELECT HOUR('18:45:30');",
                    "SELECT HOUR('2023-10-01 08:15:00');",
                    "SELECT HOUR(CURRENT_TIMESTAMP);"
                ]
            },
            {
                "expression": "MINUTE()",
                "description": "Extracts the minute part from a time or datetime value.",
                "examples": [
                    "SELECT MINUTE('12:34:56');",
                    "SELECT MINUTE('2025-01-01 10:30:00');",
                    "SELECT MINUTE(NULL);"
                ]
            },
            {
                "expression": "SECOND(time)",
                "description": "Extracts the second part from a TIME, DATETIME, or TIMESTAMP value.",
                "examples": [
                    "SELECT SECOND('10:11:12');",
                    "SELECT SECOND(4.99999999991e0);",
                    "SELECT SECOND(CAST('2007-07-19' AS DATE));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HOUR(expr)",
                "description": "Returns the hour part of the given time or datetime expression.",
                "examples": [
                    "SELECT HOUR('18:45:30');",
                    "SELECT HOUR('2023-10-01 08:15:00');",
                    "SELECT HOUR(CURRENT_TIMESTAMP);"
                ]
            },
            {
                "expression": "MINUTE()",
                "description": "Extracts the minute part from a time or datetime value.",
                "examples": [
                    "SELECT MINUTE('12:34:56');",
                    "SELECT MINUTE('2025-01-01 10:30:00');",
                    "SELECT MINUTE(NULL);"
                ]
            },
            {
                "expression": "SECOND(time)",
                "description": "Extracts the second part from a TIME, DATETIME, or TIMESTAMP value.",
                "examples": [
                    "SELECT SECOND('10:11:12');",
                    "SELECT SECOND(4.99999999991e0);",
                    "SELECT SECOND(CAST('2007-07-19' AS DATE));"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 216,
        "database_name": "BUTTERTrans_216",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CONVERT('a', CHAR(2049)); -- CONVERT",
        "target_query": "SELECT CONVERT('a', CHAR(2049));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONVERT",
                "start_pos": 7,
                "end_pos": 14
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "Converts data types or changes the character set.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8);",
                    "SELECT CONVERT(1234, CHAR);",
                    "SELECT CONVERT(column_name USING latin1) FROM my_table;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "MariaDB supports CONVERT similar to MySQL, for both character set and type conversion.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8mb4);",
                    "SELECT CONVERT('2021-12-31', CHAR);",
                    "SELECT CONVERT(column_name USING utf8mb4) FROM my_table;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 217,
        "database_name": "BUTTERTrans_217",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CONCAT(\"value=\", CAST(\"3.4e5\" AS FLOAT)); -- CONCAT",
        "target_query": "SELECT CONCAT(\"value=\", CAST(\"3.4e5\" AS FLOAT));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 218,
        "database_name": "BUTTERTrans_218",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT MAKETIME(1, 2, CAST(\"1.6\" AS FLOAT)); -- MAKETIME",
        "target_query": "SELECT MAKETIME(1, 2, CAST(\"1.6\" AS FLOAT));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MAKETIME",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MAKETIME(hours, minutes, seconds)",
                "description": "Creates a time value from the provided hours, minutes, and seconds.",
                "examples": [
                    "SELECT MAKETIME(1, 30, 45);",
                    "SELECT MAKETIME(12, 0, 0);",
                    "SELECT MAKETIME(23, 59, 59);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MAKETIME(hours, minutes, seconds)",
                "description": "Creates a time value from the provided hours, minutes, and seconds, just like in MySQL.",
                "examples": [
                    "SELECT MAKETIME(1, 30, 45);",
                    "SELECT MAKETIME(12, 0, 0);",
                    "SELECT MAKETIME(23, 59, 59);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 219,
        "database_name": "BUTTERTrans_219",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT STRCMP(a, b) FROM t1; -- STRCMP",
        "target_query": "SELECT STRCMP(CAST(a AS CHAR), b) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STRCMP",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, year, )\n(b, varchar(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, year(4), )\n(b, varchar(10), )\n"
        ]
    },
    {
        "sql_id": 220,
        "database_name": "BUTTERTrans_220",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CAST(JSON_EXTRACT('{\\\"key_year\\\":1934}', '$.key_year') AS YEAR); -- JSON_EXTRACT",
        "target_query": "SELECT CAST(JSON_EXTRACT('{\"key_year\":1934}', '$.key_year') AS UNSIGNED) AS year;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "JSON_EXTRACT",
                "start_pos": 12,
                "end_pos": 24
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "JSON_EXTRACT(json_doc, path)",
                "description": "Extracts data from a JSON document at the specified path(s). Supports dot notation and wildcards.",
                "examples": [
                    "SELECT JSON_EXTRACT('{\"user\": {\"name\": \"Alice\"}}', '$.user.name');",
                    "SELECT JSON_EXTRACT('{\"items\": [10, 20, 30]}', '$.items[1]');",
                    "SELECT JSON_EXTRACT('{\"a\": {\"b\": [1, 2]}}', '$.a.b[0]');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "JSON_EXTRACT(json_doc, path)",
                "description": "Extracts a value from a JSON document using a JSON path. Fully compatible with MySQL's implementation.",
                "examples": [
                    "SELECT JSON_EXTRACT('{\"user\": {\"name\": \"Alice\"}}', '$.user.name');",
                    "SELECT JSON_EXTRACT('{\"items\": [10, 20, 30]}', '$.items[1]');",
                    "SELECT JSON_EXTRACT('{\"a\": {\"b\": [1, 2]}}', '$.a.b[0]');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 221,
        "database_name": "BUTTERTrans_221",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CAST(1988 AS YEAR), REPEAT(CAST(1988 AS YEAR), 3) AS c2; -- REPEAT",
        "target_query": "SELECT CONVERT(1988, SIGNED), REPEAT('1988', 3) AS c2;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 27,
                "end_pos": 33
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 222,
        "database_name": "BUTTERTrans_222",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CONCAT('x', CAST(1988 AS YEAR)); -- CONCAT",
        "target_query": "SELECT CONCAT('x', '1988') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 223,
        "database_name": "BUTTERTrans_223",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIME_TO_SEC(CAST('2030' AS YEAR)); -- TIME_TO_SEC",
        "target_query": "SELECT TIME_TO_SEC(CAST('20:30:00' AS TIME)) AS seconds;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIME_TO_SEC",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME_TO_SEC(time)",
                "description": "Converts a time value (HH:MM:SS) to the total number of seconds.",
                "examples": [
                    "SELECT TIME_TO_SEC('15:12:22');",
                    "SELECT TIME_TO_SEC('00:01:00');",
                    "SELECT SEC_TO_TIME(TIME_TO_SEC('15:12:22') - TIME_TO_SEC('14:12:22'));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME_TO_SEC(time)",
                "description": "Converts a time value (HH:MM:SS) to the total number of seconds.",
                "examples": [
                    "SELECT TIME_TO_SEC('15:12:22');",
                    "SELECT TIME_TO_SEC('00:01:00');",
                    "SELECT SEC_TO_TIME(TIME_TO_SEC('15:12:22') - TIME_TO_SEC('14:12:22'));"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 224,
        "database_name": "BUTTERTrans_224",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIMESTAMPADD(MINUTE, 1, CAST(1988 AS YEAR)); -- TIMESTAMPADD",
        "target_query": "SELECT TIMESTAMPADD(MINUTE, 1, '1988-01-01') AS timestamp;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMESTAMPADD",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMPADD(unit, interval, datetime_expr)",
                "description": "Adds a time interval to a date or timestamp expression using the specified unit.",
                "examples": [
                    "SELECT TIMESTAMPADD(DAY, 2, '2023-01-01');",
                    "SELECT TIMESTAMPADD(MINUTE, -5, '2023-05-10 12:00:00');",
                    "SELECT TIMESTAMPADD(YEAR, 1, '2020-06-15');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMESTAMPADD(unit, interval, datetime_expr)",
                "description": "Adds a specified interval of time to a date or timestamp expression using a given unit.",
                "examples": [
                    "SELECT TIMESTAMPADD(DAY, 2, '2023-01-01');",
                    "SELECT TIMESTAMPADD(MINUTE, -5, '2023-05-10 12:00:00');",
                    "SELECT TIMESTAMPADD(YEAR, 1, '2020-06-15');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 225,
        "database_name": "BUTTERTrans_225",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CAST(STR_TO_DATE('nope','%d-%m-%Y') AS YEAR); -- STR_TO_DATE",
        "target_query": "SELECT YEAR(STR_TO_DATE('01-01-1988', '%d-%m-%Y')) AS year;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STR_TO_DATE",
                "start_pos": 12,
                "end_pos": 23
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Convert the string '09:22' to a TIME type using the format '%H:%i'.",
                "examples": [
                    "SELECT STR_TO_DATE('12:45', '%H:%i');",
                    "SELECT STR_TO_DATE('2000-01-01', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2023-05-06 12:34:56', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Identical to MySQL, this function is supported in MariaDB for converting strings to date/time formats.",
                "examples": [
                    "SELECT STR_TO_DATE('14:30', '%H:%i');",
                    "SELECT STR_TO_DATE('2015-07-19', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2021-11-11 15:50:30', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 226,
        "database_name": "BUTTERTrans_226",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT 1 FROM t WHERE CAST(a AS UNSIGNED INTEGER) = 1 AND a = IF(TRUE, NULL, 1); -- IF",
        "target_query": "SELECT 1 FROM t WHERE a = 1 AND a = IF(TRUE, NULL, 1);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IF",
                "start_pos": 62,
                "end_pos": 64
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(a, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(a, int(11), )\n"
        ]
    },
    {
        "sql_id": 227,
        "database_name": "BUTTERTrans_227",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT IF( a = 1, a, a ) AS b FROM t1 ORDER BY field( b + 1, 1 ); -- IF, FIELD",
        "target_query": "SELECT IF( a = 1, a, a ) AS b FROM t1 ORDER BY field( b + 1, 1 );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IF",
                "start_pos": 7,
                "end_pos": 9
            },
            {
                "dialect_token": "FIELD",
                "start_pos": 47,
                "end_pos": 52
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the index (1-based) of the first value in the list that is equal to 'val'. Returns 0 if no match is found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the position of 'val' in the list (1-based index). Returns 0 if 'val' is not found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n"
        ]
    },
    {
        "sql_id": 228,
        "database_name": "BUTTERTrans_228",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT IF( a = 1, a, a ) AS b FROM t1 ORDER BY field( b, 1 ); -- IF, FIELD",
        "target_query": "SELECT IF( a = 1, a, a ) AS b FROM t1 ORDER BY field( b, 1 );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IF",
                "start_pos": 7,
                "end_pos": 9
            },
            {
                "dialect_token": "FIELD",
                "start_pos": 47,
                "end_pos": 52
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the index (1-based) of the first value in the list that is equal to 'val'. Returns 0 if no match is found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the position of 'val' in the list (1-based index). Returns 0 if 'val' is not found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n"
        ]
    },
    {
        "sql_id": 229,
        "database_name": "BUTTERTrans_229",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(a) = b; -- TRIM",
        "target_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(a) = b;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TRIM",
                "start_pos": 59,
                "end_pos": 63
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function in MariaDB behaves exactly as in MySQL, removing specified characters or spaces from the beginning or end of the string.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n(a, bigint unsigned, )\n(b, varchar(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int(11), PRI)\n(a, bigint(20) unsigned, )\n(b, varchar(20), )\n"
        ]
    },
    {
        "sql_id": 230,
        "database_name": "BUTTERTrans_230",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(a) = b; -- TRIM",
        "target_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(a) = b;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TRIM",
                "start_pos": 59,
                "end_pos": 63
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function in MariaDB behaves exactly as in MySQL, removing specified characters or spaces from the beginning or end of the string.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n(a, bigint unsigned, )\n(b, varchar(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int(11), PRI)\n(a, bigint(20) unsigned, )\n(b, varchar(20), )\n"
        ]
    },
    {
        "sql_id": 231,
        "database_name": "BUTTERTrans_231",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775805 AND TRIM(a) = b; -- TRIM",
        "target_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775805 AND TRIM(a) = b;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TRIM",
                "start_pos": 59,
                "end_pos": 63
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function in MariaDB behaves exactly as in MySQL, removing specified characters or spaces from the beginning or end of the string.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n(a, bigint unsigned, )\n(b, varchar(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int(11), PRI)\n(a, bigint(20) unsigned, )\n(b, varchar(20), )\n"
        ]
    },
    {
        "sql_id": 232,
        "database_name": "BUTTERTrans_232",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 0 AND TRIM(a) = b; -- TRIM",
        "target_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 0 AND TRIM(a) = b;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TRIM",
                "start_pos": 41,
                "end_pos": 45
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function in MariaDB behaves exactly as in MySQL, removing specified characters or spaces from the beginning or end of the string.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n(a, bigint unsigned, )\n(b, varchar(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int(11), PRI)\n(a, bigint(20) unsigned, )\n(b, varchar(20), )\n"
        ]
    },
    {
        "sql_id": 233,
        "database_name": "BUTTERTrans_233",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM t1 WHERE coalesce(a) BETWEEN 0 and 0.9; -- COALESCE",
        "target_query": "SELECT * FROM t1 WHERE coalesce(a) BETWEEN 0 and 0.9;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "COALESCE",
                "start_pos": 23,
                "end_pos": 31
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Same as MySQL: COALESCE function and partition coalescing supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 13;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bigint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bigint(20), )\n"
        ]
    },
    {
        "sql_id": 234,
        "database_name": "BUTTERTrans_234",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM t1 WHERE coalesce(a)=0.9; -- COALESCE",
        "target_query": "SELECT * FROM t1 WHERE coalesce(a)=0.9;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "COALESCE",
                "start_pos": 23,
                "end_pos": 31
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Same as MySQL: COALESCE function and partition coalescing supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 13;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bigint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bigint(20), )\n"
        ]
    },
    {
        "sql_id": 235,
        "database_name": "BUTTERTrans_235",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM t1 WHERE coalesce(a) in (0.8,0.9); -- COALESCE",
        "target_query": "SELECT * FROM t1 WHERE coalesce(a) in (0.8,0.9);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "COALESCE",
                "start_pos": 23,
                "end_pos": 31
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Same as MySQL: COALESCE function and partition coalescing supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 13;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bigint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bigint(20), )\n"
        ]
    },
    {
        "sql_id": 236,
        "database_name": "BUTTERTrans_236",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT hex(a),STRCMP(a,'a'), STRCMP(a,'a ') FROM t1; -- HEX, STRCMP",
        "target_query": "SELECT hex(a),STRCMP(a,'a'), STRCMP(a,'a ') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 14,
                "end_pos": 20
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 29,
                "end_pos": 35
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            },
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(10), )\n"
        ]
    },
    {
        "sql_id": 237,
        "database_name": "BUTTERTrans_237",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CONCAT(b,c), CONCAT(b,c) = '0101' FROM t1; -- CONCAT",
        "target_query": "SELECT CONCAT(b,c), CONCAT(b,c) = '0101' FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "CONCAT",
                "start_pos": 20,
                "end_pos": 26
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(b, int(2) unsigned zerofill, )\n(c, int(2) unsigned zerofill, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(b, int(2) unsigned zerofill, )\n(c, int(2) unsigned zerofill, )\n"
        ]
    },
    {
        "sql_id": 238,
        "database_name": "BUTTERTrans_238",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "EXPLAIN SELECT b,c FROM t1 WHERE b = 1 AND CONCAT(b,c) = '0101'; -- CONCAT",
        "target_query": "EXPLAIN SELECT b,c FROM t1 WHERE b = 1 AND CONCAT(b,c) = '0101';",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 43,
                "end_pos": 49
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(b, int(2) unsigned zerofill, )\n(c, int(2) unsigned zerofill, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(b, int(2) unsigned zerofill, )\n(c, int(2) unsigned zerofill, )\n"
        ]
    },
    {
        "sql_id": 239,
        "database_name": "BUTTERTrans_239",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT b,c FROM t1 WHERE b = 1 AND CONCAT(b,c) = '0101'; -- CONCAT",
        "target_query": "SELECT b,c FROM t1 WHERE b = 1 AND CONCAT(b,c) = '0101';",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 35,
                "end_pos": 41
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(b, int(2) unsigned zerofill, )\n(c, int(2) unsigned zerofill, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(b, int(2) unsigned zerofill, )\n(c, int(2) unsigned zerofill, )\n"
        ]
    },
    {
        "sql_id": 240,
        "database_name": "BUTTERTrans_240",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (NOW()),(NOW()),(NOW()); -- NOW",
        "target_query": "INSERT INTO t1 VALUES (NOW()),(NOW()),(NOW());",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "NOW",
                "start_pos": 23,
                "end_pos": 26
            },
            {
                "dialect_token": "NOW",
                "start_pos": 31,
                "end_pos": 34
            },
            {
                "dialect_token": "NOW",
                "start_pos": 39,
                "end_pos": 42
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, timestamp, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, timestamp, )\n"
        ]
    },
    {
        "sql_id": 241,
        "database_name": "BUTTERTrans_241",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW('1', '1') > ROW(a, '1') FROM t1; -- ROW",
        "target_query": "SELECT ROW('1', '1') > ROW(a, '1') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 23,
                "end_pos": 26
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(10), )\n"
        ]
    },
    {
        "sql_id": 242,
        "database_name": "BUTTERTrans_242",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW(a, '1') > ROW('1', '1') FROM t1; -- ROW",
        "target_query": "SELECT ROW(a, '1') > ROW('1', '1') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 21,
                "end_pos": 24
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(10), )\n"
        ]
    },
    {
        "sql_id": 243,
        "database_name": "BUTTERTrans_243",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select count(distinct if(f1,3,f2)) from t1; -- COUNT, IF",
        "target_query": "select count(distinct if(f1,3,f2)) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IF",
                "start_pos": 22,
                "end_pos": 24
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, int, )\n(f2, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, int(11), )\n(f2, int(11), )\n"
        ]
    },
    {
        "sql_id": 244,
        "database_name": "BUTTERTrans_244",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT inet6_ntoa(inet_ntoa('1')); -- INET6_NTOA, INET_NTOA",
        "target_query": "SELECT INET6_NTOA(INET_NTOA('1'));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "INET6_NTOA",
                "start_pos": 7,
                "end_pos": 17
            },
            {
                "dialect_token": "INET_NTOA",
                "start_pos": 18,
                "end_pos": 27
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INET6_NTOA(CAST(ip AS BINARY(16)))",
                "description": "Converts a 16-byte binary IPv6 address to its textual representation in standard IPv6 format.",
                "examples": [
                    "SELECT INET6_NTOA(CAST('::1' AS BINARY(16)));",
                    "SELECT INET6_NTOA(CAST('2001:0db8:85a3:0000:0000:8a2e:0370:7334' AS BINARY(16)));",
                    "SELECT INET6_NTOA(CAST('fe80::1ff:fe23:4567:890a' AS BINARY(16)));"
                ]
            },
            {
                "expression": "INET_NTOA(ip)",
                "description": "The INET_NTOA function converts an integer representation of an IPv4 address to a standard dotted-decimal format string.",
                "examples": [
                    "SELECT INET_NTOA(3232235776);",
                    "SELECT INET_NTOA(16777343);",
                    "SELECT INET_NTOA(2886733345);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "INET6_NTOA(CAST(ip AS BINARY(16)))",
                "description": "MariaDB supports the same function INET6_NTOA, which converts a 16-byte binary IPv6 address to a textual representation.",
                "examples": [
                    "SELECT INET6_NTOA(CAST('::1' AS BINARY(16)));",
                    "SELECT INET6_NTOA(CAST('2001:0db8:85a3:0000:0000:8a2e:0370:7334' AS BINARY(16)));",
                    "SELECT INET6_NTOA(CAST('fe80::1ff:fe23:4567:890a' AS BINARY(16)));"
                ]
            },
            {
                "expression": "INET_NTOA(ip)",
                "description": "MariaDB supports INET_NTOA just like MySQL, converting an integer IPv4 address to its dotted-decimal string representation.",
                "examples": [
                    "SELECT INET_NTOA(3232235776);",
                    "SELECT INET_NTOA(16777343);",
                    "SELECT INET_NTOA(2886733345);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 245,
        "database_name": "BUTTERTrans_245",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HEX(v) FROM t1; -- HEX",
        "target_query": "SELECT HEX(v) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(v, varchar(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(v, varchar(10), )\n"
        ]
    },
    {
        "sql_id": 246,
        "database_name": "BUTTERTrans_246",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat(name,space(level)), concat(name, repeat(' ',level)) from t1; -- CONCAT, SPACE, REPEAT",
        "target_query": "select concat(name,space(level)), concat(name, repeat(' ',level)) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "SPACE",
                "start_pos": 19,
                "end_pos": 24
            },
            {
                "dialect_token": "CONCAT",
                "start_pos": 34,
                "end_pos": 40
            },
            {
                "dialect_token": "REPEAT",
                "start_pos": 47,
                "end_pos": 53
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "SPACE(n)",
                "description": "Returns a string consisting of n space characters.",
                "examples": [
                    "SELECT LENGTH(SPACE(5));",
                    "SELECT CONCAT('A', SPACE(3), 'B');",
                    "SELECT CONCAT(REPEAT('-', 2), SPACE(4), '!');"
                ]
            },
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "SPACE(n)",
                "description": "Returns a string consisting of n space characters.",
                "examples": [
                    "SELECT LENGTH(SPACE(5));",
                    "SELECT CONCAT('A', SPACE(3), 'B');",
                    "SELECT CONCAT(REPEAT('-', 2), SPACE(4), '!');"
                ]
            },
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(name, varchar(10), )\n(level, smallint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(name, varchar(10), )\n(level, smallint(6), )\n"
        ]
    },
    {
        "sql_id": 247,
        "database_name": "BUTTERTrans_247",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "create table t1 select repeat('a',4000) a; -- REPEAT",
        "target_query": "create table t1 select repeat('a',4000) a;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 23,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 select repeat('a',4000) a; -- REPEAT"
        ],
        "target_related_schemas": [
            "create table t1 select repeat('a',4000) a;"
        ]
    },
    {
        "sql_id": 248,
        "database_name": "BUTTERTrans_248",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "CREATE TABLE head AS SELECT concat(b1.b, b2.b) AS head FROM t1 b1, t1 b2; -- CONCAT",
        "target_query": "CREATE TABLE head AS SELECT concat(b1.b, b2.b) AS head FROM t1 b1, t1 b2;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 28,
                "end_pos": 34
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(b, varchar(2), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(b, varchar(2), )\n"
        ]
    },
    {
        "sql_id": 249,
        "database_name": "BUTTERTrans_249",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "CREATE TABLE tail AS SELECT concat(b1.b, b2.b) AS tail FROM t1 b1, t1 b2; -- CONCAT",
        "target_query": "CREATE TABLE tail AS SELECT concat(b1.b, b2.b) AS tail FROM t1 b1, t1 b2;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 28,
                "end_pos": 34
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `head`\nColumns:\n(head, varchar(4), )\n",
            "Table: `t1`\nColumns:\n(b, varchar(2), )\n"
        ],
        "target_related_schemas": [
            "Table: `head`\nColumns:\n(head, varchar(4), )\n",
            "Table: `t1`\nColumns:\n(b, varchar(2), )\n"
        ]
    },
    {
        "sql_id": 250,
        "database_name": "BUTTERTrans_250",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT inet6_ntoa(inet_ntoa('1')); -- INET6_NTOA, INET_NTOA",
        "target_query": "SELECT inet6_ntoa(inet_ntoa('1'));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "INET6_NTOA",
                "start_pos": 7,
                "end_pos": 17
            },
            {
                "dialect_token": "INET_NTOA",
                "start_pos": 18,
                "end_pos": 27
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INET6_NTOA(CAST(ip AS BINARY(16)))",
                "description": "Converts a 16-byte binary IPv6 address to its textual representation in standard IPv6 format.",
                "examples": [
                    "SELECT INET6_NTOA(CAST('::1' AS BINARY(16)));",
                    "SELECT INET6_NTOA(CAST('2001:0db8:85a3:0000:0000:8a2e:0370:7334' AS BINARY(16)));",
                    "SELECT INET6_NTOA(CAST('fe80::1ff:fe23:4567:890a' AS BINARY(16)));"
                ]
            },
            {
                "expression": "INET_NTOA(ip)",
                "description": "The INET_NTOA function converts an integer representation of an IPv4 address to a standard dotted-decimal format string.",
                "examples": [
                    "SELECT INET_NTOA(3232235776);",
                    "SELECT INET_NTOA(16777343);",
                    "SELECT INET_NTOA(2886733345);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "INET6_NTOA(CAST(ip AS BINARY(16)))",
                "description": "MariaDB supports the same function INET6_NTOA, which converts a 16-byte binary IPv6 address to a textual representation.",
                "examples": [
                    "SELECT INET6_NTOA(CAST('::1' AS BINARY(16)));",
                    "SELECT INET6_NTOA(CAST('2001:0db8:85a3:0000:0000:8a2e:0370:7334' AS BINARY(16)));",
                    "SELECT INET6_NTOA(CAST('fe80::1ff:fe23:4567:890a' AS BINARY(16)));"
                ]
            },
            {
                "expression": "INET_NTOA(ip)",
                "description": "MariaDB supports INET_NTOA just like MySQL, converting an integer IPv4 address to its dotted-decimal string representation.",
                "examples": [
                    "SELECT INET_NTOA(3232235776);",
                    "SELECT INET_NTOA(16777343);",
                    "SELECT INET_NTOA(2886733345);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `head`\nColumns:\n(head, varchar(4), )\n",
            "Table: `tail`\nColumns:\n(tail, varchar(4), )\n"
        ],
        "target_related_schemas": [
            "Table: `head`\nColumns:\n(head, varchar(4), )\n",
            "Table: `tail`\nColumns:\n(tail, varchar(4), )\n"
        ]
    },
    {
        "sql_id": 251,
        "database_name": "BUTTERTrans_251",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT GROUP_CONCAT(IFNULL(a,'')) FROM t1; -- GROUP_CONCAT, IFNULL",
        "target_query": "SELECT GROUP_CONCAT(IFNULL(a,'')) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GROUP_CONCAT",
                "start_pos": 7,
                "end_pos": 19
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 20,
                "end_pos": 26
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "group_concat(X)group_concat(X,Y)string_agg(X,Y)",
                "description": "The GROUP_CONCAT([DISTINCT] expr [,expr ...]  [ORDER BY {unsigned_integer | col_name | expr}  [ASC | DESC] [,col_name ...]]  [SEPARATOR str_val])\nfunction returns a string result with the concatenated non-NULL values from a group.\nDISTINGUISHED keyword can be used to eliminate duplicate values.\nORDER BY clause can be used to sort the values.\nSEPARATOR keyword specifies the separator between values, default is comma(,).\nThe maximum length of the result is controlled by group_concat_max_len system variable, default is 1024.",
                "examples": [
                    "SELECT group_concat(name) FROM students; -- Returns a comma-separated list of names",
                    "SELECT group_concat(name, ' | ') FROM students; -- Returns names separated by '|'"
                ]
            },
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "group_concat(X)group_concat(X,Y)string_agg(X,Y)",
                "description": "The group_concat(X) function returns a string that concatenates all the non-NULL values in X, separated by commas. The group_concat(X,Y) function returns a string that concatenates all the non-NULL values in X, separated by Y. The string_agg(X,Y) function returns a string that concatenates all the non-NULL values in X, separated by Y.",
                "examples": [
                    "SELECT group_concat(name) FROM students; -- Returns a comma-separated list of names",
                    "SELECT group_concat(name, ' | ') FROM students; -- Returns names separated by '|'"
                ]
            },
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, mediumint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, mediumint(9), )\n"
        ]
    },
    {
        "sql_id": 252,
        "database_name": "BUTTERTrans_252",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT GROUP_CONCAT(IF(a,a,'')) FROM t1; -- GROUP_CONCAT, IF",
        "target_query": "SELECT GROUP_CONCAT(IF(a,a,'')) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GROUP_CONCAT",
                "start_pos": 7,
                "end_pos": 19
            },
            {
                "dialect_token": "IF",
                "start_pos": 20,
                "end_pos": 22
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "group_concat(X)group_concat(X,Y)string_agg(X,Y)",
                "description": "The GROUP_CONCAT([DISTINCT] expr [,expr ...]  [ORDER BY {unsigned_integer | col_name | expr}  [ASC | DESC] [,col_name ...]]  [SEPARATOR str_val])\nfunction returns a string result with the concatenated non-NULL values from a group.\nDISTINGUISHED keyword can be used to eliminate duplicate values.\nORDER BY clause can be used to sort the values.\nSEPARATOR keyword specifies the separator between values, default is comma(,).\nThe maximum length of the result is controlled by group_concat_max_len system variable, default is 1024.",
                "examples": [
                    "SELECT group_concat(name) FROM students; -- Returns a comma-separated list of names",
                    "SELECT group_concat(name, ' | ') FROM students; -- Returns names separated by '|'"
                ]
            },
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "group_concat(X)group_concat(X,Y)string_agg(X,Y)",
                "description": "The group_concat(X) function returns a string that concatenates all the non-NULL values in X, separated by commas. The group_concat(X,Y) function returns a string that concatenates all the non-NULL values in X, separated by Y. The string_agg(X,Y) function returns a string that concatenates all the non-NULL values in X, separated by Y.",
                "examples": [
                    "SELECT group_concat(name) FROM students; -- Returns a comma-separated list of names",
                    "SELECT group_concat(name, ' | ') FROM students; -- Returns names separated by '|'"
                ]
            },
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, mediumint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, mediumint(9), )\n"
        ]
    },
    {
        "sql_id": 253,
        "database_name": "BUTTERTrans_253",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT GROUP_CONCAT(CASE WHEN a THEN a ELSE '' END) FROM t1; -- GROUP_CONCAT",
        "target_query": "SELECT GROUP_CONCAT(CASE WHEN a THEN a ELSE '' END) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GROUP_CONCAT",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "group_concat(X)group_concat(X,Y)string_agg(X,Y)",
                "description": "The GROUP_CONCAT([DISTINCT] expr [,expr ...]  [ORDER BY {unsigned_integer | col_name | expr}  [ASC | DESC] [,col_name ...]]  [SEPARATOR str_val])\nfunction returns a string result with the concatenated non-NULL values from a group.\nDISTINGUISHED keyword can be used to eliminate duplicate values.\nORDER BY clause can be used to sort the values.\nSEPARATOR keyword specifies the separator between values, default is comma(,).\nThe maximum length of the result is controlled by group_concat_max_len system variable, default is 1024.",
                "examples": [
                    "SELECT group_concat(name) FROM students; -- Returns a comma-separated list of names",
                    "SELECT group_concat(name, ' | ') FROM students; -- Returns names separated by '|'"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "group_concat(X)group_concat(X,Y)string_agg(X,Y)",
                "description": "The group_concat(X) function returns a string that concatenates all the non-NULL values in X, separated by commas. The group_concat(X,Y) function returns a string that concatenates all the non-NULL values in X, separated by Y. The string_agg(X,Y) function returns a string that concatenates all the non-NULL values in X, separated by Y.",
                "examples": [
                    "SELECT group_concat(name) FROM students; -- Returns a comma-separated list of names",
                    "SELECT group_concat(name, ' | ') FROM students; -- Returns names separated by '|'"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, mediumint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, mediumint(9), )\n"
        ]
    },
    {
        "sql_id": 254,
        "database_name": "BUTTERTrans_254",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT COALESCE(a,'') FROM t1 GROUP BY 1; -- COALESCE",
        "target_query": "SELECT COALESCE(a,'') FROM t1 GROUP BY 1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "COALESCE",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Same as MySQL: COALESCE function and partition coalescing supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 13;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, mediumint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, mediumint(9), )\n"
        ]
    },
    {
        "sql_id": 255,
        "database_name": "BUTTERTrans_255",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "CREATE TABLE t2 AS SELECT CONCAT_WS(1,2,3) FROM t1; -- CONCAT_WS",
        "target_query": "CREATE TABLE t2 AS SELECT CONCAT_WS(1,2,3) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT_WS",
                "start_pos": 26,
                "end_pos": 35
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT_WS(separator, str1, str2, ...)",
                "description": "Concatenates multiple strings with the specified separator. If any argument is NULL, it is ignored.",
                "examples": [
                    "SELECT CONCAT_WS(',', 'apple', 'banana', 'cherry');",
                    "SELECT CONCAT_WS('-', 'hello', 'world');",
                    "SELECT CONCAT_WS(' ', 'this', NULL, 'is', 'a', 'test');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT_WS(separator, str1, str2, ...)",
                "description": "Concatenates strings using a separator and ignores NULL values.",
                "examples": [
                    "SELECT CONCAT_WS(',', 'apple', 'banana', 'cherry');",
                    "SELECT CONCAT_WS('-', 'hello', 'world');",
                    "SELECT CONCAT_WS(' ', 'this', NULL, 'is', 'a', 'test');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, mediumint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, mediumint(9), )\n"
        ]
    },
    {
        "sql_id": 256,
        "database_name": "BUTTERTrans_256",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "CREATE TABLE t2 AS SELECT LCASE(a) FROM t1; -- LCASE",
        "target_query": "CREATE TABLE t2 AS SELECT LCASE(a) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LCASE",
                "start_pos": 26,
                "end_pos": 31
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LCASE(str)",
                "description": "Converts all characters in a string to lowercase. Equivalent to LOWER(str).",
                "examples": [
                    "SELECT LCASE('TeSt');",
                    "SELECT LCASE(CONCAT('A', 'B', 'C'));",
                    "SELECT LCASE(456);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LCASE(str)",
                "description": "Performs case conversion of a string to all lowercase characters.",
                "examples": [
                    "SELECT LCASE('TeSt');",
                    "SELECT LCASE(CONCAT('A', 'B', 'C'));",
                    "SELECT LCASE(456);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, mediumint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, mediumint(9), )\n"
        ]
    },
    {
        "sql_id": 257,
        "database_name": "BUTTERTrans_257",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "CREATE TABLE t2 AS SELECT UCASE(a) FROM t1; -- UCASE",
        "target_query": "CREATE TABLE t2 AS SELECT UPPER(a) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UCASE",
                "start_pos": 26,
                "end_pos": 31
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UCASE(str)",
                "description": "Returns the string `str` with all characters converted to uppercase. UCASE is a synonym for UPPER.",
                "examples": [
                    "SELECT UCASE('hello world');",
                    "SELECT UCASE(CONCAT('abc', '123'));",
                    "SELECT UCASE(REPLACE('test case', 'case', 'CASE'));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UPPER(str)",
                "description": "Returns the string `str` in uppercase. Equivalent to UCASE in MySQL.",
                "examples": [
                    "SELECT UPPER('hello world');",
                    "SELECT UPPER(CONCAT('abc', '123'));",
                    "SELECT UPPER(REPLACE('test case', 'case', 'CASE'));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, mediumint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, mediumint(9), )\n"
        ]
    },
    {
        "sql_id": 258,
        "database_name": "BUTTERTrans_258",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "CREATE TABLE t2 AS SELECT REPEAT(1,2) FROM t1; -- REPEAT",
        "target_query": "CREATE TABLE t2 AS SELECT REPEAT(1,2) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 26,
                "end_pos": 32
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, mediumint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, mediumint(9), )\n"
        ]
    },
    {
        "sql_id": 259,
        "database_name": "BUTTERTrans_259",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "CREATE TABLE t2 AS SELECT ELT(1,111,222,333) FROM t1; -- ELT",
        "target_query": "CREATE TABLE t2 AS SELECT ELT(1,111,222,333) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ELT",
                "start_pos": 26,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ELT(2, 'apple', 'banana', 'cherry')",
                "description": "Returns the N-th element from the list, where N is the first argument.",
                "examples": [
                    "SELECT ELT(2, 'apple', 'banana', 'cherry');  -- Returns 'banana'",
                    "SELECT ELT(1, 'red', 'green', 'blue');  -- Returns 'red'",
                    "SELECT ELT(3, 'dog', 'cat', 'bird');  -- Returns 'bird'"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "ELT(2, 'apple', 'banana', 'cherry')",
                "description": "Returns the N-th element from the list, where N is the first argument.",
                "examples": [
                    "SELECT ELT(2, 'apple', 'banana', 'cherry');  -- Returns 'banana'",
                    "SELECT ELT(1, 'red', 'green', 'blue');  -- Returns 'red'",
                    "SELECT ELT(3, 'dog', 'cat', 'bird');  -- Returns 'bird'"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, mediumint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, mediumint(9), )\n"
        ]
    },
    {
        "sql_id": 260,
        "database_name": "BUTTERTrans_260",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HEX(a) FROM t1; -- HEX",
        "target_query": "SELECT HEX(a) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(10), )\n"
        ]
    },
    {
        "sql_id": 261,
        "database_name": "BUTTERTrans_261",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HEX(a) FROM t2; -- HEX",
        "target_query": "SELECT HEX(a) FROM t2;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(10), )\n",
            "Table: `t2`\nColumns:\n(a, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(10), )\n",
            "Table: `t2`\nColumns:\n(a, char(10), )\n"
        ]
    },
    {
        "sql_id": 262,
        "database_name": "BUTTERTrans_262",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select * from t1 where a=lpad('xxx',10,' '); -- LPAD",
        "target_query": "select * from t1 where a=lpad('xxx',10,' ');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LPAD",
                "start_pos": 25,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(20), )\n"
        ]
    },
    {
        "sql_id": 263,
        "database_name": "BUTTERTrans_263",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select ifnull(c1,''), ifnull(null,c1) from t1; -- IFNULL",
        "target_query": "select ifnull(c1,''), ifnull(null,c1) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IFNULL",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 22,
                "end_pos": 28
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ]
    },
    {
        "sql_id": 264,
        "database_name": "BUTTERTrans_264",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select if(1,c1,''), if(0,c1,'') from t1; -- IF",
        "target_query": "select if(1,c1,''), if(0,c1,'') from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IF",
                "start_pos": 7,
                "end_pos": 9
            },
            {
                "dialect_token": "IF",
                "start_pos": 20,
                "end_pos": 22
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ]
    },
    {
        "sql_id": 265,
        "database_name": "BUTTERTrans_265",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select coalesce('',c1), coalesce(null,c1) from t1; -- COALESCE",
        "target_query": "select coalesce('',c1), coalesce(null,c1) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "COALESCE",
                "start_pos": 7,
                "end_pos": 15
            },
            {
                "dialect_token": "COALESCE",
                "start_pos": 24,
                "end_pos": 32
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Same as MySQL: COALESCE function and partition coalescing supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 13;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ]
    },
    {
        "sql_id": 266,
        "database_name": "BUTTERTrans_266",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select least(c1,''), greatest(c1,'') from t1; -- LEAST, GREATEST",
        "target_query": "select least(c1,''), greatest(c1,'') from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LEAST",
                "start_pos": 7,
                "end_pos": 12
            },
            {
                "dialect_token": "GREATEST",
                "start_pos": 21,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            },
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            },
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ]
    },
    {
        "sql_id": 267,
        "database_name": "BUTTERTrans_267",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select locate(c1,''), locate('',c1) from t1; -- LOCATE",
        "target_query": "select locate(c1,''), locate('',c1) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LOCATE",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "LOCATE",
                "start_pos": 22,
                "end_pos": 28
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LOCATE(substr, str[, start_position])",
                "description": "Returns the position of the first occurrence of substring 'substr' in string 'str'. If 'start_position' is provided, the search starts from that position.",
                "examples": [
                    "select locate('a', 'banana', 2);",
                    "select locate('foo', 'foobar', 2);",
                    "select locate('ab', 'abcab', 3);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LOCATE(substr, str[, start_position])",
                "description": "Same as MySQL. Returns the position of the first occurrence of substring 'substr' in string 'str'. If 'start_position' is provided, the search starts from that position.",
                "examples": [
                    "select locate('a', 'banana', 2);",
                    "select locate('foo', 'foobar', 2);",
                    "select locate('ab', 'abcab', 3);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ]
    },
    {
        "sql_id": 268,
        "database_name": "BUTTERTrans_268",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select field(c1,''),field('',c1) from t1; -- FIELD",
        "target_query": "select field(c1,''),field('',c1) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "FIELD",
                "start_pos": 7,
                "end_pos": 12
            },
            {
                "dialect_token": "FIELD",
                "start_pos": 20,
                "end_pos": 25
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the index (1-based) of the first value in the list that is equal to 'val'. Returns 0 if no match is found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the position of 'val' in the list (1-based index). Returns 0 if 'val' is not found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ]
    },
    {
        "sql_id": 269,
        "database_name": "BUTTERTrans_269",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat(c1,''), concat('',c1) from t1; -- CONCAT",
        "target_query": "select concat(c1,''), concat('',c1) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "CONCAT",
                "start_pos": 22,
                "end_pos": 28
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ]
    },
    {
        "sql_id": 270,
        "database_name": "BUTTERTrans_270",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat_ws(c1,'',''), concat_ws('',c1,'') from t1; -- CONCAT_WS",
        "target_query": "select concat_ws(c1,'',''), concat_ws('',c1,'') from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT_WS",
                "start_pos": 7,
                "end_pos": 16
            },
            {
                "dialect_token": "CONCAT_WS",
                "start_pos": 28,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT_WS(separator, str1, str2, ...)",
                "description": "Concatenates multiple strings with the specified separator. If any argument is NULL, it is ignored.",
                "examples": [
                    "SELECT CONCAT_WS(',', 'apple', 'banana', 'cherry');",
                    "SELECT CONCAT_WS('-', 'hello', 'world');",
                    "SELECT CONCAT_WS(' ', 'this', NULL, 'is', 'a', 'test');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT_WS(separator, str1, str2, ...)",
                "description": "Concatenates strings using a separator and ignores NULL values.",
                "examples": [
                    "SELECT CONCAT_WS(',', 'apple', 'banana', 'cherry');",
                    "SELECT CONCAT_WS('-', 'hello', 'world');",
                    "SELECT CONCAT_WS(' ', 'this', NULL, 'is', 'a', 'test');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ]
    },
    {
        "sql_id": 271,
        "database_name": "BUTTERTrans_271",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select elt(1,c1,''),elt(1,'',c1) from t1; -- ELT",
        "target_query": "select elt(1,c1,''),elt(1,'',c1) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ELT",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ELT",
                "start_pos": 20,
                "end_pos": 23
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ELT(2, 'apple', 'banana', 'cherry')",
                "description": "Returns the N-th element from the list, where N is the first argument.",
                "examples": [
                    "SELECT ELT(2, 'apple', 'banana', 'cherry');  -- Returns 'banana'",
                    "SELECT ELT(1, 'red', 'green', 'blue');  -- Returns 'red'",
                    "SELECT ELT(3, 'dog', 'cat', 'bird');  -- Returns 'bird'"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "ELT(2, 'apple', 'banana', 'cherry')",
                "description": "Returns the N-th element from the list, where N is the first argument.",
                "examples": [
                    "SELECT ELT(2, 'apple', 'banana', 'cherry');  -- Returns 'banana'",
                    "SELECT ELT(1, 'red', 'green', 'blue');  -- Returns 'red'",
                    "SELECT ELT(3, 'dog', 'cat', 'bird');  -- Returns 'bird'"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ]
    },
    {
        "sql_id": 272,
        "database_name": "BUTTERTrans_272",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select lpad(c1,3,'x'), lpad('x',3,c1) from t1; -- LPAD",
        "target_query": "select lpad(c1,3,''), lpad('',3,c1) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LPAD",
                "start_pos": 7,
                "end_pos": 11
            },
            {
                "dialect_token": "LPAD",
                "start_pos": 23,
                "end_pos": 27
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ]
    },
    {
        "sql_id": 273,
        "database_name": "BUTTERTrans_273",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select rpad(c1,3,'x'), rpad('x',3,c1) from t1; -- RPAD",
        "target_query": "select rpad(c1,3,''), rpad('',3,c1) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "RPAD",
                "start_pos": 7,
                "end_pos": 11
            },
            {
                "dialect_token": "RPAD",
                "start_pos": 23,
                "end_pos": 27
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(10), )\n"
        ]
    },
    {
        "sql_id": 274,
        "database_name": "BUTTERTrans_274",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select str_to_date(concat('15-01-2001',' 2:59:58.999'),concat('%d-%m-%Y',' ','%H:%i:%s.%f')); -- STR_TO_DATE, CONCAT",
        "target_query": "select str_to_date(concat('15-01-2001',' 2:59:58.999'),concat('%d-%m-%Y',' ','%H:%i:%s.%f'));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STR_TO_DATE",
                "start_pos": 7,
                "end_pos": 18
            },
            {
                "dialect_token": "CONCAT",
                "start_pos": 19,
                "end_pos": 25
            },
            {
                "dialect_token": "CONCAT",
                "start_pos": 55,
                "end_pos": 61
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Convert the string '09:22' to a TIME type using the format '%H:%i'.",
                "examples": [
                    "SELECT STR_TO_DATE('12:45', '%H:%i');",
                    "SELECT STR_TO_DATE('2000-01-01', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2023-05-06 12:34:56', '%Y-%m-%d %H:%i:%s');"
                ]
            },
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Identical to MySQL, this function is supported in MariaDB for converting strings to date/time formats.",
                "examples": [
                    "SELECT STR_TO_DATE('14:30', '%H:%i');",
                    "SELECT STR_TO_DATE('2015-07-19', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2021-11-11 15:50:30', '%Y-%m-%d %H:%i:%s');"
                ]
            },
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 275,
        "database_name": "BUTTERTrans_275",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select STR_TO_DATE('2004.12.12 22.30.59','%Y.%m.%d %T'); -- STR_TO_DATE",
        "target_query": "select STR_TO_DATE('2004.12.12 22.30.59','%Y.%m.%d %T');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STR_TO_DATE",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Convert the string '09:22' to a TIME type using the format '%H:%i'.",
                "examples": [
                    "SELECT STR_TO_DATE('12:45', '%H:%i');",
                    "SELECT STR_TO_DATE('2000-01-01', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2023-05-06 12:34:56', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Identical to MySQL, this function is supported in MariaDB for converting strings to date/time formats.",
                "examples": [
                    "SELECT STR_TO_DATE('14:30', '%H:%i');",
                    "SELECT STR_TO_DATE('2015-07-19', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2021-11-11 15:50:30', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 276,
        "database_name": "BUTTERTrans_276",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select date1,format1,str_to_date(date1, format1) as str_to_date from t1; -- STR_TO_DATE",
        "target_query": "select date1,format1,str_to_date(date1, format1) as str_to_date from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STR_TO_DATE",
                "start_pos": 21,
                "end_pos": 32
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Convert the string '09:22' to a TIME type using the format '%H:%i'.",
                "examples": [
                    "SELECT STR_TO_DATE('12:45', '%H:%i');",
                    "SELECT STR_TO_DATE('2000-01-01', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2023-05-06 12:34:56', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Identical to MySQL, this function is supported in MariaDB for converting strings to date/time formats.",
                "examples": [
                    "SELECT STR_TO_DATE('14:30', '%H:%i');",
                    "SELECT STR_TO_DATE('2015-07-19', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2021-11-11 15:50:30', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(date1, char(30), )\n(format1, char(30), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(date1, char(30), )\n(format1, char(30), )\n"
        ]
    },
    {
        "sql_id": 277,
        "database_name": "BUTTERTrans_277",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select date1,format1,concat('',str_to_date(date1, format1)) as con from t1; -- CONCAT, STR_TO_DATE",
        "target_query": "select date1,format1,concat('',str_to_date(date1, format1)) as con from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 21,
                "end_pos": 27
            },
            {
                "dialect_token": "STR_TO_DATE",
                "start_pos": 31,
                "end_pos": 42
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Convert the string '09:22' to a TIME type using the format '%H:%i'.",
                "examples": [
                    "SELECT STR_TO_DATE('12:45', '%H:%i');",
                    "SELECT STR_TO_DATE('2000-01-01', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2023-05-06 12:34:56', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Identical to MySQL, this function is supported in MariaDB for converting strings to date/time formats.",
                "examples": [
                    "SELECT STR_TO_DATE('14:30', '%H:%i');",
                    "SELECT STR_TO_DATE('2015-07-19', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2021-11-11 15:50:30', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(date1, char(30), )\n(format1, char(30), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(date1, char(30), )\n(format1, char(30), )\n"
        ]
    },
    {
        "sql_id": 278,
        "database_name": "BUTTERTrans_278",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select date1,format1,cast(str_to_date(date1, format1) as datetime) as datetime from t1; -- STR_TO_DATE",
        "target_query": "select date1,format1,cast(str_to_date(date1, format1) as datetime) as datetime from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STR_TO_DATE",
                "start_pos": 26,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Convert the string '09:22' to a TIME type using the format '%H:%i'.",
                "examples": [
                    "SELECT STR_TO_DATE('12:45', '%H:%i');",
                    "SELECT STR_TO_DATE('2000-01-01', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2023-05-06 12:34:56', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Identical to MySQL, this function is supported in MariaDB for converting strings to date/time formats.",
                "examples": [
                    "SELECT STR_TO_DATE('14:30', '%H:%i');",
                    "SELECT STR_TO_DATE('2015-07-19', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2021-11-11 15:50:30', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(date1, char(30), )\n(format1, char(30), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(date1, char(30), )\n(format1, char(30), )\n"
        ]
    },
    {
        "sql_id": 279,
        "database_name": "BUTTERTrans_279",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select date1,format1,DATE(str_to_date(date1, format1)) as date2 from t1; -- DATE, STR_TO_DATE",
        "target_query": "select date1,format1,DATE(str_to_date(date1, format1)) as date2 from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE",
                "start_pos": 21,
                "end_pos": 25
            },
            {
                "dialect_token": "STR_TO_DATE",
                "start_pos": 26,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "In MySQL, the DATE function extracts the date part from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            },
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Convert the string '09:22' to a TIME type using the format '%H:%i'.",
                "examples": [
                    "SELECT STR_TO_DATE('12:45', '%H:%i');",
                    "SELECT STR_TO_DATE('2000-01-01', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2023-05-06 12:34:56', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "MariaDB also supports the DATE function, which extracts the date from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            },
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Identical to MySQL, this function is supported in MariaDB for converting strings to date/time formats.",
                "examples": [
                    "SELECT STR_TO_DATE('14:30', '%H:%i');",
                    "SELECT STR_TO_DATE('2015-07-19', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2021-11-11 15:50:30', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(date1, char(30), )\n(format1, char(30), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(date1, char(30), )\n(format1, char(30), )\n"
        ]
    },
    {
        "sql_id": 280,
        "database_name": "BUTTERTrans_280",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select date1,format1,TIME(str_to_date(date1, format1)) as time from t1; -- TIME, STR_TO_DATE",
        "target_query": "select date1,format1,TIME(str_to_date(date1, format1)) as time from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIME",
                "start_pos": 21,
                "end_pos": 25
            },
            {
                "dialect_token": "STR_TO_DATE",
                "start_pos": 26,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME(time-value) | TIME_FORMAT(time-value, format)",
                "description": "The TIME(time-value) function in MySQL returns the time as text formatted as 'HH:MM:SS' from a given time-value. MySQL's TIME function does not support modifiers like in SQLite. To modify the time, you can use functions like DATE_ADD (to add an interval) or TIME_FORMAT (to custom format the time, including fractional seconds).",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time, formatted as 'HH:MM:SS'.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Adds 1 hour to the time, returning '15:16:00'.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            },
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Convert the string '09:22' to a TIME type using the format '%H:%i'.",
                "examples": [
                    "SELECT STR_TO_DATE('12:45', '%H:%i');",
                    "SELECT STR_TO_DATE('2000-01-01', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2023-05-06 12:34:56', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME(time-value) | TIME_FORMAT(DATE_ADD(time-value, INTERVAL n unit), '%H:%i:%s')",
                "description": "MySQL's TIME(time-value) function returns the time in 'HH:MM:SS' format. It does not support SQLite-style inline modifiers. Instead, time modification is done via DATE_ADD(), and formatting via TIME_FORMAT(). Fractional seconds (milliseconds) can be included using '%f'.\nParameters: time-value (e.g., NOW(), '14:16:00'), interval modifier (e.g., INTERVAL 1 HOUR).\nReturns: A string formatted as 'HH:MM:SS' or 'HH:MM:SS.SSSSSS'.",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time in 'HH:MM:SS' format.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Returns the time one hour after now.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            },
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Identical to MySQL, this function is supported in MariaDB for converting strings to date/time formats.",
                "examples": [
                    "SELECT STR_TO_DATE('14:30', '%H:%i');",
                    "SELECT STR_TO_DATE('2015-07-19', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2021-11-11 15:50:30', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(date1, char(30), )\n(format1, char(30), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(date1, char(30), )\n(format1, char(30), )\n"
        ]
    },
    {
        "sql_id": 281,
        "database_name": "BUTTERTrans_281",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select date1,format1,concat(TIME(str_to_date(date1, format1))) as time2 from t1; -- CONCAT, TIME, STR_TO_DATE",
        "target_query": "select date1,format1,concat(TIME(str_to_date(date1, format1))) as time2 from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 21,
                "end_pos": 27
            },
            {
                "dialect_token": "TIME",
                "start_pos": 28,
                "end_pos": 32
            },
            {
                "dialect_token": "STR_TO_DATE",
                "start_pos": 33,
                "end_pos": 44
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "TIME(time-value) | TIME_FORMAT(time-value, format)",
                "description": "The TIME(time-value) function in MySQL returns the time as text formatted as 'HH:MM:SS' from a given time-value. MySQL's TIME function does not support modifiers like in SQLite. To modify the time, you can use functions like DATE_ADD (to add an interval) or TIME_FORMAT (to custom format the time, including fractional seconds).",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time, formatted as 'HH:MM:SS'.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Adds 1 hour to the time, returning '15:16:00'.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            },
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Convert the string '09:22' to a TIME type using the format '%H:%i'.",
                "examples": [
                    "SELECT STR_TO_DATE('12:45', '%H:%i');",
                    "SELECT STR_TO_DATE('2000-01-01', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2023-05-06 12:34:56', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "TIME(time-value) | TIME_FORMAT(DATE_ADD(time-value, INTERVAL n unit), '%H:%i:%s')",
                "description": "MySQL's TIME(time-value) function returns the time in 'HH:MM:SS' format. It does not support SQLite-style inline modifiers. Instead, time modification is done via DATE_ADD(), and formatting via TIME_FORMAT(). Fractional seconds (milliseconds) can be included using '%f'.\nParameters: time-value (e.g., NOW(), '14:16:00'), interval modifier (e.g., INTERVAL 1 HOUR).\nReturns: A string formatted as 'HH:MM:SS' or 'HH:MM:SS.SSSSSS'.",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time in 'HH:MM:SS' format.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Returns the time one hour after now.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            },
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Identical to MySQL, this function is supported in MariaDB for converting strings to date/time formats.",
                "examples": [
                    "SELECT STR_TO_DATE('14:30', '%H:%i');",
                    "SELECT STR_TO_DATE('2015-07-19', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2021-11-11 15:50:30', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(date1, char(30), )\n(format1, char(30), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(date1, char(30), )\n(format1, char(30), )\n"
        ]
    },
    {
        "sql_id": 282,
        "database_name": "BUTTERTrans_282",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat('',str_to_date('8:11:2 03-01-02','%H:%i:%S %y-%m-%d')); -- CONCAT, STR_TO_DATE",
        "target_query": "select concat('',str_to_date('8:11:2 03-01-02','%H:%i:%S %y-%m-%d'));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "STR_TO_DATE",
                "start_pos": 17,
                "end_pos": 28
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Convert the string '09:22' to a TIME type using the format '%H:%i'.",
                "examples": [
                    "SELECT STR_TO_DATE('12:45', '%H:%i');",
                    "SELECT STR_TO_DATE('2000-01-01', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2023-05-06 12:34:56', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Identical to MySQL, this function is supported in MariaDB for converting strings to date/time formats.",
                "examples": [
                    "SELECT STR_TO_DATE('14:30', '%H:%i');",
                    "SELECT STR_TO_DATE('2015-07-19', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2021-11-11 15:50:30', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(date1, char(30), )\n(format1, char(30), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(date1, char(30), )\n(format1, char(30), )\n"
        ]
    },
    {
        "sql_id": 283,
        "database_name": "BUTTERTrans_283",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select date_format(d,\"%d\") from t1 order by 1; -- DATE_FORMAT",
        "target_query": "select date_format(d,\"%d\") from t1 order by 1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(d, date, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(d, date, )\n"
        ]
    },
    {
        "sql_id": 284,
        "database_name": "BUTTERTrans_284",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select date_format('2004-01-01','%W (%a), %e %M (%b) %Y'); -- DATE_FORMAT",
        "target_query": "select date_format('2004-01-01','%W (%a), %e %M (%b) %Y');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 285,
        "database_name": "BUTTERTrans_285",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIME_FORMAT(\"24:00:00\", '%r'); -- TIME_FORMAT",
        "target_query": "SELECT TIME_FORMAT(\"24:00:00\", '%r');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIME_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Formats a TIME value according to the given format string using MySQL-style format specifiers.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Same as MySQL, formats a TIME value with a given format string.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 286,
        "database_name": "BUTTERTrans_286",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIME_FORMAT(\"00:00:00\", '%r'); -- TIME_FORMAT",
        "target_query": "SELECT TIME_FORMAT(\"00:00:00\", '%r');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIME_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Formats a TIME value according to the given format string using MySQL-style format specifiers.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Same as MySQL, formats a TIME value with a given format string.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 287,
        "database_name": "BUTTERTrans_287",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIME_FORMAT(\"12:00:00\", '%r'); -- TIME_FORMAT",
        "target_query": "SELECT TIME_FORMAT(\"12:00:00\", '%r');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIME_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Formats a TIME value according to the given format string using MySQL-style format specifiers.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Same as MySQL, formats a TIME value with a given format string.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 288,
        "database_name": "BUTTERTrans_288",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIME_FORMAT(\"15:00:00\", '%r'); -- TIME_FORMAT",
        "target_query": "SELECT TIME_FORMAT(\"15:00:00\", '%r');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIME_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Formats a TIME value according to the given format string using MySQL-style format specifiers.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Same as MySQL, formats a TIME value with a given format string.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 289,
        "database_name": "BUTTERTrans_289",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIME_FORMAT(\"01:00:00\", '%r'); -- TIME_FORMAT",
        "target_query": "SELECT TIME_FORMAT(\"01:00:00\", '%r');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIME_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Formats a TIME value according to the given format string using MySQL-style format specifiers.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Same as MySQL, formats a TIME value with a given format string.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 290,
        "database_name": "BUTTERTrans_290",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIME_FORMAT(\"25:00:00\", '%r'); -- TIME_FORMAT",
        "target_query": "SELECT TIME_FORMAT(\"25:00:00\", '%r');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIME_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Formats a TIME value according to the given format string using MySQL-style format specifiers.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Same as MySQL, formats a TIME value with a given format string.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 291,
        "database_name": "BUTTERTrans_291",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIME_FORMAT(\"00:00:00\", '%l %p'); -- TIME_FORMAT",
        "target_query": "SELECT TIME_FORMAT(\"00:00:00\", '%l %p');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIME_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Formats a TIME value according to the given format string using MySQL-style format specifiers.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Same as MySQL, formats a TIME value with a given format string.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 292,
        "database_name": "BUTTERTrans_292",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIME_FORMAT(\"01:00:00\", '%l %p'); -- TIME_FORMAT",
        "target_query": "SELECT TIME_FORMAT(\"01:00:00\", '%l %p');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIME_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Formats a TIME value according to the given format string using MySQL-style format specifiers.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Same as MySQL, formats a TIME value with a given format string.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 293,
        "database_name": "BUTTERTrans_293",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIME_FORMAT(\"12:00:00\", '%l %p'); -- TIME_FORMAT",
        "target_query": "SELECT TIME_FORMAT(\"12:00:00\", '%l %p');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIME_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Formats a TIME value according to the given format string using MySQL-style format specifiers.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Same as MySQL, formats a TIME value with a given format string.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 294,
        "database_name": "BUTTERTrans_294",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIME_FORMAT(\"23:00:00\", '%l %p'); -- TIME_FORMAT",
        "target_query": "SELECT TIME_FORMAT(\"23:00:00\", '%l %p');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIME_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Formats a TIME value according to the given format string using MySQL-style format specifiers.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Same as MySQL, formats a TIME value with a given format string.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 295,
        "database_name": "BUTTERTrans_295",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIME_FORMAT(\"24:00:00\", '%l %p'); -- TIME_FORMAT",
        "target_query": "SELECT TIME_FORMAT(\"24:00:00\", '%l %p');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIME_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Formats a TIME value according to the given format string using MySQL-style format specifiers.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Same as MySQL, formats a TIME value with a given format string.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 296,
        "database_name": "BUTTERTrans_296",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIME_FORMAT(\"25:00:00\", '%l %p'); -- TIME_FORMAT",
        "target_query": "SELECT TIME_FORMAT(\"25:00:00\", '%l %p');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIME_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Formats a TIME value according to the given format string using MySQL-style format specifiers.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME_FORMAT(time, format)",
                "description": "Same as MySQL, formats a TIME value with a given format string.",
                "examples": [
                    "SELECT TIME_FORMAT('18:05:07', '%H:%i:%s');",
                    "SELECT TIME_FORMAT('18:05:07', '%r');",
                    "SELECT TIME_FORMAT('18:05:07', '%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 297,
        "database_name": "BUTTERTrans_297",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT DATE_FORMAT('%Y-%m-%d %H:%i:%s', 1151414896); -- DATE_FORMAT",
        "target_query": "SELECT DATE_FORMAT('%Y-%m-%d %H:%i:%s', 1151414896);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 298,
        "database_name": "BUTTERTrans_298",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select str_to_date('04 /30/2004', '%m /%d/%Y'); -- STR_TO_DATE",
        "target_query": "select str_to_date('04 /30/2004', '%m /%d/%Y');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STR_TO_DATE",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Convert the string '09:22' to a TIME type using the format '%H:%i'.",
                "examples": [
                    "SELECT STR_TO_DATE('12:45', '%H:%i');",
                    "SELECT STR_TO_DATE('2000-01-01', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2023-05-06 12:34:56', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Identical to MySQL, this function is supported in MariaDB for converting strings to date/time formats.",
                "examples": [
                    "SELECT STR_TO_DATE('14:30', '%H:%i');",
                    "SELECT STR_TO_DATE('2015-07-19', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2021-11-11 15:50:30', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 299,
        "database_name": "BUTTERTrans_299",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select str_to_date('04/30 /2004', '%m /%d /%Y'); -- STR_TO_DATE",
        "target_query": "select str_to_date('04/30 /2004', '%m /%d /%Y');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STR_TO_DATE",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Convert the string '09:22' to a TIME type using the format '%H:%i'.",
                "examples": [
                    "SELECT STR_TO_DATE('12:45', '%H:%i');",
                    "SELECT STR_TO_DATE('2000-01-01', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2023-05-06 12:34:56', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Identical to MySQL, this function is supported in MariaDB for converting strings to date/time formats.",
                "examples": [
                    "SELECT STR_TO_DATE('14:30', '%H:%i');",
                    "SELECT STR_TO_DATE('2015-07-19', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2021-11-11 15:50:30', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 300,
        "database_name": "BUTTERTrans_300",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select str_to_date('04/30/2004 ', '%m/%d/%Y '); -- STR_TO_DATE",
        "target_query": "select str_to_date('04/30/2004 ', '%m/%d/%Y ');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STR_TO_DATE",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Convert the string '09:22' to a TIME type using the format '%H:%i'.",
                "examples": [
                    "SELECT STR_TO_DATE('12:45', '%H:%i');",
                    "SELECT STR_TO_DATE('2000-01-01', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2023-05-06 12:34:56', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Identical to MySQL, this function is supported in MariaDB for converting strings to date/time formats.",
                "examples": [
                    "SELECT STR_TO_DATE('14:30', '%H:%i');",
                    "SELECT STR_TO_DATE('2015-07-19', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2021-11-11 15:50:30', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 301,
        "database_name": "BUTTERTrans_301",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT DATE_FORMAT(\"0000-01-01\",'%W %d %M %Y') as valid_date; -- DATE_FORMAT",
        "target_query": "SELECT DATE_FORMAT(\"0000-01-01\",'%W %d %M %Y') as valid_date;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 302,
        "database_name": "BUTTERTrans_302",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT DATE_FORMAT(\"0000-02-28\",'%W %d %M %Y') as valid_date; -- DATE_FORMAT",
        "target_query": "SELECT DATE_FORMAT(\"0000-02-28\",'%W %d %M %Y') as valid_date;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 303,
        "database_name": "BUTTERTrans_303",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT DATE_FORMAT(\"2009-01-01\",'%W %d %M %Y') as valid_date; -- DATE_FORMAT",
        "target_query": "SELECT DATE_FORMAT(\"2009-01-01\",'%W %d %M %Y') as valid_date;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 304,
        "database_name": "BUTTERTrans_304",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT JSON_EXTRACT('{\"id\": \"3\", \"$name\": \"Barney\"}', \"$.id\"); -- JSON_EXTRACT",
        "target_query": "SELECT JSON_EXTRACT('{\"id\": \"3\", \"$name\": \"Barney\"}', \"$.id\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "JSON_EXTRACT",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "JSON_EXTRACT(json_doc, path)",
                "description": "Extracts data from a JSON document at the specified path(s). Supports dot notation and wildcards.",
                "examples": [
                    "SELECT JSON_EXTRACT('{\"user\": {\"name\": \"Alice\"}}', '$.user.name');",
                    "SELECT JSON_EXTRACT('{\"items\": [10, 20, 30]}', '$.items[1]');",
                    "SELECT JSON_EXTRACT('{\"a\": {\"b\": [1, 2]}}', '$.a.b[0]');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "JSON_EXTRACT(json_doc, path)",
                "description": "Extracts a value from a JSON document using a JSON path. Fully compatible with MySQL's implementation.",
                "examples": [
                    "SELECT JSON_EXTRACT('{\"user\": {\"name\": \"Alice\"}}', '$.user.name');",
                    "SELECT JSON_EXTRACT('{\"items\": [10, 20, 30]}', '$.items[1]');",
                    "SELECT JSON_EXTRACT('{\"a\": {\"b\": [1, 2]}}', '$.a.b[0]');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 305,
        "database_name": "BUTTERTrans_305",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT JSON_EXTRACT('{\"id\": \"3\", \"$name\": \"$Barney\"}', \"$.$name\"); -- JSON_EXTRACT",
        "target_query": "SELECT JSON_EXTRACT('{\"id\": \"3\", \"$name\": \"$Barney\"}', \"$.$name\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "JSON_EXTRACT",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "JSON_EXTRACT(json_doc, path)",
                "description": "Extracts data from a JSON document at the specified path(s). Supports dot notation and wildcards.",
                "examples": [
                    "SELECT JSON_EXTRACT('{\"user\": {\"name\": \"Alice\"}}', '$.user.name');",
                    "SELECT JSON_EXTRACT('{\"items\": [10, 20, 30]}', '$.items[1]');",
                    "SELECT JSON_EXTRACT('{\"a\": {\"b\": [1, 2]}}', '$.a.b[0]');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "JSON_EXTRACT(json_doc, path)",
                "description": "Extracts a value from a JSON document using a JSON path. Fully compatible with MySQL's implementation.",
                "examples": [
                    "SELECT JSON_EXTRACT('{\"user\": {\"name\": \"Alice\"}}', '$.user.name');",
                    "SELECT JSON_EXTRACT('{\"items\": [10, 20, 30]}', '$.items[1]');",
                    "SELECT JSON_EXTRACT('{\"a\": {\"b\": [1, 2]}}', '$.a.b[0]');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 306,
        "database_name": "BUTTERTrans_306",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat('|', text1, '|') as c from t1 where text1='teststring' or text1 like 'teststring_%' order by c; -- CONCAT",
        "target_query": "select concat('|', text1, '|') as c from t1 where text1='teststring' or text1 like 'teststring_%' order by c;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(text1, char(32), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(text1, char(32), )\n"
        ]
    },
    {
        "sql_id": 307,
        "database_name": "BUTTERTrans_307",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat('|', text1, '|') from t1 where text1='teststring' or text1 > 'teststring\\\\t'; -- CONCAT",
        "target_query": "select concat('|', text1, '|') from t1 where text1='teststring' or text1 > 'teststring\\\\t';",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(text1, char(32), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(text1, char(32), )\n"
        ]
    },
    {
        "sql_id": 308,
        "database_name": "BUTTERTrans_308",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select text1, length(text1) from t1 order by text1; -- LENGTH",
        "target_query": "select text1, length(text1) from t1 order by text1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 14,
                "end_pos": 20
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(text1, char(32), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(text1, char(32), )\n"
        ]
    },
    {
        "sql_id": 309,
        "database_name": "BUTTERTrans_309",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat('|', text1, '|') from t1 order by text1; -- CONCAT",
        "target_query": "select concat('|', text1, '|') from t1 order by text1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(text1, char(32), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(text1, char(32), )\n"
        ]
    },
    {
        "sql_id": 310,
        "database_name": "BUTTERTrans_310",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat('|', text1, '|') from t1 where text1='teststring' or text1 > 'teststring\\\\t'; -- CONCAT",
        "target_query": "select concat('|', text1, '|') from t1 where text1='teststring' or text1 > 'teststring\\\\t';",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(text1, char(32), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(text1, char(32), )\n"
        ]
    },
    {
        "sql_id": 311,
        "database_name": "BUTTERTrans_311",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat('|', text1, '|') from t1 where text1='teststring'; -- CONCAT",
        "target_query": "select concat('|', text1, '|') from t1 where text1='teststring';",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(text1, char(32), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(text1, char(32), )\n"
        ]
    },
    {
        "sql_id": 312,
        "database_name": "BUTTERTrans_312",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat('|', text1, '|') from t1 where text1='teststring '; -- CONCAT",
        "target_query": "select concat('|', text1, '|') from t1 where text1='teststring ';",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(text1, char(32), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(text1, char(32), )\n"
        ]
    },
    {
        "sql_id": 313,
        "database_name": "BUTTERTrans_313",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT USER(); -- USER",
        "target_query": "SELECT USER(); -- USER",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "USER",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "USER()",
                "description": "Returns the current MySQL user and host in the format 'username@hostname'.",
                "examples": [
                    "SELECT USER();"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "USER()",
                "description": "Returns the current MariaDB user and host in the format 'username@hostname'.",
                "examples": [
                    "SELECT USER();"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 314,
        "database_name": "BUTTERTrans_314",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CONCAT(\"Let's create some new events from the name of \", USER()); -- CONCAT, USER",
        "target_query": "SELECT CONCAT(\"Let's create some new events from the name of \", USER());",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "USER",
                "start_pos": 64,
                "end_pos": 68
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "USER()",
                "description": "Returns the current MySQL user and host in the format 'username@hostname'.",
                "examples": [
                    "SELECT USER();"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "USER()",
                "description": "Returns the current MariaDB user and host in the format 'username@hostname'.",
                "examples": [
                    "SELECT USER();"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 315,
        "database_name": "BUTTERTrans_315",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES ( 2, REPEAT('-', 104) ); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES(2,REPEAT('-',104));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 27,
                "end_pos": 33
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, int, )\n(f2, longblob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, int(11), )\n(f2, longblob, )\n"
        ]
    },
    {
        "sql_id": 316,
        "database_name": "BUTTERTrans_316",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES ( 1, REPEAT('x', 104) ); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES(1,REPEAT('x',104));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 27,
                "end_pos": 33
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, int, )\n(f2, longblob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, int(11), )\n(f2, longblob, )\n"
        ]
    },
    {
        "sql_id": 317,
        "database_name": "BUTTERTrans_317",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CONCAT(f1, '') AS dummy FROM t1 ORDER BY dummy; -- CONCAT",
        "target_query": "SELECT CONCAT(f1,'') AS dummy FROM t1 ORDER BY dummy;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, varchar(100), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, varchar(100), )\n"
        ]
    },
    {
        "sql_id": 318,
        "database_name": "BUTTERTrans_318",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM t1 ORDER BY UNIX_TIMESTAMP(f1); -- UNIX_TIMESTAMP",
        "target_query": "SELECT * FROM t1 ORDER BY UNIX_TIMESTAMP(f1);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 26,
                "end_pos": 40
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, datetime, )\n"
        ]
    },
    {
        "sql_id": 319,
        "database_name": "BUTTERTrans_319",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT 'a' AS f1 FROM t1 WHERE a='8' GROUP BY f1 ORDER BY CONCAT(f1); -- CONCAT",
        "target_query": "SELECT 'a' AS f1 FROM t1 WHERE a='8' GROUP BY f1 ORDER BY CONCAT(f1);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 58,
                "end_pos": 64
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, longtext, )\n"
        ]
    },
    {
        "sql_id": 320,
        "database_name": "BUTTERTrans_320",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (1, REPEAT('x', 40001)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES(1,REPEAT('x',40001));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 26,
                "end_pos": 32
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, text, )\n"
        ]
    },
    {
        "sql_id": 321,
        "database_name": "BUTTERTrans_321",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (2, REPEAT('x', 40002)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES(2,REPEAT('x',40002));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 26,
                "end_pos": 32
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, text, )\n"
        ]
    },
    {
        "sql_id": 322,
        "database_name": "BUTTERTrans_322",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (3, REPEAT('x', 40003)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES(3,REPEAT('x',40003));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 26,
                "end_pos": 32
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, text, )\n"
        ]
    },
    {
        "sql_id": 323,
        "database_name": "BUTTERTrans_323",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (4, REPEAT('x', 40005)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES(4,REPEAT('x',40005));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 26,
                "end_pos": 32
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, text, )\n"
        ]
    },
    {
        "sql_id": 324,
        "database_name": "BUTTERTrans_324",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (5, REPEAT('x', 40008)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES(5,REPEAT('x',40008));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 26,
                "end_pos": 32
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, text, )\n"
        ]
    },
    {
        "sql_id": 325,
        "database_name": "BUTTERTrans_325",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (6, REPEAT('x', 40013)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES(6,REPEAT('x',40013));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 26,
                "end_pos": 32
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, text, )\n"
        ]
    },
    {
        "sql_id": 326,
        "database_name": "BUTTERTrans_326",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT a, LENGTH(b) FROM t1 ORDER BY a DESC; -- LENGTH",
        "target_query": "SELECT a,LENGTH(b) FROM t1 ORDER BY a DESC;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 10,
                "end_pos": 16
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, text, )\n"
        ]
    },
    {
        "sql_id": 327,
        "database_name": "BUTTERTrans_327",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "EXPLAIN SELECT * FROM t1 WHERE length(t1.vc) > 3; -- LENGTH",
        "target_query": "EXPLAIN SELECT * FROM t1 WHERE length(t1.vc) > 3;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 31,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(col1_idx, int, )\n(col2_idx, int, )\n(col3, int, )\n(col4, int, )\n(vc, varchar(30), )\n(vc_ft, varchar(30), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(col1_idx, int(11), )\n(col2_idx, int(11), )\n(col3, int(11), )\n(col4, int(11), )\n(vc, varchar(30), )\n(vc_ft, varchar(30), )\n"
        ]
    },
    {
        "sql_id": 328,
        "database_name": "BUTTERTrans_328",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "EXPLAIN SELECT * FROM t1 WHERE length(t1.vc) = 3; -- LENGTH",
        "target_query": "EXPLAIN SELECT * FROM t1 WHERE length(t1.vc) = 3;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 31,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(col1_idx, int, )\n(col2_idx, int, )\n(col3, int, )\n(col4, int, )\n(vc, varchar(30), )\n(vc_ft, varchar(30), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(col1_idx, int(11), )\n(col2_idx, int(11), )\n(col3, int(11), )\n(col4, int(11), )\n(vc, varchar(30), )\n(vc_ft, varchar(30), )\n"
        ]
    },
    {
        "sql_id": 329,
        "database_name": "BUTTERTrans_329",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "EXPLAIN SELECT * FROM t1 WHERE length(t1.vc) IS NULL; -- LENGTH",
        "target_query": "EXPLAIN SELECT * FROM t1 WHERE length(t1.vc) IS NULL;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 31,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(col1_idx, int, )\n(col2_idx, int, )\n(col3, int, )\n(col4, int, )\n(vc, varchar(30), )\n(vc_ft, varchar(30), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(col1_idx, int(11), )\n(col2_idx, int(11), )\n(col3, int(11), )\n(col4, int(11), )\n(vc, varchar(30), )\n(vc_ft, varchar(30), )\n"
        ]
    },
    {
        "sql_id": 330,
        "database_name": "BUTTERTrans_330",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "EXPLAIN SELECT * FROM t1 WHERE length(t1.vc) IS NOT NULL; -- LENGTH",
        "target_query": "EXPLAIN SELECT * FROM t1 WHERE length(t1.vc) IS NOT NULL;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 31,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(col1_idx, int, )\n(col2_idx, int, )\n(col3, int, )\n(col4, int, )\n(vc, varchar(30), )\n(vc_ft, varchar(30), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(col1_idx, int(11), )\n(col2_idx, int(11), )\n(col3, int(11), )\n(col4, int(11), )\n(vc, varchar(30), )\n(vc_ft, varchar(30), )\n"
        ]
    },
    {
        "sql_id": 331,
        "database_name": "BUTTERTrans_331",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HEX(vbin1 << 3), HEX(vbin2 << 3) FROM t WHERE id=7; -- HEX",
        "target_query": "SELECT HEX(vbin1 << 3),HEX(vbin2 << 3) FROM t WHERE id=7;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "HEX",
                "start_pos": 24,
                "end_pos": 27
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(id, int, )\n(vbin1, varbinary(32), )\n(vbin2, varbinary(32), )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(id, int(11), )\n(vbin1, varbinary(32), )\n(vbin2, varbinary(32), )\n"
        ]
    },
    {
        "sql_id": 332,
        "database_name": "BUTTERTrans_332",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HEX(vbin1 >> 3), HEX(vbin2 >> 3) FROM t WHERE id=7; -- HEX",
        "target_query": "SELECT HEX(vbin1 >> 3),HEX(vbin2 >> 3) FROM t WHERE id=7;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "HEX",
                "start_pos": 24,
                "end_pos": 27
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(id, int, )\n(vbin1, varbinary(32), )\n(vbin2, varbinary(32), )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(id, int(11), )\n(vbin1, varbinary(32), )\n(vbin2, varbinary(32), )\n"
        ]
    },
    {
        "sql_id": 333,
        "database_name": "BUTTERTrans_333",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HEX(~vbin1), HEX(~vbin2) FROM t WHERE id=7; -- HEX",
        "target_query": "SELECT HEX(~vbin1),HEX(~vbin2) FROM t WHERE id=7;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "HEX",
                "start_pos": 20,
                "end_pos": 23
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(id, int, )\n(vbin1, varbinary(32), )\n(vbin2, varbinary(32), )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(id, int(11), )\n(vbin1, varbinary(32), )\n(vbin2, varbinary(32), )\n"
        ]
    },
    {
        "sql_id": 334,
        "database_name": "BUTTERTrans_334",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HEX(vbin1 << 3), HEX(vbin2 << 3) FROM t WHERE id=8; -- HEX",
        "target_query": "SELECT HEX(vbin1 << 3),HEX(vbin2 << 3) FROM t WHERE id=8;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "HEX",
                "start_pos": 24,
                "end_pos": 27
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(id, int, )\n(vbin1, varbinary(32), )\n(vbin2, varbinary(32), )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(id, int(11), )\n(vbin1, varbinary(32), )\n(vbin2, varbinary(32), )\n"
        ]
    },
    {
        "sql_id": 335,
        "database_name": "BUTTERTrans_335",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HEX(vbin1 >> 3), HEX(vbin2 >> 3) FROM t WHERE id=8; -- HEX",
        "target_query": "SELECT HEX(vbin1 >> 3),HEX(vbin2 >> 3) FROM t WHERE id=8;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "HEX",
                "start_pos": 24,
                "end_pos": 27
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(id, int, )\n(vbin1, varbinary(32), )\n(vbin2, varbinary(32), )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(id, int(11), )\n(vbin1, varbinary(32), )\n(vbin2, varbinary(32), )\n"
        ]
    },
    {
        "sql_id": 336,
        "database_name": "BUTTERTrans_336",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HEX(~vbin1), HEX(~vbin2) FROM t WHERE id=8; -- HEX",
        "target_query": "SELECT HEX(~vbin1),HEX(~vbin2) FROM t WHERE id=8;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "HEX",
                "start_pos": 20,
                "end_pos": 23
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(id, int, )\n(vbin1, varbinary(32), )\n(vbin2, varbinary(32), )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(id, int(11), )\n(vbin1, varbinary(32), )\n(vbin2, varbinary(32), )\n"
        ]
    },
    {
        "sql_id": 337,
        "database_name": "BUTTERTrans_337",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t VALUES(REPEAT(x'0a',1000)); -- REPEAT",
        "target_query": "INSERT INTO t VALUES(REPEAT(x'0a',1000));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 21,
                "end_pos": 27
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(b, blob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(b, blob, )\n"
        ]
    },
    {
        "sql_id": 338,
        "database_name": "BUTTERTrans_338",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t VALUES(1, REPEAT('2', 257)), (1, REPEAT('1', 257)); -- REPEAT",
        "target_query": "INSERT INTO t VALUES(1,REPEAT('2',257)),(1,REPEAT('1',257));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 24,
                "end_pos": 30
            },
            {
                "dialect_token": "REPEAT",
                "start_pos": 47,
                "end_pos": 53
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(gid, int, )\n(a, varbinary(514), )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(gid, int(11), )\n(a, varbinary(514), )\n"
        ]
    },
    {
        "sql_id": 339,
        "database_name": "BUTTERTrans_339",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t VALUES(1, REPEAT('2', 255)), (1, REPEAT('1', 255)); -- REPEAT",
        "target_query": "INSERT INTO t VALUES(1,REPEAT('2',255)),(1,REPEAT('1',255));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 24,
                "end_pos": 30
            },
            {
                "dialect_token": "REPEAT",
                "start_pos": 47,
                "end_pos": 53
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(gid, int, )\n(a, varbinary(511), )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(gid, int(11), )\n(a, varbinary(511), )\n"
        ]
    },
    {
        "sql_id": 340,
        "database_name": "BUTTERTrans_340",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t VALUES(1, REPEAT('2', 32750), REPEAT('1', 32750)); -- REPEAT",
        "target_query": "INSERT INTO t VALUES(1,REPEAT('2',32750),REPEAT('1',32750));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 24,
                "end_pos": 30
            },
            {
                "dialect_token": "REPEAT",
                "start_pos": 44,
                "end_pos": 50
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(gid, int, )\n(a, varbinary(65500), )\n(b, blob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(gid, int(11), )\n(a, varbinary(65500), )\n(b, blob, )\n"
        ]
    },
    {
        "sql_id": 341,
        "database_name": "BUTTERTrans_341",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT BIT_COUNT(a & b) FROM t ; -- BIT_COUNT",
        "target_query": "SELECT BIT_COUNT(a & b) FROM t;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "BIT_COUNT",
                "start_pos": 7,
                "end_pos": 16
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "BIT_COUNT(N)",
                "description": "Returns the number of bits set to 1 in the binary representation of the given integer.",
                "examples": [
                    "SELECT BIT_COUNT(0);",
                    "SELECT BIT_COUNT(1);",
                    "SELECT BIT_COUNT(15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "BIT_COUNT(N)",
                "description": "Returns the number of bits set to 1 in the binary representation of the given integer.",
                "examples": [
                    "SELECT BIT_COUNT(0);",
                    "SELECT BIT_COUNT(1);",
                    "SELECT BIT_COUNT(15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(gid, int, )\n(a, varbinary(65500), )\n(b, blob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(gid, int(11), )\n(a, varbinary(65500), )\n(b, blob, )\n"
        ]
    },
    {
        "sql_id": 342,
        "database_name": "BUTTERTrans_342",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM t0 WHERE GREATEST((-1) & (-1), -t0.c0); -- GREATEST",
        "target_query": "SELECT * FROM t0 WHERE GREATEST((-1) & (-1),-t0.c0);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 23,
                "end_pos": 31
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0`\nColumns:\n(c0, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t0`\nColumns:\n(c0, text, )\n"
        ]
    },
    {
        "sql_id": 343,
        "database_name": "BUTTERTrans_343",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT GREATEST((-1) & (-1), -t0.c0) IS TRUE FROM t0; -- GREATEST",
        "target_query": "SELECT GREATEST((-1) & (-1),-t0.c0) IS TRUE FROM t0;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0`\nColumns:\n(c0, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t0`\nColumns:\n(c0, text, )\n"
        ]
    },
    {
        "sql_id": 344,
        "database_name": "BUTTERTrans_344",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM t0 WHERE GREATEST(123456789, -t0.c0); -- GREATEST",
        "target_query": "SELECT * FROM t0 WHERE GREATEST(123456789,-t0.c0);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 23,
                "end_pos": 31
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0`\nColumns:\n(c0, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t0`\nColumns:\n(c0, text, )\n"
        ]
    },
    {
        "sql_id": 345,
        "database_name": "BUTTERTrans_345",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT GREATEST(123456789, -t0.c0) IS TRUE FROM t0; -- GREATEST",
        "target_query": "SELECT GREATEST(123456789,-t0.c0) IS TRUE FROM t0;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0`\nColumns:\n(c0, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t0`\nColumns:\n(c0, text, )\n"
        ]
    },
    {
        "sql_id": 346,
        "database_name": "BUTTERTrans_346",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert t1 values (NULL), ('A\\0\\0\\0BBBBBBBB'), (SPACE(50000)), (SPACE(50000)); -- SPACE",
        "target_query": "insert t1 values (NULL), ('A\\0\\0\\0BBBBBBBB'), (SPACE(50000)), (SPACE(50000));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "SPACE",
                "start_pos": 47,
                "end_pos": 52
            },
            {
                "dialect_token": "SPACE",
                "start_pos": 63,
                "end_pos": 68
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SPACE(n)",
                "description": "Returns a string consisting of n space characters.",
                "examples": [
                    "SELECT LENGTH(SPACE(5));",
                    "SELECT CONCAT('A', SPACE(3), 'B');",
                    "SELECT CONCAT(REPEAT('-', 2), SPACE(4), '!');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SPACE(n)",
                "description": "Returns a string consisting of n space characters.",
                "examples": [
                    "SELECT LENGTH(SPACE(5));",
                    "SELECT CONCAT('A', SPACE(3), 'B');",
                    "SELECT CONCAT(REPEAT('-', 2), SPACE(4), '!');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, blob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, blob, )\n"
        ]
    },
    {
        "sql_id": 347,
        "database_name": "BUTTERTrans_347",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select length(a) from t1; -- LENGTH",
        "target_query": "select length(a) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, blob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, blob, )\n"
        ]
    },
    {
        "sql_id": 348,
        "database_name": "BUTTERTrans_348",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select * from t1 where concat(A,C,B,D) = 'AAAA2003-03-011051'; -- CONCAT",
        "target_query": "select * from t1 where concat(A,C,B,D) = 'AAAA2003-03-011051';",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 23,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(4), )\n(b, double, )\n(c, date, )\n(d, tinyint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, char(4), )\n(b, double, )\n(c, date, )\n(d, tinyint(4), )\n"
        ]
    },
    {
        "sql_id": 349,
        "database_name": "BUTTERTrans_349",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select 'a' union select concat('a', -4); -- CONCAT",
        "target_query": "select 'a' union select concat('a', -4);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 24,
                "end_pos": 30
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 350,
        "database_name": "BUTTERTrans_350",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select 'a' union select concat('a', -4.5); -- CONCAT",
        "target_query": "select 'a' union select concat('a', -4.5);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 24,
                "end_pos": 30
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 351,
        "database_name": "BUTTERTrans_351",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select 'a' union select concat('a', -(4 + 1)); -- CONCAT",
        "target_query": "select 'a' union select concat('a', -(4 + 1));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 24,
                "end_pos": 30
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 352,
        "database_name": "BUTTERTrans_352",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select 'a' union select concat('a', 4 - 5); -- CONCAT",
        "target_query": "select 'a' union select concat('a', 4 - 5);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 24,
                "end_pos": 30
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 353,
        "database_name": "BUTTERTrans_353",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select 'a' union select concat('a', -'3'); -- CONCAT",
        "target_query": "select 'a' union select concat('a', -'3');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 24,
                "end_pos": 30
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 354,
        "database_name": "BUTTERTrans_354",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select 'a' union select concat('a', -concat('3',4)); -- CONCAT",
        "target_query": "select 'a' union select concat('a', -concat('3',4));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 24,
                "end_pos": 30
            },
            {
                "dialect_token": "CONCAT",
                "start_pos": 37,
                "end_pos": 43
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 355,
        "database_name": "BUTTERTrans_355",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select 'a' union select concat('a', -0); -- CONCAT",
        "target_query": "select 'a' union select concat('a', -0);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 24,
                "end_pos": 30
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 356,
        "database_name": "BUTTERTrans_356",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select 'a' union select concat('a', -0.0); -- CONCAT",
        "target_query": "select 'a' union select concat('a', -0.0);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 24,
                "end_pos": 30
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 357,
        "database_name": "BUTTERTrans_357",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select 'a' union select concat('a', -0.0000); -- CONCAT",
        "target_query": "select 'a' union select concat('a', -0.0000);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 24,
                "end_pos": 30
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 358,
        "database_name": "BUTTERTrans_358",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat((select x from (select 'a' as x) as t1 ),(select y from (select 'b' as y) as t2 )) from (select 1 union select 2 )as t3; -- CONCAT",
        "target_query": "select concat((select x from (select 'a' as x) as t1 ),(select y from (select 'b' as y) as t2 )) from (select 1 union select 2 )as t3;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 359,
        "database_name": "BUTTERTrans_359",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat(f1, 2) a from t1 union select 'x' a from t1; -- CONCAT",
        "target_query": "select concat(f1, 2) a from t1 union select 'x' a from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, varchar(6), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, varchar(6), )\n"
        ]
    },
    {
        "sql_id": 360,
        "database_name": "BUTTERTrans_360",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM t1 WHERE CONCAT(c1,' ',c2) REGEXP 'First.*'; -- CONCAT",
        "target_query": "SELECT * FROM t1 WHERE CONCAT(c1,' ',c2) REGEXP 'First.*';",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 23,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, varchar(100), )\n(c2, varchar(100), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, varchar(100), )\n(c2, varchar(100), )\n"
        ]
    },
    {
        "sql_id": 361,
        "database_name": "BUTTERTrans_361",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t1 values (date_add(NULL, INTERVAL 1 DAY)); -- DATE_ADD",
        "target_query": "insert into t1 values (date_add(NULL, INTERVAL 1 DAY));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_ADD(datetime_expr, INTERVAL expr unit)",
                "description": "Adds a time interval to a date or datetime value.",
                "examples": [
                    "SELECT DATE_ADD('2020-01-01', INTERVAL 10 DAY);",
                    "SELECT DATE_ADD('2020-01-01 12:00:00', INTERVAL 3 HOUR);",
                    "SELECT DATE_ADD('2020-12-31', INTERVAL 1 MONTH);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_ADD(datetime_expr, INTERVAL expr unit)",
                "description": "Adds a time interval to a date or datetime value.",
                "examples": [
                    "SELECT DATE_ADD('2020-01-01', INTERVAL 10 DAY);",
                    "SELECT DATE_ADD('2020-01-01 12:00:00', INTERVAL 3 HOUR);",
                    "SELECT DATE_ADD('2020-12-31', INTERVAL 1 MONTH);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(d, date, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(d, date, )\n"
        ]
    },
    {
        "sql_id": 362,
        "database_name": "BUTTERTrans_362",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t1 values (date_add('2000-01-04', INTERVAL NULL DAY)); -- DATE_ADD",
        "target_query": "insert into t1 values (date_add('2000-01-04', INTERVAL NULL DAY));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_ADD(datetime_expr, INTERVAL expr unit)",
                "description": "Adds a time interval to a date or datetime value.",
                "examples": [
                    "SELECT DATE_ADD('2020-01-01', INTERVAL 10 DAY);",
                    "SELECT DATE_ADD('2020-01-01 12:00:00', INTERVAL 3 HOUR);",
                    "SELECT DATE_ADD('2020-12-31', INTERVAL 1 MONTH);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_ADD(datetime_expr, INTERVAL expr unit)",
                "description": "Adds a time interval to a date or datetime value.",
                "examples": [
                    "SELECT DATE_ADD('2020-01-01', INTERVAL 10 DAY);",
                    "SELECT DATE_ADD('2020-01-01 12:00:00', INTERVAL 3 HOUR);",
                    "SELECT DATE_ADD('2020-12-31', INTERVAL 1 MONTH);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(d, date, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(d, date, )\n"
        ]
    },
    {
        "sql_id": 363,
        "database_name": "BUTTERTrans_363",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t1 values (date_add(NULL, INTERVAL 1 DAY)); -- DATE_ADD",
        "target_query": "insert into t1 values (date_add(NULL, INTERVAL 1 DAY));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_ADD(datetime_expr, INTERVAL expr unit)",
                "description": "Adds a time interval to a date or datetime value.",
                "examples": [
                    "SELECT DATE_ADD('2020-01-01', INTERVAL 10 DAY);",
                    "SELECT DATE_ADD('2020-01-01 12:00:00', INTERVAL 3 HOUR);",
                    "SELECT DATE_ADD('2020-12-31', INTERVAL 1 MONTH);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_ADD(datetime_expr, INTERVAL expr unit)",
                "description": "Adds a time interval to a date or datetime value.",
                "examples": [
                    "SELECT DATE_ADD('2020-01-01', INTERVAL 10 DAY);",
                    "SELECT DATE_ADD('2020-01-01 12:00:00', INTERVAL 3 HOUR);",
                    "SELECT DATE_ADD('2020-12-31', INTERVAL 1 MONTH);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(d, date, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(d, date, )\n"
        ]
    },
    {
        "sql_id": 364,
        "database_name": "BUTTERTrans_364",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t1 values (date_add('2000-01-04', INTERVAL 1 DAY)); -- DATE_ADD",
        "target_query": "insert into t1 values (date_add('2000-01-04', INTERVAL 1 DAY));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_ADD(datetime_expr, INTERVAL expr unit)",
                "description": "Adds a time interval to a date or datetime value.",
                "examples": [
                    "SELECT DATE_ADD('2020-01-01', INTERVAL 10 DAY);",
                    "SELECT DATE_ADD('2020-01-01 12:00:00', INTERVAL 3 HOUR);",
                    "SELECT DATE_ADD('2020-12-31', INTERVAL 1 MONTH);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_ADD(datetime_expr, INTERVAL expr unit)",
                "description": "Adds a time interval to a date or datetime value.",
                "examples": [
                    "SELECT DATE_ADD('2020-01-01', INTERVAL 10 DAY);",
                    "SELECT DATE_ADD('2020-01-01 12:00:00', INTERVAL 3 HOUR);",
                    "SELECT DATE_ADD('2020-12-31', INTERVAL 1 MONTH);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(d, date, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(d, date, )\n"
        ]
    },
    {
        "sql_id": 365,
        "database_name": "BUTTERTrans_365",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT DATE(ts) = CURRENT_DATE + INTERVAL '1' DAY AS is_tomorrow, TIME(ts)FROM (SELECT ADDDATE(TIME'00:00:00', INTERVAL 1 DAY) AS ts) AS dt; -- DATE",
        "target_query": "SELECT DATE(ts) = CURRENT_DATE + INTERVAL '1' DAY AS is_tomorrow, TIME(ts)FROM (SELECT ADDDATE(TIME'00:00:00', INTERVAL 1 DAY) AS ts) AS dt;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "In MySQL, the DATE function extracts the date part from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "MariaDB also supports the DATE function, which extracts the date from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 366,
        "database_name": "BUTTERTrans_366",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select * from t1 where isnull(to_days(mydate)); -- ISNULL, TO_DAYS",
        "target_query": "select * from t1 where isnull(to_days(mydate));--ISNULL,TO_DAYS",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ISNULL",
                "start_pos": 23,
                "end_pos": 29
            },
            {
                "dialect_token": "TO_DAYS",
                "start_pos": 30,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Returns 1 if the expression is NULL, otherwise returns 0.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL(5 + NULL);",
                    "SELECT IF(ISNULL(score), 'N/A', score) FROM students;"
                ]
            },
            {
                "expression": "TO_DAYS(date)",
                "description": "Returns the number of days since 0000-01-01 for a given date.",
                "examples": [
                    "SELECT TO_DAYS('2024-05-07');",
                    "SELECT TO_DAYS(CURDATE());",
                    "SELECT TO_DAYS('1999-12-31 23:59:59');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Checks whether a value is NULL. Returns 1 if NULL, 0 otherwise.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL('abc');",
                    "SELECT IF(ISNULL(balance), 0, balance) FROM accounts;"
                ]
            },
            {
                "expression": "TO_DAYS(date)",
                "description": "Same as MySQL.",
                "examples": [
                    "SELECT TO_DAYS('2024-05-07');",
                    "SELECT TO_DAYS(CURDATE());",
                    "SELECT TO_DAYS('1999-12-31 23:59:59');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n(mydate, date, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int(11), PRI)\n(mydate, date, )\n"
        ]
    },
    {
        "sql_id": 367,
        "database_name": "BUTTERTrans_367",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select * from t3 left join(t2 outr2 join t2 outr join t1)on (outr.pk = t3.pk) and (t1.col_int_key = t3.pk) and isnull(t1.col_date_key)and (outr2.pk <> t3.pk); -- ISNULL",
        "target_query": "select * from t3 left join(t2 outr2 join t2 outr join t1)on(outr.pk=t3.pk)and(t1.col_int_key=t3.pk)and isnull(t1.col_date_key)and(outr2.pk<>t3.pk);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ISNULL",
                "start_pos": 111,
                "end_pos": 117
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Returns 1 if the expression is NULL, otherwise returns 0.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL(5 + NULL);",
                    "SELECT IF(ISNULL(score), 'N/A', score) FROM students;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Checks whether a value is NULL. Returns 1 if NULL, 0 otherwise.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL('abc');",
                    "SELECT IF(ISNULL(balance), 0, balance) FROM accounts;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(pk, int, PRI)\n(col_int_key, int, )\n(col_date_key, date, )\n",
            "Table: `t2`\nColumns:\n(pk, int, PRI)\n",
            "Table: `t3`\nColumns:\n(pk, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(pk, int(11), PRI)\n(col_int_key, int(11), )\n(col_date_key, date, )\n",
            "Table: `t2`\nColumns:\n(pk, int(11), PRI)\n",
            "Table: `t3`\nColumns:\n(pk, int(11), )\n"
        ]
    },
    {
        "sql_id": 368,
        "database_name": "BUTTERTrans_368",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select * from t3 join(t2 outr2 join t2 outr join t1)on (outr.pk = t3.pk) and (t1.col_int_key = t3.pk) and isnull(t1.col_date_key)and (outr2.pk <> t3.pk) ; -- ISNULL",
        "target_query": "select * from t3 join(t2 outr2 join t2 outr join t1)on(outr.pk=t3.pk)and(t1.col_int_key=t3.pk)and isnull(t1.col_date_key)and(outr2.pk<>t3.pk);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ISNULL",
                "start_pos": 106,
                "end_pos": 112
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Returns 1 if the expression is NULL, otherwise returns 0.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL(5 + NULL);",
                    "SELECT IF(ISNULL(score), 'N/A', score) FROM students;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Checks whether a value is NULL. Returns 1 if NULL, 0 otherwise.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL('abc');",
                    "SELECT IF(ISNULL(balance), 0, balance) FROM accounts;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(pk, int, PRI)\n(col_int_key, int, )\n(col_date_key, date, )\n",
            "Table: `t2`\nColumns:\n(pk, int, PRI)\n",
            "Table: `t3`\nColumns:\n(pk, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(pk, int(11), PRI)\n(col_int_key, int(11), )\n(col_date_key, date, )\n",
            "Table: `t2`\nColumns:\n(pk, int(11), PRI)\n",
            "Table: `t3`\nColumns:\n(pk, int(11), )\n"
        ]
    },
    {
        "sql_id": 369,
        "database_name": "BUTTERTrans_369",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "explain select * from t1 where a like concat('abc','%'); -- CONCAT",
        "target_query": "explain select * from t1 where a like concat('abc','%');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 38,
                "end_pos": 44
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(10), )\n"
        ]
    },
    {
        "sql_id": 370,
        "database_name": "BUTTERTrans_370",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select * from t1 where a like concat(\"abc\",\"%\"); -- CONCAT",
        "target_query": "select * from t1 where a like concat(\"abc\",\"%\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 30,
                "end_pos": 36
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(10), )\n"
        ]
    },
    {
        "sql_id": 371,
        "database_name": "BUTTERTrans_371",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select ln(exp(10)),exp(ln(sqrt(10))*2),ln(NULL); -- LN",
        "target_query": "select ln(exp(10)),exp(ln(sqrt(10))*2),ln(NULL);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LN",
                "start_pos": 7,
                "end_pos": 9
            },
            {
                "dialect_token": "LN",
                "start_pos": 23,
                "end_pos": 25
            },
            {
                "dialect_token": "LN",
                "start_pos": 39,
                "end_pos": 41
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LN(x)",
                "description": "The LN() function returns the natural logarithm of x. If x is less than or equal to 0, it returns NULL.",
                "examples": [
                    "select ln(exp(10));",
                    "select exp(ln(sqrt(10)) * 2);",
                    "select ln(-1);",
                    "select ln(0);",
                    "select ln(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LN(x)",
                "description": "Similar to MySQL, the LN() function in MariaDB returns the natural logarithm of x. It returns NULL for negative or zero values.",
                "examples": [
                    "select ln(exp(10));",
                    "select exp(ln(sqrt(10)) * 2);",
                    "select ln(-1);",
                    "select ln(0);",
                    "select ln(NULL);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 372,
        "database_name": "BUTTERTrans_372",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select log2(8),log2(15),log2(NULL); -- LOG2",
        "target_query": "select log2(8),log2(15),log2(NULL);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LOG2",
                "start_pos": 7,
                "end_pos": 11
            },
            {
                "dialect_token": "LOG2",
                "start_pos": 15,
                "end_pos": 19
            },
            {
                "dialect_token": "LOG2",
                "start_pos": 24,
                "end_pos": 28
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LOG2(number)",
                "description": "Returns the logarithm of a number with base 2. Returns NULL for zero or negative numbers.",
                "examples": [
                    "SELECT LOG2(8);",
                    "SELECT LOG2(15);",
                    "SELECT LOG2(-2);",
                    "SELECT LOG2(0);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LOG2(number)",
                "description": "Returns the logarithm of a number with base 2. Returns NULL for zero or negative numbers.",
                "examples": [
                    "SELECT LOG2(8);",
                    "SELECT LOG2(15);",
                    "SELECT LOG2(-2);",
                    "SELECT LOG2(0);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 373,
        "database_name": "BUTTERTrans_373",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select pow(10,log10(10)),power(2,4); -- POW, POWER",
        "target_query": "select pow(10,log10(10)),power(2,4);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "POW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "POWER",
                "start_pos": 25,
                "end_pos": 30
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "POW(3, 3)",
                "description": "POW(x, y) in MySQL is used to calculate x raised to the power of y. It returns the result of x^y.",
                "examples": [
                    "SELECT POW(3, 3);",
                    "SELECT POW(5, 4);",
                    "SELECT POW(x, 2) FROM some_table;"
                ]
            },
            {
                "expression": "SELECT POW(10, 2), POWER(2, 3), POWER(3, 3);",
                "description": "Calculates the power of a number: POW(10, 2) returns 100, POWER(2, 3) returns 8, POWER(3, 3) returns 27.",
                "examples": [
                    "SELECT POW(5, 2);",
                    "SELECT POWER(3, 4);",
                    "SELECT POWER(10, 0);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "POW(3, 3)",
                "description": "MariaDB supports the POW() function, which calculates x raised to the power of y, just like MySQL.",
                "examples": [
                    "SELECT POW(3, 3);",
                    "SELECT POW(5, 4);",
                    "SELECT POW(x, 2) FROM some_table;"
                ]
            },
            {
                "expression": "SELECT POW(10, 2), POWER(2, 3), POWER(3, 3);",
                "description": "Calculates the power of a number: POW(10, 2) returns 100, POWER(2, 3) returns 8, POWER(3, 3) returns 27.",
                "examples": [
                    "SELECT POW(5, 2);",
                    "SELECT POWER(3, 4);",
                    "SELECT POWER(10, 0);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 374,
        "database_name": "BUTTERTrans_374",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select ceil(0.09); -- CEIL",
        "target_query": "select ceil(0.09);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CEIL",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CEIL(x)",
                "description": "Returns the smallest integer value not less than x (rounds up).",
                "examples": [
                    "SELECT CEIL(1.3);",
                    "SELECT CEIL(-2.8);",
                    "SELECT CEIL(RAND() * 100);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CEIL(x)",
                "description": "Returns the smallest integer not less than x. Identical to CEILING().",
                "examples": [
                    "SELECT CEIL(1.3);",
                    "SELECT CEIL(-2.8);",
                    "SELECT CEIL(RAND() * 100);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 375,
        "database_name": "BUTTERTrans_375",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select ceil(0.000000000000000009); -- CEIL",
        "target_query": "select ceil(0.000000000000000009);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CEIL",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CEIL(x)",
                "description": "Returns the smallest integer value not less than x (rounds up).",
                "examples": [
                    "SELECT CEIL(1.3);",
                    "SELECT CEIL(-2.8);",
                    "SELECT CEIL(RAND() * 100);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CEIL(x)",
                "description": "Returns the smallest integer not less than x. Identical to CEILING().",
                "examples": [
                    "SELECT CEIL(1.3);",
                    "SELECT CEIL(-2.8);",
                    "SELECT CEIL(RAND() * 100);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 376,
        "database_name": "BUTTERTrans_376",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t1 values ('http://www.foo.com/', now()); -- NOW",
        "target_query": "insert into t1 values ('http://www.foo.com/', now());",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "NOW",
                "start_pos": 46,
                "end_pos": 49
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(90), )\n(ts, datetime, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(90), )\n(ts, datetime, )\n"
        ]
    },
    {
        "sql_id": 377,
        "database_name": "BUTTERTrans_377",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select a from t1 where a='http://www.foo.com/' order by abs(timediff(ts, 0)); -- TIMEDIFF",
        "target_query": "select a from t1 where a='http://www.foo.com/' order by abs(timediff(ts, 0));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMEDIFF",
                "start_pos": 60,
                "end_pos": 68
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MySQL that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MariaDB that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(90), )\n(ts, datetime, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(90), )\n(ts, datetime, )\n"
        ]
    },
    {
        "sql_id": 378,
        "database_name": "BUTTERTrans_378",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select mod(cast(-2 as unsigned), 3), mod(18446744073709551614, 3), mod(-2, 3); -- MOD",
        "target_query": "select mod(cast(-2 as unsigned), 3), mod(18446744073709551614, 3), mod(-2, 3);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MOD",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "MOD",
                "start_pos": 37,
                "end_pos": 40
            },
            {
                "dialect_token": "MOD",
                "start_pos": 67,
                "end_pos": 70
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MOD(N, M) \u6216 N % M",
                "description": "Returns the remainder of N divided by M. Returns NULL if M = 0.",
                "examples": [
                    "SELECT MOD(10, 3);",
                    "SELECT 10 % 3;",
                    "SELECT MOD(5, 0);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MOD(N, M) \u6216 N % M",
                "description": "Returns the modulo of two numbers. NULL if M = 0.",
                "examples": [
                    "SELECT MOD(20, 6);",
                    "SELECT 20 % 6;",
                    "SELECT MOD(4, 0);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 379,
        "database_name": "BUTTERTrans_379",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select mod(5, cast(-2 as unsigned)), mod(5, 18446744073709551614), mod(5, -2); -- MOD",
        "target_query": "select mod(5, cast(-2 as unsigned)), mod(5, 18446744073709551614), mod(5, -2);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MOD",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "MOD",
                "start_pos": 37,
                "end_pos": 40
            },
            {
                "dialect_token": "MOD",
                "start_pos": 67,
                "end_pos": 70
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MOD(N, M) \u6216 N % M",
                "description": "Returns the remainder of N divided by M. Returns NULL if M = 0.",
                "examples": [
                    "SELECT MOD(10, 3);",
                    "SELECT 10 % 3;",
                    "SELECT MOD(5, 0);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MOD(N, M) \u6216 N % M",
                "description": "Returns the modulo of two numbers. NULL if M = 0.",
                "examples": [
                    "SELECT MOD(20, 6);",
                    "SELECT 20 % 6;",
                    "SELECT MOD(4, 0);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 380,
        "database_name": "BUTTERTrans_380",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select pow(cast(-2 as unsigned), 5), pow(18446744073709551614, 5), pow(-2, 5); -- POW",
        "target_query": "select pow(cast(-2 as unsigned), 5), pow(18446744073709551614, 5), pow(-2, 5);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "POW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "POW",
                "start_pos": 37,
                "end_pos": 40
            },
            {
                "dialect_token": "POW",
                "start_pos": 67,
                "end_pos": 70
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "POW(3, 3)",
                "description": "POW(x, y) in MySQL is used to calculate x raised to the power of y. It returns the result of x^y.",
                "examples": [
                    "SELECT POW(3, 3);",
                    "SELECT POW(5, 4);",
                    "SELECT POW(x, 2) FROM some_table;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "POW(3, 3)",
                "description": "MariaDB supports the POW() function, which calculates x raised to the power of y, just like MySQL.",
                "examples": [
                    "SELECT POW(3, 3);",
                    "SELECT POW(5, 4);",
                    "SELECT POW(x, 2) FROM some_table;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 381,
        "database_name": "BUTTERTrans_381",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT DISTINCT (a DIV 254576881) FROM t1; -- DIV",
        "target_query": "SELECT DISTINCT (a DIV 254576881) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DIV",
                "start_pos": 19,
                "end_pos": 22
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "a DIV b",
                "description": "Performs integer division between two numbers and returns the floor of the quotient.",
                "examples": [
                    "SELECT 10 DIV 3;",
                    "SELECT 5.8 DIV 2;",
                    "SELECT 9 DIV 4 + 1;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "a DIV b",
                "description": "Executes integer division and returns the floor of the result.",
                "examples": [
                    "SELECT 10 DIV 3;",
                    "SELECT 5.8 DIV 2;",
                    "SELECT 9 DIV 4 + 1;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, longblob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, longblob, )\n"
        ]
    },
    {
        "sql_id": 382,
        "database_name": "BUTTERTrans_382",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CASE(('')) WHEN (CONVERT(1, CHAR(1))) THEN (('' / 1)) END; -- CONVERT",
        "target_query": "SELECT CASE(('')) WHEN (CONVERT(1, CHAR(1))) THEN (('' / 1)) END;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONVERT",
                "start_pos": 24,
                "end_pos": 31
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "Converts data types or changes the character set.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8);",
                    "SELECT CONVERT(1234, CHAR);",
                    "SELECT CONVERT(column_name USING latin1) FROM my_table;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "MariaDB supports CONVERT similar to MySQL, for both character set and type conversion.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8mb4);",
                    "SELECT CONVERT('2021-12-31', CHAR);",
                    "SELECT CONVERT(column_name USING utf8mb4) FROM my_table;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 383,
        "database_name": "BUTTERTrans_383",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "CREATE TABLE t1 SELECT CAST((CASE(('')) WHEN (CONVERT(1, CHAR(1))) THEN (('' / 1)) END) AS CHAR) as C; -- CONVERT",
        "target_query": "CREATE TABLE t1 SELECT CAST((CASE(('')) WHEN (CONVERT(1, CHAR(1))) THEN (('' / 1)) END) AS CHAR) as C;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONVERT",
                "start_pos": 46,
                "end_pos": 53
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "Converts data types or changes the character set.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8);",
                    "SELECT CONVERT(1234, CHAR);",
                    "SELECT CONVERT(column_name USING latin1) FROM my_table;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "MariaDB supports CONVERT similar to MySQL, for both character set and type conversion.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8mb4);",
                    "SELECT CONVERT('2021-12-31', CHAR);",
                    "SELECT CONVERT(column_name USING utf8mb4) FROM my_table;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 SELECT CAST((CASE(('')) WHEN (CONVERT(1, CHAR(1))) THEN (('' / 1)) END) AS CHAR) as C; -- CONVERT"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 SELECT CAST((CASE(('')) WHEN (CONVERT(1, CHAR(1))) THEN (('' / 1)) END) AS CHAR) as C;"
        ]
    },
    {
        "sql_id": 384,
        "database_name": "BUTTERTrans_384",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HEX(c1) FROM t1; -- HEX",
        "target_query": "SELECT HEX(c1) FROM t1; -- HEX",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(4), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(4), )\n"
        ]
    },
    {
        "sql_id": 385,
        "database_name": "BUTTERTrans_385",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "CREATE TABLE t1 SELECT repeat('a',4000) a; -- REPEAT",
        "target_query": "CREATE TABLE t1 SELECT repeat('a',4000) a; -- REPEAT",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 23,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `simple1`\nColumns:\n(id, integer, )\n"
        ],
        "target_related_schemas": [
            "Table: `simple1`\nColumns:\n(id, int(1), )\n"
        ]
    },
    {
        "sql_id": 386,
        "database_name": "BUTTERTrans_386",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "CREATE TABLE head AS SELECT concat(b1.b, b2.b) AS head FROM t1 b1, t1 b2; -- CONCAT",
        "target_query": "CREATE TABLE head AS SELECT concat(b1.b, b2.b) AS head FROM t1 b1, t1 b2; -- CONCAT",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 28,
                "end_pos": 34
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(b, varchar(2), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(b, varchar(2), )\n"
        ]
    },
    {
        "sql_id": 387,
        "database_name": "BUTTERTrans_387",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "CREATE TABLE tail AS SELECT concat(b1.b, b2.b) AS tail FROM t1 b1, t1 b2; -- CONCAT",
        "target_query": "CREATE TABLE tail AS SELECT concat(b1.b, b2.b) AS tail FROM t1 b1, t1 b2; -- CONCAT",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 28,
                "end_pos": 34
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `head`\nColumns:\n(head, varchar(4), )\n",
            "Table: `t1`\nColumns:\n(b, varchar(2), )\n"
        ],
        "target_related_schemas": [
            "Table: `head`\nColumns:\n(head, varchar(4), )\n",
            "Table: `t1`\nColumns:\n(b, varchar(2), )\n"
        ]
    },
    {
        "sql_id": 388,
        "database_name": "BUTTERTrans_388",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "UPDATE IGNORE t1 SET a=unhex(code); -- UNHEX",
        "target_query": "UPDATE IGNORE t1 SET a=unhex(code); -- UNHEX",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [],
        "source_dialect_knowledge": [
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Returns NULL for invalid hex or NULL input.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Supports implicit zero-padding for odd-length strings.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(code, varchar(6), )\n(a, varchar(1), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(code, varchar(6), )\n(a, varchar(1), )\n"
        ]
    },
    {
        "sql_id": 389,
        "database_name": "BUTTERTrans_389",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a<>'' AND OCTET_LENGTH(a)=2; -- OCTET_LENGTH",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a<>'' AND OCTET_LENGTH(a)=2; -- OCTET_LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "OCTET_LENGTH",
                "start_pos": 40,
                "end_pos": 52
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(code, varchar(6), )\n(a, varchar(1), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(code, varchar(6), )\n(a, varchar(1), )\n"
        ]
    },
    {
        "sql_id": 390,
        "database_name": "BUTTERTrans_390",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM t1 WHERE CHAR_LENGTH(a)=2; -- CHAR_LENGTH",
        "target_query": "SELECT * FROM t1 WHERE CHAR_LENGTH(a)=2; -- CHAR_LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CHAR_LENGTH",
                "start_pos": 23,
                "end_pos": 34
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CHAR_LENGTH(expr)",
                "description": "Returns the number of characters in the string, not bytes.",
                "examples": [
                    "SELECT CHAR_LENGTH('abc');",
                    "SELECT CHAR_LENGTH('\u4f60\u597d');",
                    "SELECT CHAR_LENGTH('a\u4f60b\u597dc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CHAR_LENGTH(expr)",
                "description": "Returns the character count of the input string, ignoring byte size.",
                "examples": [
                    "SELECT CHAR_LENGTH('abc');",
                    "SELECT CHAR_LENGTH('\u4f60\u597d');",
                    "SELECT CHAR_LENGTH('a\u4f60b\u597dc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(code, varchar(6), )\n(a, varchar(1), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(code, varchar(6), )\n(a, varchar(1), )\n"
        ]
    },
    {
        "sql_id": 391,
        "database_name": "BUTTERTrans_391",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a<>'' AND OCTET_LENGTH(a)=3; -- OCTET_LENGTH",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a<>'' AND OCTET_LENGTH(a)=3; -- OCTET_LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "OCTET_LENGTH",
                "start_pos": 40,
                "end_pos": 52
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(code, varchar(6), )\n(a, varchar(1), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(code, varchar(6), )\n(a, varchar(1), )\n"
        ]
    },
    {
        "sql_id": 392,
        "database_name": "BUTTERTrans_392",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROUND(LEAST(15, -4939092, 0.2704)); -- LEAST, STDDEV",
        "target_query": "SELECT ROUND(LEAST(15, -4939092, 0.2704));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LEAST",
                "start_pos": 13,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            },
            {
                "expression": "STDDEV(amount)",
                "description": "The STDDEV function calculates the standard deviation of a numeric column in a database. It returns a measure of the amount of variation or dispersion of a set of values.",
                "examples": [
                    "SELECT STDDEV(amount) FROM sales;",
                    "SELECT STDDEV(amount) OVER (ROWS 2 PRECEDING) FROM sales;",
                    "SELECT id, STDDEV(amount) OVER (PARTITION BY region ORDER BY amount) AS region_stddev FROM sales;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            },
            {
                "expression": "STDDEV(amount)",
                "description": "The STDDEV function calculates the standard deviation of a numeric column in a database. It returns a measure of the amount of variation or dispersion of a set of values.",
                "examples": [
                    "SELECT STDDEV(amount) FROM sales;",
                    "SELECT STDDEV(amount) OVER (ROWS 2 PRECEDING) FROM sales;",
                    "SELECT id, STDDEV(amount) OVER (PARTITION BY region ORDER BY amount) AS region_stddev FROM sales;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 393,
        "database_name": "BUTTERTrans_393",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select (1.175494351E-37 div 1.7976931348623157E+308); -- DIV",
        "target_query": "select (1.175494351E-37 div 1.7976931348623157E+308);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DIV",
                "start_pos": 24,
                "end_pos": 27
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "a DIV b",
                "description": "Performs integer division between two numbers and returns the floor of the quotient.",
                "examples": [
                    "SELECT 10 DIV 3;",
                    "SELECT 5.8 DIV 2;",
                    "SELECT 9 DIV 4 + 1;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "a DIV b",
                "description": "Executes integer division and returns the floor of the result.",
                "examples": [
                    "SELECT 10 DIV 3;",
                    "SELECT 5.8 DIV 2;",
                    "SELECT 9 DIV 4 + 1;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 394,
        "database_name": "BUTTERTrans_394",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (ln(1)); -- LN",
        "target_query": "INSERT INTO t1 VALUES (ln(1));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LN",
                "start_pos": 23,
                "end_pos": 25
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LN(x)",
                "description": "The LN() function returns the natural logarithm of x. If x is less than or equal to 0, it returns NULL.",
                "examples": [
                    "select ln(exp(10));",
                    "select exp(ln(sqrt(10)) * 2);",
                    "select ln(-1);",
                    "select ln(0);",
                    "select ln(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LN(x)",
                "description": "Similar to MySQL, the LN() function in MariaDB returns the natural logarithm of x. It returns NULL for negative or zero values.",
                "examples": [
                    "select ln(exp(10));",
                    "select exp(ln(sqrt(10)) * 2);",
                    "select ln(-1);",
                    "select ln(0);",
                    "select ln(NULL);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, double, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, double, )\n"
        ]
    },
    {
        "sql_id": 395,
        "database_name": "BUTTERTrans_395",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT floor(ceil(123456789)); -- CEIL",
        "target_query": "SELECT floor(ceil(123456789));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CEIL",
                "start_pos": 13,
                "end_pos": 17
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CEIL(x)",
                "description": "Returns the smallest integer value not less than x (rounds up).",
                "examples": [
                    "SELECT CEIL(1.3);",
                    "SELECT CEIL(-2.8);",
                    "SELECT CEIL(RAND() * 100);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CEIL(x)",
                "description": "Returns the smallest integer not less than x. Identical to CEILING().",
                "examples": [
                    "SELECT CEIL(1.3);",
                    "SELECT CEIL(-2.8);",
                    "SELECT CEIL(RAND() * 100);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 396,
        "database_name": "BUTTERTrans_396",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select cast(pow(2,63)-1024 as signed) as pp; -- POW",
        "target_query": "select cast(pow(2,63)-1024 as signed) as pp;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "POW",
                "start_pos": 12,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "POW(3, 3)",
                "description": "POW(x, y) in MySQL is used to calculate x raised to the power of y. It returns the result of x^y.",
                "examples": [
                    "SELECT POW(3, 3);",
                    "SELECT POW(5, 4);",
                    "SELECT POW(x, 2) FROM some_table;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "POW(3, 3)",
                "description": "MariaDB supports the POW() function, which calculates x raised to the power of y, just like MySQL.",
                "examples": [
                    "SELECT POW(3, 3);",
                    "SELECT POW(5, 4);",
                    "SELECT POW(x, 2) FROM some_table;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 397,
        "database_name": "BUTTERTrans_397",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select cast(1-pow(2,63) as signed) as qq; -- POW",
        "target_query": "select cast(1-pow(2,63) as signed) as qq;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "POW",
                "start_pos": 14,
                "end_pos": 17
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "POW(3, 3)",
                "description": "POW(x, y) in MySQL is used to calculate x raised to the power of y. It returns the result of x^y.",
                "examples": [
                    "SELECT POW(3, 3);",
                    "SELECT POW(5, 4);",
                    "SELECT POW(x, 2) FROM some_table;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "POW(3, 3)",
                "description": "MariaDB supports the POW() function, which calculates x raised to the power of y, just like MySQL.",
                "examples": [
                    "SELECT POW(3, 3);",
                    "SELECT POW(5, 4);",
                    "SELECT POW(x, 2) FROM some_table;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 398,
        "database_name": "BUTTERTrans_398",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM t0 WHERE CAST(COALESCE(t0.c0, -1) AS UNSIGNED); -- COALESCE",
        "target_query": "SELECT * FROM t0 WHERE CAST(COALESCE(t0.c0, -1) AS UNSIGNED);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "COALESCE",
                "start_pos": 28,
                "end_pos": 36
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Same as MySQL: COALESCE function and partition coalescing supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 13;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0`\nColumns:\n(c0, bigint unsigned, )\n"
        ],
        "target_related_schemas": [
            "Table: `t0`\nColumns:\n(c0, bigint(20) unsigned, )\n"
        ]
    },
    {
        "sql_id": 399,
        "database_name": "BUTTERTrans_399",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM t0 WHERE CAST(IFNULL(t0.c0, -1) AS UNSIGNED); -- IFNULL",
        "target_query": "SELECT * FROM t0 WHERE CAST(IFNULL(t0.c0, -1) AS UNSIGNED);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IFNULL",
                "start_pos": 28,
                "end_pos": 34
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0`\nColumns:\n(c0, bigint unsigned, )\n"
        ],
        "target_related_schemas": [
            "Table: `t0`\nColumns:\n(c0, bigint(20) unsigned, )\n"
        ]
    },
    {
        "sql_id": 400,
        "database_name": "BUTTERTrans_400",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CAST(COALESCE(t0.c0, -1) AS UNSIGNED) IS TRUE FROM t0; -- COALESCE",
        "target_query": "SELECT CAST(COALESCE(t0.c0, -1) AS UNSIGNED) IS TRUE FROM t0;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "COALESCE",
                "start_pos": 12,
                "end_pos": 20
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Same as MySQL: COALESCE function and partition coalescing supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 13;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0`\nColumns:\n(c0, bigint unsigned, )\n"
        ],
        "target_related_schemas": [
            "Table: `t0`\nColumns:\n(c0, bigint(20) unsigned, )\n"
        ]
    },
    {
        "sql_id": 401,
        "database_name": "BUTTERTrans_401",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CAST(COALESCE(t0.c0, -1) AS UNSIGNED) FROM t0; -- COALESCE",
        "target_query": "SELECT CAST(COALESCE(t0.c0, -1) AS UNSIGNED) FROM t0;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "COALESCE",
                "start_pos": 12,
                "end_pos": 20
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Same as MySQL: COALESCE function and partition coalescing supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 13;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0`\nColumns:\n(c0, bigint unsigned, )\n"
        ],
        "target_related_schemas": [
            "Table: `t0`\nColumns:\n(c0, bigint(20) unsigned, )\n"
        ]
    },
    {
        "sql_id": 402,
        "database_name": "BUTTERTrans_402",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select md5('a'), hex(md5('a')); -- MD5, HEX",
        "target_query": "select md5('a'), hex(md5('a')); -- MD5, HEX",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MD5",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "HEX",
                "start_pos": 17,
                "end_pos": 20
            },
            {
                "dialect_token": "MD5",
                "start_pos": 21,
                "end_pos": 24
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MD5()",
                "description": "Returns the MD5 hash of a given string, represented as a 32-character hexadecimal number.",
                "examples": [
                    "SELECT MD5('hello') = '5d41402abc4b2a76b9719d911017c592';",
                    "SELECT MD5('hello') <> MD5('world');",
                    "SELECT CASE WHEN MD5('test') = '098f6bcd4621d373cade4e832627b4f6' THEN 'Match' ELSE 'No Match' END;"
                ]
            },
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MD5()",
                "description": "Returns the MD5 hash of a given string, represented as a 32-character hexadecimal number.",
                "examples": [
                    "SELECT MD5('hello') = '5d41402abc4b2a76b9719d911017c592';",
                    "SELECT MD5('hello') <> MD5('world');",
                    "SELECT CASE WHEN MD5('test') = '098f6bcd4621d373cade4e832627b4f6' THEN 'Match' ELSE 'No Match' END;"
                ]
            },
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 403,
        "database_name": "BUTTERTrans_403",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "create table t1 as select md5('a') as c1; -- MD5",
        "target_query": "create table t1 as select md5('a') as c1; -- MD5",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MD5",
                "start_pos": 26,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MD5()",
                "description": "Returns the MD5 hash of a given string, represented as a 32-character hexadecimal number.",
                "examples": [
                    "SELECT MD5('hello') = '5d41402abc4b2a76b9719d911017c592';",
                    "SELECT MD5('hello') <> MD5('world');",
                    "SELECT CASE WHEN MD5('test') = '098f6bcd4621d373cade4e832627b4f6' THEN 'Match' ELSE 'No Match' END;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MD5()",
                "description": "Returns the MD5 hash of a given string, represented as a 32-character hexadecimal number.",
                "examples": [
                    "SELECT MD5('hello') = '5d41402abc4b2a76b9719d911017c592';",
                    "SELECT MD5('hello') <> MD5('world');",
                    "SELECT CASE WHEN MD5('test') = '098f6bcd4621d373cade4e832627b4f6' THEN 'Match' ELSE 'No Match' END;"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 as select md5('a') as c1; -- MD5"
        ],
        "target_related_schemas": [
            "create table t1 as select md5('a') as c1; -- MD5"
        ]
    },
    {
        "sql_id": 404,
        "database_name": "BUTTERTrans_404",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select md5('hello'); -- MD5",
        "target_query": "select md5('hello'); -- MD5",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MD5",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MD5()",
                "description": "Returns the MD5 hash of a given string, represented as a 32-character hexadecimal number.",
                "examples": [
                    "SELECT MD5('hello') = '5d41402abc4b2a76b9719d911017c592';",
                    "SELECT MD5('hello') <> MD5('world');",
                    "SELECT CASE WHEN MD5('test') = '098f6bcd4621d373cade4e832627b4f6' THEN 'Match' ELSE 'No Match' END;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MD5()",
                "description": "Returns the MD5 hash of a given string, represented as a 32-character hexadecimal number.",
                "examples": [
                    "SELECT MD5('hello') = '5d41402abc4b2a76b9719d911017c592';",
                    "SELECT MD5('hello') <> MD5('world');",
                    "SELECT CASE WHEN MD5('test') = '098f6bcd4621d373cade4e832627b4f6' THEN 'Match' ELSE 'No Match' END;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 405,
        "database_name": "BUTTERTrans_405",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "explain select md5('hello'); -- MD5",
        "target_query": "explain select md5('hello'); -- MD5",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MD5",
                "start_pos": 15,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MD5()",
                "description": "Returns the MD5 hash of a given string, represented as a 32-character hexadecimal number.",
                "examples": [
                    "SELECT MD5('hello') = '5d41402abc4b2a76b9719d911017c592';",
                    "SELECT MD5('hello') <> MD5('world');",
                    "SELECT CASE WHEN MD5('test') = '098f6bcd4621d373cade4e832627b4f6' THEN 'Match' ELSE 'No Match' END;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MD5()",
                "description": "Returns the MD5 hash of a given string, represented as a 32-character hexadecimal number.",
                "examples": [
                    "SELECT MD5('hello') = '5d41402abc4b2a76b9719d911017c592';",
                    "SELECT MD5('hello') <> MD5('world');",
                    "SELECT CASE WHEN MD5('test') = '098f6bcd4621d373cade4e832627b4f6' THEN 'Match' ELSE 'No Match' END;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 406,
        "database_name": "BUTTERTrans_406",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select length(unhex(md5(\"abrakadabra\"))); -- LENGTH, UNHEX, MD5",
        "target_query": "select length(unhex(md5(\"abrakadabra\"))); -- LENGTH, UNHEX, MD5",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "UNHEX",
                "start_pos": 14,
                "end_pos": 19
            },
            {
                "dialect_token": "MD5",
                "start_pos": 20,
                "end_pos": 23
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Returns NULL for invalid hex or NULL input.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            },
            {
                "expression": "MD5()",
                "description": "Returns the MD5 hash of a given string, represented as a 32-character hexadecimal number.",
                "examples": [
                    "SELECT MD5('hello') = '5d41402abc4b2a76b9719d911017c592';",
                    "SELECT MD5('hello') <> MD5('world');",
                    "SELECT CASE WHEN MD5('test') = '098f6bcd4621d373cade4e832627b4f6' THEN 'Match' ELSE 'No Match' END;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Supports implicit zero-padding for odd-length strings.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            },
            {
                "expression": "MD5()",
                "description": "Returns the MD5 hash of a given string, represented as a 32-character hexadecimal number.",
                "examples": [
                    "SELECT MD5('hello') = '5d41402abc4b2a76b9719d911017c592';",
                    "SELECT MD5('hello') <> MD5('world');",
                    "SELECT CASE WHEN MD5('test') = '098f6bcd4621d373cade4e832627b4f6' THEN 'Match' ELSE 'No Match' END;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 407,
        "database_name": "BUTTERTrans_407",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t1 values ( 'test',md5('test')), ('test', md5('test')); -- MD5",
        "target_query": "insert into t1 values ( 'test',md5('test')), ('test', md5('test'));  -- MD5",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MD5",
                "start_pos": 31,
                "end_pos": 34
            },
            {
                "dialect_token": "MD5",
                "start_pos": 54,
                "end_pos": 57
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MD5()",
                "description": "Returns the MD5 hash of a given string, represented as a 32-character hexadecimal number.",
                "examples": [
                    "SELECT MD5('hello') = '5d41402abc4b2a76b9719d911017c592';",
                    "SELECT MD5('hello') <> MD5('world');",
                    "SELECT CASE WHEN MD5('test') = '098f6bcd4621d373cade4e832627b4f6' THEN 'Match' ELSE 'No Match' END;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MD5()",
                "description": "Returns the MD5 hash of a given string, represented as a 32-character hexadecimal number.",
                "examples": [
                    "SELECT MD5('hello') = '5d41402abc4b2a76b9719d911017c592';",
                    "SELECT MD5('hello') <> MD5('world');",
                    "SELECT CASE WHEN MD5('test') = '098f6bcd4621d373cade4e832627b4f6' THEN 'Match' ELSE 'No Match' END;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, varchar(4), )\n(f2, varchar(64), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, varchar(4), )\n(f2, varchar(64), )\n"
        ]
    },
    {
        "sql_id": 408,
        "database_name": "BUTTERTrans_408",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select * from t1 where f1='test' and (f2= md5(\"test\") or f2= md5(\"Test\")); -- MD5",
        "target_query": "select * from t1 where f1='test' and (f2= md5(\"test\") or f2= md5(\"TEST\")); -- MD5",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MD5",
                "start_pos": 42,
                "end_pos": 45
            },
            {
                "dialect_token": "MD5",
                "start_pos": 61,
                "end_pos": 64
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MD5()",
                "description": "Returns the MD5 hash of a given string, represented as a 32-character hexadecimal number.",
                "examples": [
                    "SELECT MD5('hello') = '5d41402abc4b2a76b9719d911017c592';",
                    "SELECT MD5('hello') <> MD5('world');",
                    "SELECT CASE WHEN MD5('test') = '098f6bcd4621d373cade4e832627b4f6' THEN 'Match' ELSE 'No Match' END;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MD5()",
                "description": "Returns the MD5 hash of a given string, represented as a 32-character hexadecimal number.",
                "examples": [
                    "SELECT MD5('hello') = '5d41402abc4b2a76b9719d911017c592';",
                    "SELECT MD5('hello') <> MD5('world');",
                    "SELECT CASE WHEN MD5('test') = '098f6bcd4621d373cade4e832627b4f6' THEN 'Match' ELSE 'No Match' END;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, varchar(4), )\n(f2, varchar(64), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, varchar(4), )\n(f2, varchar(64), )\n"
        ]
    },
    {
        "sql_id": 409,
        "database_name": "BUTTERTrans_409",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select * from t1 where f1='test' and (f2= md5(\"TEST\") or f2= md5(\"test\")); -- MD5",
        "target_query": "select * from t1 where f1='test' and (f2= md5(\"TEST\") or f2= md5(\"test\")); -- MD5",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MD5",
                "start_pos": 42,
                "end_pos": 45
            },
            {
                "dialect_token": "MD5",
                "start_pos": 61,
                "end_pos": 64
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MD5()",
                "description": "Returns the MD5 hash of a given string, represented as a 32-character hexadecimal number.",
                "examples": [
                    "SELECT MD5('hello') = '5d41402abc4b2a76b9719d911017c592';",
                    "SELECT MD5('hello') <> MD5('world');",
                    "SELECT CASE WHEN MD5('test') = '098f6bcd4621d373cade4e832627b4f6' THEN 'Match' ELSE 'No Match' END;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MD5()",
                "description": "Returns the MD5 hash of a given string, represented as a 32-character hexadecimal number.",
                "examples": [
                    "SELECT MD5('hello') = '5d41402abc4b2a76b9719d911017c592';",
                    "SELECT MD5('hello') <> MD5('world');",
                    "SELECT CASE WHEN MD5('test') = '098f6bcd4621d373cade4e832627b4f6' THEN 'Match' ELSE 'No Match' END;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, varchar(4), )\n(f2, varchar(64), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, varchar(4), )\n(f2, varchar(64), )\n"
        ]
    },
    {
        "sql_id": 410,
        "database_name": "BUTTERTrans_410",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select inet_ntoa(4294902271),inet_ntoa(511); -- INET_NTOA",
        "target_query": "select inet_ntoa(4294902271),inet_ntoa(511);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "INET_NTOA",
                "start_pos": 7,
                "end_pos": 16
            },
            {
                "dialect_token": "INET_NTOA",
                "start_pos": 29,
                "end_pos": 38
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INET_NTOA(ip)",
                "description": "The INET_NTOA function converts an integer representation of an IPv4 address to a standard dotted-decimal format string.",
                "examples": [
                    "SELECT INET_NTOA(3232235776);",
                    "SELECT INET_NTOA(16777343);",
                    "SELECT INET_NTOA(2886733345);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "INET_NTOA(ip)",
                "description": "MariaDB supports INET_NTOA just like MySQL, converting an integer IPv4 address to its dotted-decimal string representation.",
                "examples": [
                    "SELECT INET_NTOA(3232235776);",
                    "SELECT INET_NTOA(16777343);",
                    "SELECT INET_NTOA(2886733345);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 411,
        "database_name": "BUTTERTrans_411",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select a from t1 where mid(a+0,6,3) in ( mid(20040106123400,6,3) ); -- MID",
        "target_query": "select a from t1 where mid(a+0,6,3) in ( mid(20040106123400,6,3) );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MID",
                "start_pos": 23,
                "end_pos": 26
            },
            {
                "dialect_token": "MID",
                "start_pos": 41,
                "end_pos": 44
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MID(str, pos, len)",
                "description": "Extracts a substring from the string `str`, starting at position `pos`, with length `len`.",
                "examples": [
                    "SELECT MID('ABCDEFGHIJKL', 5, 3);",
                    "SELECT CONCAT(MID('hello_world', 1, 5), MID('hello_world', 7, 5));",
                    "SELECT MID('  padded_text  ', 3, 6);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MID(str, pos, len)",
                "description": "Extracts a substring from the string `str`, starting at position `pos`, for `len` characters.",
                "examples": [
                    "SELECT MID('ABCDEFGHIJKL', 5, 3);",
                    "SELECT CONCAT(MID('hello_world', 1, 5), MID('hello_world', 7, 5));",
                    "SELECT MID('  padded_text  ', 3, 6);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, timestamp, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, timestamp, )\n"
        ]
    },
    {
        "sql_id": 412,
        "database_name": "BUTTERTrans_412",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select a from t1 where mid(a+0,6,3) = ( mid(20040106123400,6,3) ); -- MID",
        "target_query": "select a from t1 where mid(a+0,6,3) = ( mid(20040106123400,6,3) );",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MID",
                "start_pos": 23,
                "end_pos": 26
            },
            {
                "dialect_token": "MID",
                "start_pos": 40,
                "end_pos": 43
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MID(str, pos, len)",
                "description": "Extracts a substring from the string `str`, starting at position `pos`, with length `len`.",
                "examples": [
                    "SELECT MID('ABCDEFGHIJKL', 5, 3);",
                    "SELECT CONCAT(MID('hello_world', 1, 5), MID('hello_world', 7, 5));",
                    "SELECT MID('  padded_text  ', 3, 6);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MID(str, pos, len)",
                "description": "Extracts a substring from the string `str`, starting at position `pos`, for `len` characters.",
                "examples": [
                    "SELECT MID('ABCDEFGHIJKL', 5, 3);",
                    "SELECT CONCAT(MID('hello_world', 1, 5), MID('hello_world', 7, 5));",
                    "SELECT MID('  padded_text  ', 3, 6);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, timestamp, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, timestamp, )\n"
        ]
    },
    {
        "sql_id": 413,
        "database_name": "BUTTERTrans_413",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "create table t1 as select uuid(), length(uuid()); -- UUID, LENGTH",
        "target_query": "create table t1 as select uuid(), length(uuid());",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UUID",
                "start_pos": 26,
                "end_pos": 30
            },
            {
                "dialect_token": "LENGTH",
                "start_pos": 34,
                "end_pos": 40
            },
            {
                "dialect_token": "UUID",
                "start_pos": 41,
                "end_pos": 45
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UUID()",
                "description": "In MySQL, the UUID() function generates a unique 128-bit identifier, typically represented as a string containing numbers and letters, in the standard UUID format.",
                "examples": [
                    "SELECT UUID();",
                    "SELECT CONCAT(UUID(), 'some_random_string');",
                    "SELECT UPPER(UUID());"
                ]
            },
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UUID()",
                "description": "MariaDB supports the UUID() function, generating a unique 128-bit identifier in the same format as MySQL.",
                "examples": [
                    "SELECT UUID();",
                    "SELECT CONCAT(UUID(), 'some_random_string');",
                    "SELECT UPPER(UUID());"
                ]
            },
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 as select uuid(), length(uuid()); -- UUID, LENGTH"
        ],
        "target_related_schemas": [
            "create table t1 as select uuid(), length(uuid());"
        ]
    },
    {
        "sql_id": 414,
        "database_name": "BUTTERTrans_414",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select min(a) from t1 group by inet_ntoa(a); -- MIN, INET_NTOA",
        "target_query": "select min(a) from t1 group by inet_ntoa(a);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "INET_NTOA",
                "start_pos": 31,
                "end_pos": 40
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MIN()",
                "description": "The MIN() function returns the smallest value in a column or expression. It is used in both SELECT queries and in the HAVING clause for aggregated queries.",
                "examples": [
                    "SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0';",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0') AS dt;",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(ci) = '0') AS dt;"
                ]
            },
            {
                "expression": "INET_NTOA(ip)",
                "description": "The INET_NTOA function converts an integer representation of an IPv4 address to a standard dotted-decimal format string.",
                "examples": [
                    "SELECT INET_NTOA(3232235776);",
                    "SELECT INET_NTOA(16777343);",
                    "SELECT INET_NTOA(2886733345);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MIN()",
                "description": "The MIN() function returns the smallest value in a column or expression. It is used in both SELECT queries and in the HAVING clause for aggregated queries.",
                "examples": [
                    "SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0';",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(cn) = '0') AS dt;",
                    "SELECT * FROM (SELECT COUNT(*) AS c FROM test1.t1 HAVING MIN(ci) = '0') AS dt;"
                ]
            },
            {
                "expression": "INET_NTOA(ip)",
                "description": "MariaDB supports INET_NTOA just like MySQL, converting an integer IPv4 address to its dotted-decimal string representation.",
                "examples": [
                    "SELECT INET_NTOA(3232235776);",
                    "SELECT INET_NTOA(16777343);",
                    "SELECT INET_NTOA(2886733345);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n"
        ]
    },
    {
        "sql_id": 415,
        "database_name": "BUTTERTrans_415",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT DISTINCT LEAST(a, (SELECT b FROM t1 LIMIT 1)) FROM t1 UNION SELECT 1; -- LEAST",
        "target_query": "SELECT DISTINCT LEAST(a, (SELECT b FROM t1 LIMIT 1)) FROM t1 UNION SELECT 1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LEAST",
                "start_pos": 16,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, longblob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, longblob, )\n"
        ]
    },
    {
        "sql_id": 416,
        "database_name": "BUTTERTrans_416",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT DISTINCT GREATEST(a, (SELECT b FROM t1 LIMIT 1)) FROM t1 UNION SELECT 1; -- GREATEST",
        "target_query": "SELECT DISTINCT GREATEST(a, (SELECT b FROM t1 LIMIT 1)) FROM t1 UNION SELECT 1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 16,
                "end_pos": 24
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, longblob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, longblob, )\n"
        ]
    },
    {
        "sql_id": 417,
        "database_name": "BUTTERTrans_417",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select 1+1,1-1,1+1*2,8/5,8%5,mod(8,5),-(1+1)*-2; -- MOD",
        "target_query": "select 1+1,1-1,1+1*2,8/5,8%5,mod(8,5),-(1+1)*-2;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MOD",
                "start_pos": 29,
                "end_pos": 32
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MOD(N, M) \u6216 N % M",
                "description": "Returns the remainder of N divided by M. Returns NULL if M = 0.",
                "examples": [
                    "SELECT MOD(10, 3);",
                    "SELECT 10 % 3;",
                    "SELECT MOD(5, 0);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MOD(N, M) \u6216 N % M",
                "description": "Returns the modulo of two numbers. NULL if M = 0.",
                "examples": [
                    "SELECT MOD(20, 6);",
                    "SELECT 20 % 6;",
                    "SELECT MOD(4, 0);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 418,
        "database_name": "BUTTERTrans_418",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select 1 | (1+1),5 & 3,bit_count(7) ; -- BIT_COUNT",
        "target_query": "select 1 | (1+1),5 & 3,bit_count(7);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "BIT_COUNT",
                "start_pos": 23,
                "end_pos": 32
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "BIT_COUNT(N)",
                "description": "Returns the number of bits set to 1 in the binary representation of the given integer.",
                "examples": [
                    "SELECT BIT_COUNT(0);",
                    "SELECT BIT_COUNT(1);",
                    "SELECT BIT_COUNT(15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "BIT_COUNT(N)",
                "description": "Returns the number of bits set to 1 in the binary representation of the given integer.",
                "examples": [
                    "SELECT BIT_COUNT(0);",
                    "SELECT BIT_COUNT(1);",
                    "SELECT BIT_COUNT(15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 419,
        "database_name": "BUTTERTrans_419",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select t1.a, t2.a, t2.b, bit_count(t2.b) from t1 left join t2 on t1.a=t2.a; -- BIT_COUNT",
        "target_query": "select t1.a, t2.a, t2.b, bit_count(t2.b) from t1 left join t2 on t1.a=t2.a;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "BIT_COUNT",
                "start_pos": 25,
                "end_pos": 34
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "BIT_COUNT(N)",
                "description": "Returns the number of bits set to 1 in the binary representation of the given integer.",
                "examples": [
                    "SELECT BIT_COUNT(0);",
                    "SELECT BIT_COUNT(1);",
                    "SELECT BIT_COUNT(15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "BIT_COUNT(N)",
                "description": "Returns the number of bits set to 1 in the binary representation of the given integer.",
                "examples": [
                    "SELECT BIT_COUNT(0);",
                    "SELECT BIT_COUNT(1);",
                    "SELECT BIT_COUNT(15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n",
            "Table: `t2`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n",
            "Table: `t2`\nColumns:\n(a, int(11), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 420,
        "database_name": "BUTTERTrans_420",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select date_format(\"1997-12-31 23:59:59.000002\", \"%f\"); -- DATE_FORMAT",
        "target_query": "select date_format(\"1997-12-31 23:59:59.000002\", \"%f\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 421,
        "database_name": "BUTTERTrans_421",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select datediff(\"1997-12-31 23:59:59.000001\",\"1997-12-30\"); -- DATEDIFF",
        "target_query": "select datediff(\"1997-12-31 23:59:59.000001\",\"1997-12-30\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATEDIFF",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATEDIFF(date1, date2)",
                "description": "Returns the number of days between two date or datetime expressions (date1 - date2), ignoring time part.",
                "examples": [
                    "SELECT DATEDIFF('2025-12-31', '2025-12-01');",
                    "SELECT DATEDIFF('2025-01-01', '2024-12-31');",
                    "SELECT DATEDIFF(NULL, '2025-01-01');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATEDIFF(date1, date2)",
                "description": "Returns the number of days between two date or datetime expressions (date1 - date2), ignoring time part.",
                "examples": [
                    "SELECT DATEDIFF('2025-12-31', '2025-12-01');",
                    "SELECT DATEDIFF('2025-01-01', '2024-12-31');",
                    "SELECT DATEDIFF(NULL, '2025-01-01');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 422,
        "database_name": "BUTTERTrans_422",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select datediff(\"1997-11-30 23:59:59.000001\",null); --  DATEDIFF",
        "target_query": "select datediff(\"1997-11-30 23:59:59.000001\",null);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATEDIFF",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATEDIFF(date1, date2)",
                "description": "Returns the number of days between two date or datetime expressions (date1 - date2), ignoring time part.",
                "examples": [
                    "SELECT DATEDIFF('2025-12-31', '2025-12-01');",
                    "SELECT DATEDIFF('2025-01-01', '2024-12-31');",
                    "SELECT DATEDIFF(NULL, '2025-01-01');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATEDIFF(date1, date2)",
                "description": "Returns the number of days between two date or datetime expressions (date1 - date2), ignoring time part.",
                "examples": [
                    "SELECT DATEDIFF('2025-12-31', '2025-12-01');",
                    "SELECT DATEDIFF('2025-01-01', '2024-12-31');",
                    "SELECT DATEDIFF(NULL, '2025-01-01');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 423,
        "database_name": "BUTTERTrans_423",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select makedate(03,1); -- MAKEDATE",
        "target_query": "select makedate(03,1);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MAKEDATE",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 424,
        "database_name": "BUTTERTrans_424",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select makedate('0003',1); -- MAKEDATE",
        "target_query": "select makedate('0003',1);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MAKEDATE",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 425,
        "database_name": "BUTTERTrans_425",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select makedate(1997,1); -- MAKEDATE",
        "target_query": "select makedate(1997,1);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MAKEDATE",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 426,
        "database_name": "BUTTERTrans_426",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select makedate(1997,0); -- MAKEDATE",
        "target_query": "select makedate(1997,0);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MAKEDATE",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 427,
        "database_name": "BUTTERTrans_427",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select makedate(9999,365); -- MAKEDATE",
        "target_query": "select makedate(9999,365);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MAKEDATE",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 428,
        "database_name": "BUTTERTrans_428",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select makedate(9999,366); -- MAKEDATE",
        "target_query": "select makedate(9999,366);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MAKEDATE",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 429,
        "database_name": "BUTTERTrans_429",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select makedate(100,1); -- MAKEDATE",
        "target_query": "select makedate(100,1);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MAKEDATE",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 430,
        "database_name": "BUTTERTrans_430",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select subtime(\"1997-12-31 23:59:59.000001\", \"1 1:1:1.000002\"); -- SUBTIME",
        "target_query": "select subtime(\"1997-12-31 23:59:59.000001\", \"1 1:1:1.000002\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "SUBTIME",
                "start_pos": 7,
                "end_pos": 14
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SUBTIME(expr1, expr2)",
                "description": "Subtracts a time/datetime interval from the given time or datetime.",
                "examples": [
                    "SELECT SUBTIME('12:00:00', '01:30:00');",
                    "SELECT SUBTIME('2025-01-01 10:00:00', '00:00:01');",
                    "SELECT SUBTIME('05:00:00', '05:00:00');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SUBTIME(expr1, expr2)",
                "description": "Same as MySQL; subtracts time or datetime intervals.",
                "examples": [
                    "SELECT SUBTIME('12:00:00', '01:30:00');",
                    "SELECT SUBTIME('2025-01-01 10:00:00', '00:00:01');",
                    "SELECT SUBTIME('05:00:00', '05:00:00');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 431,
        "database_name": "BUTTERTrans_431",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select subtime(\"1997-12-31 23:59:59.999999\", \"1998-01-01 01:01:01.999999\"); -- SUBTIME",
        "target_query": "select subtime(\"1997-12-31 23:59:59.999999\", \"1998-01-01 01:01:01.999999\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "SUBTIME",
                "start_pos": 7,
                "end_pos": 14
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SUBTIME(expr1, expr2)",
                "description": "Subtracts a time/datetime interval from the given time or datetime.",
                "examples": [
                    "SELECT SUBTIME('12:00:00', '01:30:00');",
                    "SELECT SUBTIME('2025-01-01 10:00:00', '00:00:01');",
                    "SELECT SUBTIME('05:00:00', '05:00:00');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SUBTIME(expr1, expr2)",
                "description": "Same as MySQL; subtracts time or datetime intervals.",
                "examples": [
                    "SELECT SUBTIME('12:00:00', '01:30:00');",
                    "SELECT SUBTIME('2025-01-01 10:00:00', '00:00:01');",
                    "SELECT SUBTIME('05:00:00', '05:00:00');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 432,
        "database_name": "BUTTERTrans_432",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select subtime(\"01:00:00.999999\", \"02:00:00.999998\"); -- SUBTIME",
        "target_query": "select subtime(\"01:00:00.999999\", \"02:00:00.999998\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "SUBTIME",
                "start_pos": 7,
                "end_pos": 14
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SUBTIME(expr1, expr2)",
                "description": "Subtracts a time/datetime interval from the given time or datetime.",
                "examples": [
                    "SELECT SUBTIME('12:00:00', '01:30:00');",
                    "SELECT SUBTIME('2025-01-01 10:00:00', '00:00:01');",
                    "SELECT SUBTIME('05:00:00', '05:00:00');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SUBTIME(expr1, expr2)",
                "description": "Same as MySQL; subtracts time or datetime intervals.",
                "examples": [
                    "SELECT SUBTIME('12:00:00', '01:30:00');",
                    "SELECT SUBTIME('2025-01-01 10:00:00', '00:00:01');",
                    "SELECT SUBTIME('05:00:00', '05:00:00');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 433,
        "database_name": "BUTTERTrans_433",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select subtime(\"02:01:01.999999\", \"01:01:01.999999\"); -- SUBTIME",
        "target_query": "select subtime(\"02:01:01.999999\", \"01:01:01.999999\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "SUBTIME",
                "start_pos": 7,
                "end_pos": 14
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SUBTIME(expr1, expr2)",
                "description": "Subtracts a time/datetime interval from the given time or datetime.",
                "examples": [
                    "SELECT SUBTIME('12:00:00', '01:30:00');",
                    "SELECT SUBTIME('2025-01-01 10:00:00', '00:00:01');",
                    "SELECT SUBTIME('05:00:00', '05:00:00');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SUBTIME(expr1, expr2)",
                "description": "Same as MySQL; subtracts time or datetime intervals.",
                "examples": [
                    "SELECT SUBTIME('12:00:00', '01:30:00');",
                    "SELECT SUBTIME('2025-01-01 10:00:00', '00:00:01');",
                    "SELECT SUBTIME('05:00:00', '05:00:00');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 434,
        "database_name": "BUTTERTrans_434",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select timediff(\"1997-01-01 23:59:59.000001\",\"1995-12-31 23:59:59.000002\"); -- TIMEDIFF",
        "target_query": "select timediff(\"1997-01-01 23:59:59.000001\",\"1995-12-31 23:59:59.000002\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMEDIFF",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MySQL that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MariaDB that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 435,
        "database_name": "BUTTERTrans_435",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select timediff(\"1997-12-31 23:59:59.000001\",\"1997-12-30 01:01:01.000002\"); -- TIMEDIFF",
        "target_query": "select timediff(\"1997-12-31 23:59:59.000001\",\"1997-12-30 01:01:01.000002\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMEDIFF",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MySQL that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MariaDB that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 436,
        "database_name": "BUTTERTrans_436",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select timediff(\"1997-12-31 23:59:59.000001\",\"23:59:59.000001\"); -- TIMEDIFF",
        "target_query": "select timediff(\"1997-12-31 23:59:59.000001\",\"23:59:59.000001\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMEDIFF",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MySQL that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MariaDB that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 437,
        "database_name": "BUTTERTrans_437",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select timediff(\"2000:01:01 00:00:00\", \"2000:01:01 00:00:00.000001\"); -- TIMEDIFF",
        "target_query": "select timediff(\"2000:01:01 00:00:00\", \"2000:01:01 00:00:00.000001\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMEDIFF",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MySQL that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MariaDB that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 438,
        "database_name": "BUTTERTrans_438",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select timediff(\"2005-01-11 15:48:49.999999\", \"2005-01-11 15:48:50\"); --  TIMEDIFF",
        "target_query": "select timediff(\"2005-01-11 15:48:49.999999\", \"2005-01-11 15:48:50\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMEDIFF",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MySQL that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MariaDB that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 439,
        "database_name": "BUTTERTrans_439",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select maketime(10,11,12); -- MAKETIME",
        "target_query": "select maketime(10,11,12);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MAKETIME",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MAKETIME(hours, minutes, seconds)",
                "description": "Creates a time value from the provided hours, minutes, and seconds.",
                "examples": [
                    "SELECT MAKETIME(1, 30, 45);",
                    "SELECT MAKETIME(12, 0, 0);",
                    "SELECT MAKETIME(23, 59, 59);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MAKETIME(hours, minutes, seconds)",
                "description": "Creates a time value from the provided hours, minutes, and seconds, just like in MySQL.",
                "examples": [
                    "SELECT MAKETIME(1, 30, 45);",
                    "SELECT MAKETIME(12, 0, 0);",
                    "SELECT MAKETIME(23, 59, 59);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 440,
        "database_name": "BUTTERTrans_440",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select maketime(20,11,12); -- MAKETIME",
        "target_query": "select maketime(20,11,12);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MAKETIME",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MAKETIME(hours, minutes, seconds)",
                "description": "Creates a time value from the provided hours, minutes, and seconds.",
                "examples": [
                    "SELECT MAKETIME(1, 30, 45);",
                    "SELECT MAKETIME(12, 0, 0);",
                    "SELECT MAKETIME(23, 59, 59);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MAKETIME(hours, minutes, seconds)",
                "description": "Creates a time value from the provided hours, minutes, and seconds, just like in MySQL.",
                "examples": [
                    "SELECT MAKETIME(1, 30, 45);",
                    "SELECT MAKETIME(12, 0, 0);",
                    "SELECT MAKETIME(23, 59, 59);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 441,
        "database_name": "BUTTERTrans_441",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select maketime(-25,11,12); -- MAKETIME",
        "target_query": "select maketime(-25,11,12);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MAKETIME",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MAKETIME(hours, minutes, seconds)",
                "description": "Creates a time value from the provided hours, minutes, and seconds.",
                "examples": [
                    "SELECT MAKETIME(1, 30, 45);",
                    "SELECT MAKETIME(12, 0, 0);",
                    "SELECT MAKETIME(23, 59, 59);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MAKETIME(hours, minutes, seconds)",
                "description": "Creates a time value from the provided hours, minutes, and seconds, just like in MySQL.",
                "examples": [
                    "SELECT MAKETIME(1, 30, 45);",
                    "SELECT MAKETIME(12, 0, 0);",
                    "SELECT MAKETIME(23, 59, 59);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 442,
        "database_name": "BUTTERTrans_442",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select timestamp(\"2001-12-01\", \"01:01:01.999999\"); -- TIMESTAMP",
        "target_query": "select timestamp(\"2001-12-01\", \"01:01:01.999999\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMESTAMP",
                "start_pos": 7,
                "end_pos": 16
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MySQL that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MariaDB that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 443,
        "database_name": "BUTTERTrans_443",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select timestamp(\"2001-10-01\", \"01:01:01.000001\"); -- TIMESTAMP",
        "target_query": "select timestamp(\"2001-10-01\", \"01:01:01.000001\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMESTAMP",
                "start_pos": 7,
                "end_pos": 16
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MySQL that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MariaDB that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 444,
        "database_name": "BUTTERTrans_444",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select timestamp(\"2001-12-01\", \"20:01:01\"); -- TIMESTAMP",
        "target_query": "select timestamp(\"2001-12-01\", \"20:01:01\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMESTAMP",
                "start_pos": 7,
                "end_pos": 16
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MySQL that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MariaDB that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 445,
        "database_name": "BUTTERTrans_445",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select timestamp(\"2001-12-01\"); -- TIMESTAMP",
        "target_query": "select timestamp(\"2001-12-01\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMESTAMP",
                "start_pos": 7,
                "end_pos": 16
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MySQL that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MariaDB that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 446,
        "database_name": "BUTTERTrans_446",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select day(\"1997-12-31 23:59:59.000001\"); -- DAY",
        "target_query": "select day(\"1997-12-31 23:59:59.000001\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DAY",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DAY(date_expr)",
                "description": "Returns the day of the month (1-31) from a date or datetime expression.",
                "examples": [
                    "SELECT DAY('2023-10-15');",
                    "SELECT DAY(NOW());",
                    "SELECT DAY(CAST('2024-02-29 12:34:56' AS DATE));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DAY(date_expr)",
                "description": "Extracts the day component (1-31) from a date or datetime.",
                "examples": [
                    "SELECT DAY('2023-10-15');",
                    "SELECT DAY(CURRENT_TIMESTAMP());",
                    "SELECT DAY(STR_TO_DATE('2024-02-29', '%Y-%m-%d'));"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 447,
        "database_name": "BUTTERTrans_447",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select time(\"1997-12-31 23:59:59.000001\"); -- TIME",
        "target_query": "select time(\"1997-12-31 23:59:59.000001\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIME",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME(time-value) | TIME_FORMAT(time-value, format)",
                "description": "The TIME(time-value) function in MySQL returns the time as text formatted as 'HH:MM:SS' from a given time-value. MySQL's TIME function does not support modifiers like in SQLite. To modify the time, you can use functions like DATE_ADD (to add an interval) or TIME_FORMAT (to custom format the time, including fractional seconds).",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time, formatted as 'HH:MM:SS'.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Adds 1 hour to the time, returning '15:16:00'.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME(time-value) | TIME_FORMAT(DATE_ADD(time-value, INTERVAL n unit), '%H:%i:%s')",
                "description": "MySQL's TIME(time-value) function returns the time in 'HH:MM:SS' format. It does not support SQLite-style inline modifiers. Instead, time modification is done via DATE_ADD(), and formatting via TIME_FORMAT(). Fractional seconds (milliseconds) can be included using '%f'.\nParameters: time-value (e.g., NOW(), '14:16:00'), interval modifier (e.g., INTERVAL 1 HOUR).\nReturns: A string formatted as 'HH:MM:SS' or 'HH:MM:SS.SSSSSS'.",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time in 'HH:MM:SS' format.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Returns the time one hour after now.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 448,
        "database_name": "BUTTERTrans_448",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIMEDIFF(t1, t4) As ttt, TIMEDIFF(t2, t3) As qqq,TIMEDIFF(t3, t2) As eee, TIMEDIFF(t2, t4) As rrr from test; -- TIMEDIFF",
        "target_query": "SELECT TIMEDIFF(t1, t4) As ttt, TIMEDIFF(t2, t3) As qqq,TIMEDIFF(t3, t2) As eee, TIMEDIFF(t2, t4) As rrr from test;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMEDIFF",
                "start_pos": 7,
                "end_pos": 15
            },
            {
                "dialect_token": "TIMEDIFF",
                "start_pos": 32,
                "end_pos": 40
            },
            {
                "dialect_token": "TIMEDIFF",
                "start_pos": 56,
                "end_pos": 64
            },
            {
                "dialect_token": "TIMEDIFF",
                "start_pos": 81,
                "end_pos": 89
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MySQL that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MariaDB that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `test`\nColumns:\n(t1, datetime, )\n(t2, time, )\n(t3, time, )\n(t4, datetime, )\n"
        ],
        "target_related_schemas": [
            "Table: `test`\nColumns:\n(t1, datetime, )\n(t2, time, )\n(t3, time, )\n(t4, datetime, )\n"
        ]
    },
    {
        "sql_id": 449,
        "database_name": "BUTTERTrans_449",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select str_to_date(\"2003-01-02 10:11:12.0012\", \"%Y-%m-%d %H:%i:%S.%f\"); -- STR_TO_DATE",
        "target_query": "select str_to_date(\"2003-01-02 10:11:12.0012\", \"%Y-%m-%d %H:%i:%S.%f\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STR_TO_DATE",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Convert the string '09:22' to a TIME type using the format '%H:%i'.",
                "examples": [
                    "SELECT STR_TO_DATE('12:45', '%H:%i');",
                    "SELECT STR_TO_DATE('2000-01-01', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2023-05-06 12:34:56', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STR_TO_DATE('09:22', '%H:%i')",
                "description": "Identical to MySQL, this function is supported in MariaDB for converting strings to date/time formats.",
                "examples": [
                    "SELECT STR_TO_DATE('14:30', '%H:%i');",
                    "SELECT STR_TO_DATE('2015-07-19', '%Y-%m-%d');",
                    "SELECT STR_TO_DATE('2021-11-11 15:50:30', '%Y-%m-%d %H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `test`\nColumns:\n(t1, datetime, )\n(t2, time, )\n(t3, time, )\n(t4, datetime, )\n"
        ],
        "target_related_schemas": [
            "Table: `test`\nColumns:\n(t1, datetime, )\n(t2, time, )\n(t3, time, )\n(t4, datetime, )\n"
        ]
    },
    {
        "sql_id": 450,
        "database_name": "BUTTERTrans_450",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select timediff('2008-09-29 20:10:10','2008-09-30 20:10:10'),time('00:00:00'); -- TIMEDIFF, TIME",
        "target_query": "select timediff('2008-09-29 20:10:10','2008-09-30 20:10:10'),time('00:00:00');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMEDIFF",
                "start_pos": 7,
                "end_pos": 15
            },
            {
                "dialect_token": "TIME",
                "start_pos": 61,
                "end_pos": 65
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MySQL that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            },
            {
                "expression": "TIME(time-value) | TIME_FORMAT(time-value, format)",
                "description": "The TIME(time-value) function in MySQL returns the time as text formatted as 'HH:MM:SS' from a given time-value. MySQL's TIME function does not support modifiers like in SQLite. To modify the time, you can use functions like DATE_ADD (to add an interval) or TIME_FORMAT (to custom format the time, including fractional seconds).",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time, formatted as 'HH:MM:SS'.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Adds 1 hour to the time, returning '15:16:00'.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MariaDB that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            },
            {
                "expression": "TIME(time-value) | TIME_FORMAT(DATE_ADD(time-value, INTERVAL n unit), '%H:%i:%s')",
                "description": "MySQL's TIME(time-value) function returns the time in 'HH:MM:SS' format. It does not support SQLite-style inline modifiers. Instead, time modification is done via DATE_ADD(), and formatting via TIME_FORMAT(). Fractional seconds (milliseconds) can be included using '%f'.\nParameters: time-value (e.g., NOW(), '14:16:00'), interval modifier (e.g., INTERVAL 1 HOUR).\nReturns: A string formatted as 'HH:MM:SS' or 'HH:MM:SS.SSSSSS'.",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time in 'HH:MM:SS' format.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Returns the time one hour after now.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `test`\nColumns:\n(t1, datetime, )\n(t2, time, )\n(t3, time, )\n(t4, datetime, )\n"
        ],
        "target_related_schemas": [
            "Table: `test`\nColumns:\n(t1, datetime, )\n(t2, time, )\n(t3, time, )\n(t4, datetime, )\n"
        ]
    },
    {
        "sql_id": 451,
        "database_name": "BUTTERTrans_451",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select timediff('2008-09-29 20:10:10','2008-09-30 20:10:10')>time('00:00:00'); -- TIMEDIFF, TIME",
        "target_query": "select timediff('2008-09-29 20:10:10','2008-09-30 20:10:10')>time('00:00:00');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMEDIFF",
                "start_pos": 7,
                "end_pos": 15
            },
            {
                "dialect_token": "TIME",
                "start_pos": 61,
                "end_pos": 65
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MySQL that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            },
            {
                "expression": "TIME(time-value) | TIME_FORMAT(time-value, format)",
                "description": "The TIME(time-value) function in MySQL returns the time as text formatted as 'HH:MM:SS' from a given time-value. MySQL's TIME function does not support modifiers like in SQLite. To modify the time, you can use functions like DATE_ADD (to add an interval) or TIME_FORMAT (to custom format the time, including fractional seconds).",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time, formatted as 'HH:MM:SS'.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Adds 1 hour to the time, returning '15:16:00'.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MariaDB that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            },
            {
                "expression": "TIME(time-value) | TIME_FORMAT(DATE_ADD(time-value, INTERVAL n unit), '%H:%i:%s')",
                "description": "MySQL's TIME(time-value) function returns the time in 'HH:MM:SS' format. It does not support SQLite-style inline modifiers. Instead, time modification is done via DATE_ADD(), and formatting via TIME_FORMAT(). Fractional seconds (milliseconds) can be included using '%f'.\nParameters: time-value (e.g., NOW(), '14:16:00'), interval modifier (e.g., INTERVAL 1 HOUR).\nReturns: A string formatted as 'HH:MM:SS' or 'HH:MM:SS.SSSSSS'.",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time in 'HH:MM:SS' format.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Returns the time one hour after now.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `test`\nColumns:\n(t1, datetime, )\n(t2, time, )\n(t3, time, )\n(t4, datetime, )\n"
        ],
        "target_related_schemas": [
            "Table: `test`\nColumns:\n(t1, datetime, )\n(t2, time, )\n(t3, time, )\n(t4, datetime, )\n"
        ]
    },
    {
        "sql_id": 452,
        "database_name": "BUTTERTrans_452",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select timediff('2008-09-29 20:10:10','2008-09-30 20:10:10')<time('00:00:00'); -- TIMEDIFF, TIME",
        "target_query": "select timediff('2008-09-29 20:10:10','2008-09-30 20:10:10')<time('00:00:00');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIMEDIFF",
                "start_pos": 7,
                "end_pos": 15
            },
            {
                "dialect_token": "TIME",
                "start_pos": 61,
                "end_pos": 65
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MySQL that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            },
            {
                "expression": "TIME(time-value) | TIME_FORMAT(time-value, format)",
                "description": "The TIME(time-value) function in MySQL returns the time as text formatted as 'HH:MM:SS' from a given time-value. MySQL's TIME function does not support modifiers like in SQLite. To modify the time, you can use functions like DATE_ADD (to add an interval) or TIME_FORMAT (to custom format the time, including fractional seconds).",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time, formatted as 'HH:MM:SS'.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Adds 1 hour to the time, returning '15:16:00'.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MariaDB that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            },
            {
                "expression": "TIME(time-value) | TIME_FORMAT(DATE_ADD(time-value, INTERVAL n unit), '%H:%i:%s')",
                "description": "MySQL's TIME(time-value) function returns the time in 'HH:MM:SS' format. It does not support SQLite-style inline modifiers. Instead, time modification is done via DATE_ADD(), and formatting via TIME_FORMAT(). Fractional seconds (milliseconds) can be included using '%f'.\nParameters: time-value (e.g., NOW(), '14:16:00'), interval modifier (e.g., INTERVAL 1 HOUR).\nReturns: A string formatted as 'HH:MM:SS' or 'HH:MM:SS.SSSSSS'.",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time in 'HH:MM:SS' format.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Returns the time one hour after now.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `test`\nColumns:\n(t1, datetime, )\n(t2, time, )\n(t3, time, )\n(t4, datetime, )\n"
        ],
        "target_related_schemas": [
            "Table: `test`\nColumns:\n(t1, datetime, )\n(t2, time, )\n(t3, time, )\n(t4, datetime, )\n"
        ]
    },
    {
        "sql_id": 453,
        "database_name": "BUTTERTrans_453",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CAST(time('23:42:12') AS DECIMAL); -- TIME",
        "target_query": "SELECT CAST(time('23:42:12') AS DECIMAL); -- TIME",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIME",
                "start_pos": 12,
                "end_pos": 16
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME(time-value) | TIME_FORMAT(time-value, format)",
                "description": "The TIME(time-value) function in MySQL returns the time as text formatted as 'HH:MM:SS' from a given time-value. MySQL's TIME function does not support modifiers like in SQLite. To modify the time, you can use functions like DATE_ADD (to add an interval) or TIME_FORMAT (to custom format the time, including fractional seconds).",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time, formatted as 'HH:MM:SS'.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Adds 1 hour to the time, returning '15:16:00'.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME(time-value) | TIME_FORMAT(DATE_ADD(time-value, INTERVAL n unit), '%H:%i:%s')",
                "description": "MySQL's TIME(time-value) function returns the time in 'HH:MM:SS' format. It does not support SQLite-style inline modifiers. Instead, time modification is done via DATE_ADD(), and formatting via TIME_FORMAT(). Fractional seconds (milliseconds) can be included using '%f'.\nParameters: time-value (e.g., NOW(), '14:16:00'), interval modifier (e.g., INTERVAL 1 HOUR).\nReturns: A string formatted as 'HH:MM:SS' or 'HH:MM:SS.SSSSSS'.",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time in 'HH:MM:SS' format.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Returns the time one hour after now.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 454,
        "database_name": "BUTTERTrans_454",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT sec_to_time(86399)=TIME('23:59:59'); -- SEC_TO_TIME, TIME",
        "target_query": "SELECT sec_to_time(86399)=TIME('23:59:59'); -- SEC_TO_TIME, TIME",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "SEC_TO_TIME",
                "start_pos": 7,
                "end_pos": 18
            },
            {
                "dialect_token": "TIME",
                "start_pos": 26,
                "end_pos": 30
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SEC_TO_TIME(seconds)",
                "description": "Converts the given number of seconds into a time value in the format HH:MM:SS. Wraps around if seconds exceed 86400.",
                "examples": [
                    "SELECT SEC_TO_TIME(3661); -- Returns '01:01:01'",
                    "SELECT SEC_TO_TIME(3600); -- Returns '01:00:00'",
                    "SELECT SEC_TO_TIME(86400); -- Returns '00:00:00'"
                ]
            },
            {
                "expression": "TIME(time-value) | TIME_FORMAT(time-value, format)",
                "description": "The TIME(time-value) function in MySQL returns the time as text formatted as 'HH:MM:SS' from a given time-value. MySQL's TIME function does not support modifiers like in SQLite. To modify the time, you can use functions like DATE_ADD (to add an interval) or TIME_FORMAT (to custom format the time, including fractional seconds).",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time, formatted as 'HH:MM:SS'.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Adds 1 hour to the time, returning '15:16:00'.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SEC_TO_TIME(seconds)",
                "description": "Converts the given number of seconds into a time value in the format HH:MM:SS. Wraps around if seconds exceed 86400.",
                "examples": [
                    "SELECT SEC_TO_TIME(3661); -- Returns '01:01:01'",
                    "SELECT SEC_TO_TIME(3600); -- Returns '01:00:00'",
                    "SELECT SEC_TO_TIME(86400); -- Returns '00:00:00'"
                ]
            },
            {
                "expression": "TIME(time-value) | TIME_FORMAT(DATE_ADD(time-value, INTERVAL n unit), '%H:%i:%s')",
                "description": "MySQL's TIME(time-value) function returns the time in 'HH:MM:SS' format. It does not support SQLite-style inline modifiers. Instead, time modification is done via DATE_ADD(), and formatting via TIME_FORMAT(). Fractional seconds (milliseconds) can be included using '%f'.\nParameters: time-value (e.g., NOW(), '14:16:00'), interval modifier (e.g., INTERVAL 1 HOUR).\nReturns: A string formatted as 'HH:MM:SS' or 'HH:MM:SS.SSSSSS'.",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time in 'HH:MM:SS' format.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Returns the time one hour after now.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 455,
        "database_name": "BUTTERTrans_455",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT sec_to_time(86399)='23:59:59'; -- SEC_TO_TIME",
        "target_query": "SELECT sec_to_time(86399)='23:59:59'; -- SEC_TO_TIME",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "SEC_TO_TIME",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SEC_TO_TIME(seconds)",
                "description": "Converts the given number of seconds into a time value in the format HH:MM:SS. Wraps around if seconds exceed 86400.",
                "examples": [
                    "SELECT SEC_TO_TIME(3661); -- Returns '01:01:01'",
                    "SELECT SEC_TO_TIME(3600); -- Returns '01:00:00'",
                    "SELECT SEC_TO_TIME(86400); -- Returns '00:00:00'"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SEC_TO_TIME(seconds)",
                "description": "Converts the given number of seconds into a time value in the format HH:MM:SS. Wraps around if seconds exceed 86400.",
                "examples": [
                    "SELECT SEC_TO_TIME(3661); -- Returns '01:01:01'",
                    "SELECT SEC_TO_TIME(3600); -- Returns '01:00:00'",
                    "SELECT SEC_TO_TIME(86400); -- Returns '00:00:00'"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 456,
        "database_name": "BUTTERTrans_456",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT time(sec_to_time(86399))=TIME('23:59:59'); -- TIME, SEC_TO_TIME",
        "target_query": "SELECT time(sec_to_time(86399))=TIME('23:59:59'); -- TIME, SEC_TO_TIME",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIME",
                "start_pos": 7,
                "end_pos": 11
            },
            {
                "dialect_token": "SEC_TO_TIME",
                "start_pos": 12,
                "end_pos": 23
            },
            {
                "dialect_token": "TIME",
                "start_pos": 32,
                "end_pos": 36
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME(time-value) | TIME_FORMAT(time-value, format)",
                "description": "The TIME(time-value) function in MySQL returns the time as text formatted as 'HH:MM:SS' from a given time-value. MySQL's TIME function does not support modifiers like in SQLite. To modify the time, you can use functions like DATE_ADD (to add an interval) or TIME_FORMAT (to custom format the time, including fractional seconds).",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time, formatted as 'HH:MM:SS'.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Adds 1 hour to the time, returning '15:16:00'.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            },
            {
                "expression": "SEC_TO_TIME(seconds)",
                "description": "Converts the given number of seconds into a time value in the format HH:MM:SS. Wraps around if seconds exceed 86400.",
                "examples": [
                    "SELECT SEC_TO_TIME(3661); -- Returns '01:01:01'",
                    "SELECT SEC_TO_TIME(3600); -- Returns '01:00:00'",
                    "SELECT SEC_TO_TIME(86400); -- Returns '00:00:00'"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME(time-value) | TIME_FORMAT(DATE_ADD(time-value, INTERVAL n unit), '%H:%i:%s')",
                "description": "MySQL's TIME(time-value) function returns the time in 'HH:MM:SS' format. It does not support SQLite-style inline modifiers. Instead, time modification is done via DATE_ADD(), and formatting via TIME_FORMAT(). Fractional seconds (milliseconds) can be included using '%f'.\nParameters: time-value (e.g., NOW(), '14:16:00'), interval modifier (e.g., INTERVAL 1 HOUR).\nReturns: A string formatted as 'HH:MM:SS' or 'HH:MM:SS.SSSSSS'.",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time in 'HH:MM:SS' format.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Returns the time one hour after now.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            },
            {
                "expression": "SEC_TO_TIME(seconds)",
                "description": "Converts the given number of seconds into a time value in the format HH:MM:SS. Wraps around if seconds exceed 86400.",
                "examples": [
                    "SELECT SEC_TO_TIME(3661); -- Returns '01:01:01'",
                    "SELECT SEC_TO_TIME(3600); -- Returns '01:00:00'",
                    "SELECT SEC_TO_TIME(86400); -- Returns '00:00:00'"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 457,
        "database_name": "BUTTERTrans_457",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT maketime(1,0,1)='01:00:01'; -- MAKETIME",
        "target_query": "SELECT maketime(1,0,1)='01:00:01'; -- MAKETIME",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MAKETIME",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MAKETIME(hours, minutes, seconds)",
                "description": "Creates a time value from the provided hours, minutes, and seconds.",
                "examples": [
                    "SELECT MAKETIME(1, 30, 45);",
                    "SELECT MAKETIME(12, 0, 0);",
                    "SELECT MAKETIME(23, 59, 59);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MAKETIME(hours, minutes, seconds)",
                "description": "Creates a time value from the provided hours, minutes, and seconds, just like in MySQL.",
                "examples": [
                    "SELECT MAKETIME(1, 30, 45);",
                    "SELECT MAKETIME(12, 0, 0);",
                    "SELECT MAKETIME(23, 59, 59);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 458,
        "database_name": "BUTTERTrans_458",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TIME(maketime(1,0,1))=CAST('01:00:01' AS TIME); -- TIME, MAKETIME",
        "target_query": "SELECT TIME(maketime(1,0,1))=CAST('01:00:01' AS TIME); -- TIME, MAKETIME",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TIME",
                "start_pos": 7,
                "end_pos": 11
            },
            {
                "dialect_token": "MAKETIME",
                "start_pos": 12,
                "end_pos": 20
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME(time-value) | TIME_FORMAT(time-value, format)",
                "description": "The TIME(time-value) function in MySQL returns the time as text formatted as 'HH:MM:SS' from a given time-value. MySQL's TIME function does not support modifiers like in SQLite. To modify the time, you can use functions like DATE_ADD (to add an interval) or TIME_FORMAT (to custom format the time, including fractional seconds).",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time, formatted as 'HH:MM:SS'.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Adds 1 hour to the time, returning '15:16:00'.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            },
            {
                "expression": "MAKETIME(hours, minutes, seconds)",
                "description": "Creates a time value from the provided hours, minutes, and seconds.",
                "examples": [
                    "SELECT MAKETIME(1, 30, 45);",
                    "SELECT MAKETIME(12, 0, 0);",
                    "SELECT MAKETIME(23, 59, 59);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME(time-value) | TIME_FORMAT(DATE_ADD(time-value, INTERVAL n unit), '%H:%i:%s')",
                "description": "MySQL's TIME(time-value) function returns the time in 'HH:MM:SS' format. It does not support SQLite-style inline modifiers. Instead, time modification is done via DATE_ADD(), and formatting via TIME_FORMAT(). Fractional seconds (milliseconds) can be included using '%f'.\nParameters: time-value (e.g., NOW(), '14:16:00'), interval modifier (e.g., INTERVAL 1 HOUR).\nReturns: A string formatted as 'HH:MM:SS' or 'HH:MM:SS.SSSSSS'.",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time in 'HH:MM:SS' format.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Returns the time one hour after now.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            },
            {
                "expression": "MAKETIME(hours, minutes, seconds)",
                "description": "Creates a time value from the provided hours, minutes, and seconds, just like in MySQL.",
                "examples": [
                    "SELECT MAKETIME(1, 30, 45);",
                    "SELECT MAKETIME(12, 0, 0);",
                    "SELECT MAKETIME(23, 59, 59);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 459,
        "database_name": "BUTTERTrans_459",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT maketime(1,0,1)=CAST('01:00:01' AS TIME); -- MAKETIME",
        "target_query": "SELECT maketime(1,0,1)=CAST('01:00:01' AS TIME); -- MAKETIME",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MAKETIME",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MAKETIME(hours, minutes, seconds)",
                "description": "Creates a time value from the provided hours, minutes, and seconds.",
                "examples": [
                    "SELECT MAKETIME(1, 30, 45);",
                    "SELECT MAKETIME(12, 0, 0);",
                    "SELECT MAKETIME(23, 59, 59);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MAKETIME(hours, minutes, seconds)",
                "description": "Creates a time value from the provided hours, minutes, and seconds, just like in MySQL.",
                "examples": [
                    "SELECT MAKETIME(1, 30, 45);",
                    "SELECT MAKETIME(12, 0, 0);",
                    "SELECT MAKETIME(23, 59, 59);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 460,
        "database_name": "BUTTERTrans_460",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT maketime(1,0,1)=CAST('01:00:02' AS TIME); -- MAKETIME",
        "target_query": "SELECT maketime(1,0,1)=CAST('01:00:02' AS TIME);-- MAKETIME",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MAKETIME",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MAKETIME(hours, minutes, seconds)",
                "description": "Creates a time value from the provided hours, minutes, and seconds.",
                "examples": [
                    "SELECT MAKETIME(1, 30, 45);",
                    "SELECT MAKETIME(12, 0, 0);",
                    "SELECT MAKETIME(23, 59, 59);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MAKETIME(hours, minutes, seconds)",
                "description": "Creates a time value from the provided hours, minutes, and seconds, just like in MySQL.",
                "examples": [
                    "SELECT MAKETIME(1, 30, 45);",
                    "SELECT MAKETIME(12, 0, 0);",
                    "SELECT MAKETIME(23, 59, 59);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 461,
        "database_name": "BUTTERTrans_461",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select elt(2,1),field(NULL,\"a\",\"b\",\"c\"); -- ELT, FIELD",
        "target_query": "select elt(2,1),field(NULL,\"a\",\"b\",\"c\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ELT",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "FIELD",
                "start_pos": 16,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ELT(2, 'apple', 'banana', 'cherry')",
                "description": "Returns the N-th element from the list, where N is the first argument.",
                "examples": [
                    "SELECT ELT(2, 'apple', 'banana', 'cherry');  -- Returns 'banana'",
                    "SELECT ELT(1, 'red', 'green', 'blue');  -- Returns 'red'",
                    "SELECT ELT(3, 'dog', 'cat', 'bird');  -- Returns 'bird'"
                ]
            },
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the index (1-based) of the first value in the list that is equal to 'val'. Returns 0 if no match is found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "ELT(2, 'apple', 'banana', 'cherry')",
                "description": "Returns the N-th element from the list, where N is the first argument.",
                "examples": [
                    "SELECT ELT(2, 'apple', 'banana', 'cherry');  -- Returns 'banana'",
                    "SELECT ELT(1, 'red', 'green', 'blue');  -- Returns 'red'",
                    "SELECT ELT(3, 'dog', 'cat', 'bird');  -- Returns 'bird'"
                ]
            },
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the position of 'val' in the list (1-based index). Returns 0 if 'val' is not found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 462,
        "database_name": "BUTTERTrans_462",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select field(\"b\",\"a\",NULL),field(1,0,NULL)+0,field(1.0,0.0,NULL)+0.0,field(1.0e1,0.0e1,NULL)+0.0e1; -- FIELD",
        "target_query": "select field(\"b\",\"a\",NULL),field(1,0,NULL)+0,field(1.0,0.0,NULL)+0.0,field(1.0e1,0.0e1,NULL)+0.0e1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "FIELD",
                "start_pos": 7,
                "end_pos": 12
            },
            {
                "dialect_token": "FIELD",
                "start_pos": 27,
                "end_pos": 32
            },
            {
                "dialect_token": "FIELD",
                "start_pos": 45,
                "end_pos": 50
            },
            {
                "dialect_token": "FIELD",
                "start_pos": 69,
                "end_pos": 74
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the index (1-based) of the first value in the list that is equal to 'val'. Returns 0 if no match is found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the position of 'val' in the list (1-based index). Returns 0 if 'val' is not found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 463,
        "database_name": "BUTTERTrans_463",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select field(NULL,\"a\",NULL),field(NULL,0,NULL)+0,field(NULL,0.0,NULL)+0.0,field(NULL,0.0e1,NULL)+0.0e1; -- FIELD",
        "target_query": "select field(NULL,\"a\",NULL),field(NULL,0,NULL)+0,field(NULL,0.0,NULL)+0.0,field(NULL,0.0e1,NULL)+0.0e1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "FIELD",
                "start_pos": 7,
                "end_pos": 12
            },
            {
                "dialect_token": "FIELD",
                "start_pos": 28,
                "end_pos": 33
            },
            {
                "dialect_token": "FIELD",
                "start_pos": 49,
                "end_pos": 54
            },
            {
                "dialect_token": "FIELD",
                "start_pos": 74,
                "end_pos": 79
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the index (1-based) of the first value in the list that is equal to 'val'. Returns 0 if no match is found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the position of 'val' in the list (1-based index). Returns 0 if 'val' is not found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 464,
        "database_name": "BUTTERTrans_464",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select one.id, elt(two.val,'one','two') from t1 one, t2 two where two.id=one.id; -- ELT",
        "target_query": "select one.id, elt(two.val,'one','two') from t1 one, t2 two where two.id=one.id;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ELT",
                "start_pos": 15,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ELT(2, 'apple', 'banana', 'cherry')",
                "description": "Returns the N-th element from the list, where N is the first argument.",
                "examples": [
                    "SELECT ELT(2, 'apple', 'banana', 'cherry');  -- Returns 'banana'",
                    "SELECT ELT(1, 'red', 'green', 'blue');  -- Returns 'red'",
                    "SELECT ELT(3, 'dog', 'cat', 'bird');  -- Returns 'bird'"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "ELT(2, 'apple', 'banana', 'cherry')",
                "description": "Returns the N-th element from the list, where N is the first argument.",
                "examples": [
                    "SELECT ELT(2, 'apple', 'banana', 'cherry');  -- Returns 'banana'",
                    "SELECT ELT(1, 'red', 'green', 'blue');  -- Returns 'red'",
                    "SELECT ELT(3, 'dog', 'cat', 'bird');  -- Returns 'bird'"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n",
            "Table: `t2`\nColumns:\n(id, int, PRI)\n(val, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int(10), PRI)\n",
            "Table: `t2`\nColumns:\n(id, int(10), PRI)\n(val, int(10), )\n"
        ]
    },
    {
        "sql_id": 465,
        "database_name": "BUTTERTrans_465",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select one.id, elt(two.val,'one','two') from t1 one, t2 two where two.id=one.id order by one.id; -- ELT",
        "target_query": "select one.id, elt(two.val,'one','two') from t1 one, t2 two where two.id=one.id order by one.id;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ELT",
                "start_pos": 15,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ELT(2, 'apple', 'banana', 'cherry')",
                "description": "Returns the N-th element from the list, where N is the first argument.",
                "examples": [
                    "SELECT ELT(2, 'apple', 'banana', 'cherry');  -- Returns 'banana'",
                    "SELECT ELT(1, 'red', 'green', 'blue');  -- Returns 'red'",
                    "SELECT ELT(3, 'dog', 'cat', 'bird');  -- Returns 'bird'"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "ELT(2, 'apple', 'banana', 'cherry')",
                "description": "Returns the N-th element from the list, where N is the first argument.",
                "examples": [
                    "SELECT ELT(2, 'apple', 'banana', 'cherry');  -- Returns 'banana'",
                    "SELECT ELT(1, 'red', 'green', 'blue');  -- Returns 'red'",
                    "SELECT ELT(3, 'dog', 'cat', 'bird');  -- Returns 'bird'"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n",
            "Table: `t2`\nColumns:\n(id, int, PRI)\n(val, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int(10), PRI)\n",
            "Table: `t2`\nColumns:\n(id, int(10), PRI)\n(val, int(10), )\n"
        ]
    },
    {
        "sql_id": 466,
        "database_name": "BUTTERTrans_466",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CONCAT('\"',CONCAT_WS('\";\"',title,prio,category,program,bugdesc,created,modified,bugstatus,submitter),'\"') FROM t1; -- CONCAT, CONCAT_WS",
        "target_query": "SELECT CONCAT('\"',CONCAT_WS('\";\"',title,prio,category,program,bugdesc,created,modified,bugstatus,submitter),'\"') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "CONCAT_WS",
                "start_pos": 18,
                "end_pos": 27
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "CONCAT_WS(separator, str1, str2, ...)",
                "description": "Concatenates multiple strings with the specified separator. If any argument is NULL, it is ignored.",
                "examples": [
                    "SELECT CONCAT_WS(',', 'apple', 'banana', 'cherry');",
                    "SELECT CONCAT_WS('-', 'hello', 'world');",
                    "SELECT CONCAT_WS(' ', 'this', NULL, 'is', 'a', 'test');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "CONCAT_WS(separator, str1, str2, ...)",
                "description": "Concatenates strings using a separator and ignores NULL values.",
                "examples": [
                    "SELECT CONCAT_WS(',', 'apple', 'banana', 'cherry');",
                    "SELECT CONCAT_WS('-', 'hello', 'world');",
                    "SELECT CONCAT_WS(' ', 'this', NULL, 'is', 'a', 'test');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, )\n(title, varchar(255), )\n(prio, int, )\n(category, int, )\n(program, int, )\n(bugdesc, text, )\n(created, datetime, )\n(modified, timestamp, )\n(bugstatus, int, )\n(submitter, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int(10), )\n(title, varchar(255), )\n(prio, int(10), )\n(category, int(10), )\n(program, int(10), )\n(bugdesc, text, )\n(created, datetime, )\n(modified, timestamp, )\n(bugstatus, int(10), )\n(submitter, int(10), )\n"
        ]
    },
    {
        "sql_id": 467,
        "database_name": "BUTTERTrans_467",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CONCAT('\"',CONCAT_WS('\";\"',title,prio,category,program,bugstatus,submitter),'\"') FROM t1; -- CONCAT, CONCAT_WS",
        "target_query": "SELECT CONCAT('\"',CONCAT_WS('\";\"',title,prio,category,program,bugstatus,submitter),'\"') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "CONCAT_WS",
                "start_pos": 18,
                "end_pos": 27
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "CONCAT_WS(separator, str1, str2, ...)",
                "description": "Concatenates multiple strings with the specified separator. If any argument is NULL, it is ignored.",
                "examples": [
                    "SELECT CONCAT_WS(',', 'apple', 'banana', 'cherry');",
                    "SELECT CONCAT_WS('-', 'hello', 'world');",
                    "SELECT CONCAT_WS(' ', 'this', NULL, 'is', 'a', 'test');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "CONCAT_WS(separator, str1, str2, ...)",
                "description": "Concatenates strings using a separator and ignores NULL values.",
                "examples": [
                    "SELECT CONCAT_WS(',', 'apple', 'banana', 'cherry');",
                    "SELECT CONCAT_WS('-', 'hello', 'world');",
                    "SELECT CONCAT_WS(' ', 'this', NULL, 'is', 'a', 'test');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, )\n(title, varchar(255), )\n(prio, int, )\n(category, int, )\n(program, int, )\n(bugdesc, text, )\n(created, datetime, )\n(modified, timestamp, )\n(bugstatus, int, )\n(submitter, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int(10), )\n(title, varchar(255), )\n(prio, int(10), )\n(category, int(10), )\n(program, int(10), )\n(bugdesc, text, )\n(created, datetime, )\n(modified, timestamp, )\n(bugstatus, int(10), )\n(submitter, int(10), )\n"
        ]
    },
    {
        "sql_id": 468,
        "database_name": "BUTTERTrans_468",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CONCAT_WS('\";\"',title,prio,category,program,bugdesc,created,modified,bugstatus,submitter) FROM t1; -- CONCAT_WS",
        "target_query": "SELECT CONCAT_WS('\";\"',title,prio,category,program,bugdesc,created,modified,bugstatus,submitter) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT_WS",
                "start_pos": 7,
                "end_pos": 16
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT_WS(separator, str1, str2, ...)",
                "description": "Concatenates multiple strings with the specified separator. If any argument is NULL, it is ignored.",
                "examples": [
                    "SELECT CONCAT_WS(',', 'apple', 'banana', 'cherry');",
                    "SELECT CONCAT_WS('-', 'hello', 'world');",
                    "SELECT CONCAT_WS(' ', 'this', NULL, 'is', 'a', 'test');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT_WS(separator, str1, str2, ...)",
                "description": "Concatenates strings using a separator and ignores NULL values.",
                "examples": [
                    "SELECT CONCAT_WS(',', 'apple', 'banana', 'cherry');",
                    "SELECT CONCAT_WS('-', 'hello', 'world');",
                    "SELECT CONCAT_WS(' ', 'this', NULL, 'is', 'a', 'test');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, )\n(title, varchar(255), )\n(prio, int, )\n(category, int, )\n(program, int, )\n(bugdesc, text, )\n(created, datetime, )\n(modified, timestamp, )\n(bugstatus, int, )\n(submitter, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int(10), )\n(title, varchar(255), )\n(prio, int(10), )\n(category, int(10), )\n(program, int(10), )\n(bugdesc, text, )\n(created, datetime, )\n(modified, timestamp, )\n(bugstatus, int(10), )\n(submitter, int(10), )\n"
        ]
    },
    {
        "sql_id": 469,
        "database_name": "BUTTERTrans_469",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT CONCAT(\"</a>\",RPAD(\"\",(55-LENGTH(title)),\".\")) from t1; -- CONCAT, RPAD, LENGTH",
        "target_query": "SELECT CONCAT(\"</a>\",RPAD(\"\",(55-LENGTH(title)),\".\")) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "RPAD",
                "start_pos": 21,
                "end_pos": 25
            },
            {
                "dialect_token": "LENGTH",
                "start_pos": 33,
                "end_pos": 39
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            },
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            },
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            },
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(title, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(title, text, )\n"
        ]
    },
    {
        "sql_id": 470,
        "database_name": "BUTTERTrans_470",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select 0=0,1>0,1>=1,1<0,1<=0,1!=0,strcmp(\"abc\",\"abcd\"),strcmp(\"b\",\"a\"),strcmp(\"a\",\"a\") ; -- STRCMP",
        "target_query": "select 0=0,1>0,1>=1,1<0,1<=0,1!=0,strcmp(\"abc\",\"abcd\"),strcmp(\"b\",\"a\"),strcmp(\"a\",\"a\") ;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STRCMP",
                "start_pos": 34,
                "end_pos": 40
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 55,
                "end_pos": 61
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 71,
                "end_pos": 77
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 471,
        "database_name": "BUTTERTrans_471",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT GREATEST(d,d) FROM t1 WHERE k=2; -- GREATEST",
        "target_query": "SELECT GREATEST(d,d) FROM t1 WHERE k=2;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(d, varchar(6), )\n(k, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(d, varchar(6), )\n(k, int(11), )\n"
        ]
    },
    {
        "sql_id": 472,
        "database_name": "BUTTERTrans_472",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select (12 mod 1) <=> null  as 'col'; -- MOD",
        "target_query": "SELECT (12 MOD 1) <=> NULL AS 'col'; -- Expected output for col: 1 (True)",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MOD",
                "start_pos": 11,
                "end_pos": 14
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MOD(N, M) \u6216 N % M",
                "description": "Returns the remainder of N divided by M. Returns NULL if M = 0.",
                "examples": [
                    "SELECT MOD(10, 3);",
                    "SELECT 10 % 3;",
                    "SELECT MOD(5, 0);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MOD(N, M) \u6216 N % M",
                "description": "Returns the modulo of two numbers. NULL if M = 0.",
                "examples": [
                    "SELECT MOD(20, 6);",
                    "SELECT 20 % 6;",
                    "SELECT MOD(4, 0);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 473,
        "database_name": "BUTTERTrans_473",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select (12 mod 1) is null   as 'col'; -- MOD",
        "target_query": "SELECT (12 MOD 1) IS NULL AS 'col';   -- Expected output for col: 1 (True)",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MOD",
                "start_pos": 11,
                "end_pos": 14
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MOD(N, M) \u6216 N % M",
                "description": "Returns the remainder of N divided by M. Returns NULL if M = 0.",
                "examples": [
                    "SELECT MOD(10, 3);",
                    "SELECT 10 % 3;",
                    "SELECT MOD(5, 0);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MOD(N, M) \u6216 N % M",
                "description": "Returns the modulo of two numbers. NULL if M = 0.",
                "examples": [
                    "SELECT MOD(20, 6);",
                    "SELECT 20 % 6;",
                    "SELECT MOD(4, 0);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 474,
        "database_name": "BUTTERTrans_474",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select mod(12.0, 1)         as 'col'; -- MOD",
        "target_query": "SELECT MOD(12.0, 1) AS 'col';       -- Expected output for col: NULL",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MOD",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MOD(N, M) \u6216 N % M",
                "description": "Returns the remainder of N divided by M. Returns NULL if M = 0.",
                "examples": [
                    "SELECT MOD(10, 3);",
                    "SELECT 10 % 3;",
                    "SELECT MOD(5, 0);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MOD(N, M) \u6216 N % M",
                "description": "Returns the modulo of two numbers. NULL if M = 0.",
                "examples": [
                    "SELECT MOD(20, 6);",
                    "SELECT 20 % 6;",
                    "SELECT MOD(4, 0);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 475,
        "database_name": "BUTTERTrans_475",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select mod(12, 1.0)         as 'col'; -- MOD",
        "target_query": "SELECT MOD(12, 1.0) AS 'col';       -- Expected output for col: NULL",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "MOD",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MOD(N, M) \u6216 N % M",
                "description": "Returns the remainder of N divided by M. Returns NULL if M = 0.",
                "examples": [
                    "SELECT MOD(10, 3);",
                    "SELECT 10 % 3;",
                    "SELECT MOD(5, 0);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MOD(N, M) \u6216 N % M",
                "description": "Returns the modulo of two numbers. NULL if M = 0.",
                "examples": [
                    "SELECT MOD(20, 6);",
                    "SELECT 20 % 6;",
                    "SELECT MOD(4, 0);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 476,
        "database_name": "BUTTERTrans_476",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT greatest( 123456789 , 234567890 ) as g; -- GREATEST",
        "target_query": "SELECT greatest( 123456789 , 234567890 ) as g;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 477,
        "database_name": "BUTTERTrans_477",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT least   ( 123456789 , 234567890 ) as l; -- LEAST",
        "target_query": "SELECT least   ( 123456789 , 234567890 ) as l;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LEAST",
                "start_pos": 7,
                "end_pos": 12
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 478,
        "database_name": "BUTTERTrans_478",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT greatest (123456789, -1, 234567890 ) as g; -- GREATEST",
        "target_query": "SELECT greatest (123456789, -1, 234567890 ) as g;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 479,
        "database_name": "BUTTERTrans_479",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT least    (123456789, -1, 234567890 ) as l; -- LEAST",
        "target_query": "SELECT least    (123456789, -1, 234567890 ) as l;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LEAST",
                "start_pos": 7,
                "end_pos": 12
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 480,
        "database_name": "BUTTERTrans_480",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "CREATE TABLE t1 AS SELECT greatest(-1, 123456789); -- GREATEST",
        "target_query": "CREATE TABLE t1 AS SELECT greatest(-1, 123456789);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 26,
                "end_pos": 34
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 AS SELECT greatest(-1, 123456789); -- GREATEST"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 AS SELECT greatest(-1, 123456789);"
        ]
    },
    {
        "sql_id": 481,
        "database_name": "BUTTERTrans_481",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT c1, LENGTH(c1) FROM h; -- LENGTH",
        "target_query": "SELECT c1, LENGTH(c1) FROM h; -- LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 11,
                "end_pos": 17
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ]
    },
    {
        "sql_id": 482,
        "database_name": "BUTTERTrans_482",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT c1, LPAD(c1, 20, ' ') FROM h; -- LPAD",
        "target_query": "SELECT c1, LPAD(c1, 20, ' ') FROM h; -- LPAD",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LPAD",
                "start_pos": 11,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ]
    },
    {
        "sql_id": 483,
        "database_name": "BUTTERTrans_483",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD",
        "target_query": "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "RPAD",
                "start_pos": 11,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ]
    },
    {
        "sql_id": 484,
        "database_name": "BUTTERTrans_484",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT INSTR(c1, 'h') FROM h; -- INSTR",
        "target_query": "SELECT INSTR(c1, 'h') FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "INSTR",
                "start_pos": 7,
                "end_pos": 12
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Same as MySQL. Returns the 1-based index of substr in str, or 0 if not found.",
                "examples": [
                    "SELECT INSTR('hello', 'e');     -- Returns 2",
                    "SELECT INSTR('hello', 'x');     -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `pagg_tab_ml`\nColumns:\n(a, integer, )\n(b, integer, )\n(c, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `pagg_tab_ml`\nColumns:\n(a, int(11), )\n(b, int(11), )\n(c, text, )\n"
        ]
    },
    {
        "sql_id": 485,
        "database_name": "BUTTERTrans_485",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT INSTR(c1, '') FROM h; -- INSTR",
        "target_query": "SELECT INSTR(c1, '') FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "INSTR",
                "start_pos": 7,
                "end_pos": 12
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Same as MySQL. Returns the 1-based index of substr in str, or 0 if not found.",
                "examples": [
                    "SELECT INSTR('hello', 'e');     -- Returns 2",
                    "SELECT INSTR('hello', 'x');     -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ]
    },
    {
        "sql_id": 486,
        "database_name": "BUTTERTrans_486",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT INSTR(c1, '52') FROM h; -- INSTR",
        "target_query": "SELECT INSTR(c1, '52') FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "INSTR",
                "start_pos": 7,
                "end_pos": 12
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Same as MySQL. Returns the 1-based index of substr in str, or 0 if not found.",
                "examples": [
                    "SELECT INSTR('hello', 'e');     -- Returns 2",
                    "SELECT INSTR('hello', 'x');     -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ]
    },
    {
        "sql_id": 487,
        "database_name": "BUTTERTrans_487",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT INSTR(c1, '54') FROM h; -- INSTR",
        "target_query": "SELECT INSTR(c1, '54') FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "INSTR",
                "start_pos": 7,
                "end_pos": 12
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Same as MySQL. Returns the 1-based index of substr in str, or 0 if not found.",
                "examples": [
                    "SELECT INSTR('hello', 'e');     -- Returns 2",
                    "SELECT INSTR('hello', 'x');     -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ]
    },
    {
        "sql_id": 488,
        "database_name": "BUTTERTrans_488",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT INSTR(c1, '31') FROM h; -- INSTR",
        "target_query": "SELECT INSTR(c1, '31') FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "INSTR",
                "start_pos": 7,
                "end_pos": 12
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Same as MySQL. Returns the 1-based index of substr in str, or 0 if not found.",
                "examples": [
                    "SELECT INSTR('hello', 'e');     -- Returns 2",
                    "SELECT INSTR('hello', 'x');     -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ]
    },
    {
        "sql_id": 489,
        "database_name": "BUTTERTrans_489",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT c1, TRIM(c1) FROM h; -- TRIM",
        "target_query": "SELECT c1, TRIM(c1) FROM h; -- TRIM",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TRIM",
                "start_pos": 11,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function in MariaDB behaves exactly as in MySQL, removing specified characters or spaces from the beginning or end of the string.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ]
    },
    {
        "sql_id": 490,
        "database_name": "BUTTERTrans_490",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT GREATEST('11', '5', '2'); -- GREATEST",
        "target_query": "SELECT GREATEST('11', '5', '2');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 491,
        "database_name": "BUTTERTrans_491",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT GREATEST('11', 5, 2); -- GREATEST",
        "target_query": "SELECT GREATEST('11', 5, 2);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 492,
        "database_name": "BUTTERTrans_492",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT GREATEST(11, 5, 2); -- GREATEST",
        "target_query": "SELECT GREATEST(11, 5, 2);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 493,
        "database_name": "BUTTERTrans_493",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LEAST('11', '5', '2'); -- LEAST",
        "target_query": "SELECT LEAST('11', '5', '2');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LEAST",
                "start_pos": 7,
                "end_pos": 12
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 494,
        "database_name": "BUTTERTrans_494",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LEAST('11', 5, 2); -- LEAST",
        "target_query": "SELECT LEAST('11', 5, 2);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LEAST",
                "start_pos": 7,
                "end_pos": 12
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 495,
        "database_name": "BUTTERTrans_495",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LEAST(11, 5, 2); -- LEAST",
        "target_query": "SELECT LEAST(11, 5, 2);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LEAST",
                "start_pos": 7,
                "end_pos": 12
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 496,
        "database_name": "BUTTERTrans_496",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT GREATEST('11', '5', '2') + 0; -- GREATEST",
        "target_query": "SELECT GREATEST('11', '5', '2') + 0;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 497,
        "database_name": "BUTTERTrans_497",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT GREATEST('11', 5, 2) + 0; -- GREATEST",
        "target_query": "SELECT GREATEST('11', 5, 2) + 0;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 498,
        "database_name": "BUTTERTrans_498",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT GREATEST(11, 5, 2) + 0; -- GREATEST",
        "target_query": "SELECT GREATEST(11, 5, 2) + 0;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 499,
        "database_name": "BUTTERTrans_499",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT GREATEST('11', '5', '2') + 0.00; -- GREATEST",
        "target_query": "SELECT GREATEST('11', '5', '2') + 0.00;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 500,
        "database_name": "BUTTERTrans_500",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT GREATEST('11', 5, 2) + 0.00; -- GREATEST",
        "target_query": "SELECT GREATEST('11', 5, 2) + 0.00;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 501,
        "database_name": "BUTTERTrans_501",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT GREATEST(11, 5, 2) + 0.00; -- GREATEST",
        "target_query": "SELECT GREATEST(11, 5, 2) + 0.00;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 502,
        "database_name": "BUTTERTrans_502",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT greatest(18446744073709551615, NULL)FROM t0017; -- GREATEST",
        "target_query": "SELECT greatest(18446744073709551615, NULL)FROM t0017;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0017`\nColumns:\n(c0002, bigint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t0017`\nColumns:\n(c0002, bigint(20), )\n"
        ]
    },
    {
        "sql_id": 503,
        "database_name": "BUTTERTrans_503",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM t1 WHERE (GREATEST(c1, c2) = 42) AND (c2 = 1); -- GREATEST",
        "target_query": "SELECT * FROM t1 WHERE (GREATEST(c1, c2) = 42) AND (c2 = 1);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GREATEST",
                "start_pos": 24,
                "end_pos": 32
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, int, )\n(c2, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, int(11), )\n(c2, int(11), )\n"
        ]
    },
    {
        "sql_id": 504,
        "database_name": "BUTTERTrans_504",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT SUM(LEAST(a, b)) FROM t1; -- LEAST",
        "target_query": "SELECT SUM(LEAST(a, b)) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LEAST",
                "start_pos": 11,
                "end_pos": 16
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, double, )\n(b, double, )\n",
            "Table: `t2`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, double, )\n(b, double, )\n",
            "Table: `t2`\nColumns:\n(a, int(11), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 505,
        "database_name": "BUTTERTrans_505",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT SUM(LEAST(a, b)) FROM t2; -- LEAST",
        "target_query": "SELECT SUM(LEAST(a, b)) FROM t2;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LEAST",
                "start_pos": 11,
                "end_pos": 16
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, double, )\n(b, double, )\n",
            "Table: `t2`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, double, )\n(b, double, )\n",
            "Table: `t2`\nColumns:\n(a, int(11), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 506,
        "database_name": "BUTTERTrans_506",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select from_unixtime(123456789); -- FROM_UNIXTIME",
        "target_query": "select from_unixtime(123456789);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "FROM_UNIXTIME",
                "start_pos": 7,
                "end_pos": 20
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 507,
        "database_name": "BUTTERTrans_507",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select from_unixtime(234567890); -- FROM_UNIXTIME",
        "target_query": "select from_unixtime(234567890);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "FROM_UNIXTIME",
                "start_pos": 7,
                "end_pos": 20
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 508,
        "database_name": "BUTTERTrans_508",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select from_unixtime(1); -- FROM_UNIXTIME",
        "target_query": "select from_unixtime(1);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "FROM_UNIXTIME",
                "start_pos": 7,
                "end_pos": 20
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 509,
        "database_name": "BUTTERTrans_509",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select unix_timestamp(from_unixtime(123456789)); -- UNIX_TIMESTAMP, FROM_UNIXTIME",
        "target_query": "select unix_timestamp(from_unixtime(123456789));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 7,
                "end_pos": 21
            },
            {
                "dialect_token": "FROM_UNIXTIME",
                "start_pos": 22,
                "end_pos": 35
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 510,
        "database_name": "BUTTERTrans_510",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select unix_timestamp(from_unixtime(234567890)); -- UNIX_TIMESTAMP, FROM_UNIXTIME",
        "target_query": "select unix_timestamp(from_unixtime(234567890));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 7,
                "end_pos": 21
            },
            {
                "dialect_token": "FROM_UNIXTIME",
                "start_pos": 22,
                "end_pos": 35
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 511,
        "database_name": "BUTTERTrans_511",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select unix_timestamp('2039-01-20 01:00:00'); -- UNIX_TIMESTAMP",
        "target_query": "select unix_timestamp('2039-01-20 01:00:00');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 512,
        "database_name": "BUTTERTrans_512",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select unix_timestamp('2038-02-10 01:00:00'); -- UNIX_TIMESTAMP",
        "target_query": "select unix_timestamp('2038-02-10 01:00:00');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 513,
        "database_name": "BUTTERTrans_513",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select unix_timestamp('1970-01-01 01:00:00'),unix_timestamp('1970-01-01 01:00:01'),unix_timestamp('2038-01-19 04:14:07'),unix_timestamp('2038-01-19 04:14:08'); -- UNIX_TIMESTAMP",
        "target_query": "select unix_timestamp('1970-01-01 01:00:00'),unix_timestamp('1970-01-01 01:00:01'),unix_timestamp('2038-01-19 04:14:07'),unix_timestamp('2038-01-19 04:14:08');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 7,
                "end_pos": 21
            },
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 45,
                "end_pos": 59
            },
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 83,
                "end_pos": 97
            },
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 121,
                "end_pos": 135
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 514,
        "database_name": "BUTTERTrans_514",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT a, FROM_UNIXTIME(a) FROM t1; -- FROM_UNIXTIME",
        "target_query": "SELECT a, FROM_UNIXTIME(a) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "FROM_UNIXTIME",
                "start_pos": 10,
                "end_pos": 23
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bigint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bigint(20), )\n"
        ]
    },
    {
        "sql_id": 515,
        "database_name": "BUTTERTrans_515",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT UNIX_TIMESTAMP(\"3001-01-19 08:59:59\"); -- UNIX_TIMESTAMP",
        "target_query": "SELECT UNIX_TIMESTAMP(\"3001-01-19 08:59:59\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 516,
        "database_name": "BUTTERTrans_516",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "EXPLAIN SELECT * FROM t WHERE CONCAT(x,x) = 'XX'; -- CONCAT",
        "target_query": "EXPLAIN SELECT * FROM t WHERE CONCAT(x,x) = 'XX';",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 30,
                "end_pos": 36
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(x, varchar(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(x, varchar(10), )\n"
        ]
    },
    {
        "sql_id": 517,
        "database_name": "BUTTERTrans_517",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t1(f1) select if(max(f1) is null, '2000',max(f1)) from t1; -- IF, MAX",
        "target_query": "INSERT INTO t1(f1) SELECT IF(MAX(f1) IS NULL, '2000', MAX(f1)) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IF",
                "start_pos": 26,
                "end_pos": 28
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "MAX(expr)",
                "description": "Returns the maximum value of the expression in an aggregation context.",
                "examples": [
                    "SELECT MAX(10), MAX(5), MAX(20);",
                    "SELECT MAX('apple'), MAX('banana'), MAX('pear');",
                    "SELECT MAX(ABS(-5)), MAX(ABS(3));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "MAX(expr)",
                "description": "Returns the maximum value among given values in aggregation.",
                "examples": [
                    "SELECT MAX(7), MAX(14), MAX(3);",
                    "SELECT MAX('zebra'), MAX('dog'), MAX('cat');",
                    "SELECT MAX(POWER(2, 3)), MAX(POWER(3, 2));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, varchar(5), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, varchar(5), )\n"
        ]
    },
    {
        "sql_id": 518,
        "database_name": "BUTTERTrans_518",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c='13_characters') FROM t1; -- LENGTH",
        "target_query": "SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c = '13_characters') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 19,
                "end_pos": 25
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c, varchar(30), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c, varchar(30), )\n"
        ]
    },
    {
        "sql_id": 519,
        "database_name": "BUTTERTrans_519",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t2 (d)SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c='13_characters') FROM t1; -- LENGTH",
        "target_query": "INSERT INTO t2 (d) SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c = '13_characters') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 37,
                "end_pos": 43
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c, varchar(30), )\n",
            "Table: `t2`\nColumns:\n(d, varchar(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c, varchar(30), )\n",
            "Table: `t2`\nColumns:\n(d, varchar(10), )\n"
        ]
    },
    {
        "sql_id": 520,
        "database_name": "BUTTERTrans_520",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t2 (d)SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c='7_chars') FROM t1; -- LENGTH",
        "target_query": "INSERT INTO t2 (d) SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c = '7_chars') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 37,
                "end_pos": 43
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c, varchar(30), )\n",
            "Table: `t2`\nColumns:\n(d, varchar(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c, varchar(30), )\n",
            "Table: `t2`\nColumns:\n(d, varchar(10), )\n"
        ]
    },
    {
        "sql_id": 521,
        "database_name": "BUTTERTrans_521",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT *, HEX(a) FROM t1; -- HEX",
        "target_query": "SELECT *, HEX(a) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 10,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n(a, varchar(100), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int(11), PRI)\n(a, varchar(100), )\n"
        ]
    },
    {
        "sql_id": 522,
        "database_name": "BUTTERTrans_522",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT *, HEX(a) FROM t1 WHERE a = 'abc-def'; -- HEX",
        "target_query": "SELECT *, HEX(a) FROM t1 WHERE a = 'abc-def';",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 10,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n(a, varchar(100), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int(11), PRI)\n(a, varchar(100), )\n"
        ]
    },
    {
        "sql_id": 523,
        "database_name": "BUTTERTrans_523",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES('valid-string',1),(UNHEX('11'),2); -- UNHEX",
        "target_query": "INSERT INTO t1 VALUES('valid-string',1),(UNHEX('11'),2);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNHEX",
                "start_pos": 41,
                "end_pos": 46
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Returns NULL for invalid hex or NULL input.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Supports implicit zero-padding for odd-length strings.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(tx, text, )\n(pk, int, PRI)\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(tx, text, )\n(pk, int(11), PRI)\n"
        ]
    },
    {
        "sql_id": 524,
        "database_name": "BUTTERTrans_524",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT pk,OCTET_LENGTH(tx),LENGTH(tx) FROM t1; -- OCTET_LENGTH, LENGTH",
        "target_query": "SELECT pk,OCTET_LENGTH(tx),LENGTH(tx) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "OCTET_LENGTH",
                "start_pos": 10,
                "end_pos": 22
            },
            {
                "dialect_token": "LENGTH",
                "start_pos": 27,
                "end_pos": 33
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            },
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            },
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(tx, text, )\n(pk, int, PRI)\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(tx, text, )\n(pk, int(11), PRI)\n"
        ]
    },
    {
        "sql_id": 525,
        "database_name": "BUTTERTrans_525",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert ignore t1 values (1, repeat('a',110), repeat('b', 210)); -- REPEAT",
        "target_query": "insert ignore t1 values (1, repeat('a',110), repeat('b', 210));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 28,
                "end_pos": 34
            },
            {
                "dialect_token": "REPEAT",
                "start_pos": 45,
                "end_pos": 51
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int, )\n(a, char(200), UNI)\n(b, text, UNI)\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int(11), )\n(a, char(200), UNI)\n(b, text, UNI)\n"
        ]
    },
    {
        "sql_id": 526,
        "database_name": "BUTTERTrans_526",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select i, length(a), length(b), char_length(a), char_length(b) from t1; -- LENGTH, CHAR_LENGTH",
        "target_query": "select i, length(a), length(b), char_length(a), char_length(b) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 10,
                "end_pos": 16
            },
            {
                "dialect_token": "LENGTH",
                "start_pos": 21,
                "end_pos": 27
            },
            {
                "dialect_token": "CHAR_LENGTH",
                "start_pos": 32,
                "end_pos": 43
            },
            {
                "dialect_token": "CHAR_LENGTH",
                "start_pos": 48,
                "end_pos": 59
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "CHAR_LENGTH(expr)",
                "description": "Returns the number of characters in the string, not bytes.",
                "examples": [
                    "SELECT CHAR_LENGTH('abc');",
                    "SELECT CHAR_LENGTH('\u4f60\u597d');",
                    "SELECT CHAR_LENGTH('a\u4f60b\u597dc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "CHAR_LENGTH(expr)",
                "description": "Returns the character count of the input string, ignoring byte size.",
                "examples": [
                    "SELECT CHAR_LENGTH('abc');",
                    "SELECT CHAR_LENGTH('\u4f60\u597d');",
                    "SELECT CHAR_LENGTH('a\u4f60b\u597dc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int, )\n(a, char(200), UNI)\n(b, text, UNI)\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int(11), )\n(a, char(200), UNI)\n(b, text, UNI)\n"
        ]
    },
    {
        "sql_id": 527,
        "database_name": "BUTTERTrans_527",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t1 values(1, 'a', 'a', NOW()), (1, 'b', 'b', NOW()); -- NOW",
        "target_query": "insert into t1 values(1, 'a', 'a', NOW()), (1, 'b', 'b', NOW());",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "NOW",
                "start_pos": 35,
                "end_pos": 38
            },
            {
                "dialect_token": "NOW",
                "start_pos": 57,
                "end_pos": 60
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, int, )\n(c2, char(12), )\n(c3, varchar(123), )\n(c4, timestamp, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, int(11), )\n(c2, char(12), )\n(c3, varchar(123), )\n(c4, timestamp, )\n"
        ]
    },
    {
        "sql_id": 528,
        "database_name": "BUTTERTrans_528",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select t1.time,t1.date,t1.timestamp,concat(date,\" \",time),t1.quarter+t1.week, t1.year+timestampadd,  timestampdiff from t1; -- CONCAT",
        "target_query": "select t1.time,t1.date,t1.timestamp,concat(date,\" \",time),t1.quarter+t1.week, t1.year+timestampadd,  timestampdiff from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 36,
                "end_pos": 42
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(time, time, )\n(date, date, )\n(timestamp, timestamp, )\n(quarter, int, )\n(week, int, )\n(year, int, )\n(timestampadd, int, )\n(timestampdiff, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(time, time, )\n(date, date, )\n(timestamp, timestamp, )\n(quarter, int(11), )\n(week, int(11), )\n(year, int(11), )\n(timestampadd, int(11), )\n(timestampdiff, int(11), )\n"
        ]
    },
    {
        "sql_id": 529,
        "database_name": "BUTTERTrans_529",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select concat('|',a,'|'), concat('|',b,'|') from t1; -- CONCAT",
        "target_query": "select concat('|',a,'|'), concat('|',b,'|') from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "CONCAT",
                "start_pos": 26,
                "end_pos": 32
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, text, )\n(b, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, text, )\n(b, text, )\n"
        ]
    },
    {
        "sql_id": 530,
        "database_name": "BUTTERTrans_530",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HEX(val) FROM t1; -- HEX",
        "target_query": "SELECT HEX(val) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(val, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(val, text, )\n"
        ]
    },
    {
        "sql_id": 531,
        "database_name": "BUTTERTrans_531",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HEX(a) FROM t1; -- HEX",
        "target_query": "SELECT HEX(a) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(20), )\n"
        ]
    },
    {
        "sql_id": 532,
        "database_name": "BUTTERTrans_532",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT a, date_format(a,'%a') as abday, dayname(a) as day FROM t1 ORDER BY a; -- DATE_FORMAT, DAYNAME",
        "target_query": "SELECT a, date_format(a,'%a') as abday, dayname(a) as day FROM t1 ORDER BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE_FORMAT",
                "start_pos": 10,
                "end_pos": 21
            },
            {
                "dialect_token": "DAYNAME",
                "start_pos": 40,
                "end_pos": 47
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            },
            {
                "expression": "DAYNAME(date)",
                "description": "Returns the full name of the day for a given date.",
                "examples": [
                    "SELECT DAYNAME('2023-11-25');",
                    "SELECT DAYNAME('2022-01-01');",
                    "SELECT DAYNAME('1999-03-14');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            },
            {
                "expression": "DAYNAME(date)",
                "description": "Returns the full name of the day for a given date.",
                "examples": [
                    "SELECT DAYNAME('2023-11-25');",
                    "SELECT DAYNAME('2022-01-01');",
                    "SELECT DAYNAME('1999-03-14');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n"
        ]
    },
    {
        "sql_id": 533,
        "database_name": "BUTTERTrans_533",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT a, date_format(a,'%b') as abmon, monthname(a) as mon FROM t1 ORDER BY a; -- DATE_FORMAT, MONTHNAME",
        "target_query": "SELECT a, date_format(a,'%b') as abmon, monthname(a) as mon FROM t1 ORDER BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE_FORMAT",
                "start_pos": 10,
                "end_pos": 21
            },
            {
                "dialect_token": "MONTHNAME",
                "start_pos": 40,
                "end_pos": 49
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            },
            {
                "expression": "MONTHNAME(date)",
                "description": "Returns the full English name of the month for a given date.",
                "examples": [
                    "SELECT MONTHNAME(DATE '2023-05-01') AS mon1;",
                    "SELECT MONTHNAME(STR_TO_DATE('2024-12-31', '%Y-%m-%d')) AS mon2;",
                    "SELECT MONTHNAME(NOW()) AS current_month;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            },
            {
                "expression": "MONTHNAME(date)",
                "description": "Returns the full English name of the month for a given date.",
                "examples": [
                    "SELECT MONTHNAME(DATE '2023-05-01') AS mon1;",
                    "SELECT MONTHNAME(STR_TO_DATE('2024-12-31', '%Y-%m-%d')) AS mon2;",
                    "SELECT MONTHNAME(NOW()) AS current_month;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n"
        ]
    },
    {
        "sql_id": 534,
        "database_name": "BUTTERTrans_534",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT DATE_FORMAT('2001-01-01', '%w %a %W'); -- DATE_FORMAT",
        "target_query": "SELECT DATE_FORMAT('2001-01-01', '%w %a %W');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 535,
        "database_name": "BUTTERTrans_535",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT DATE_FORMAT('2001-01-01', '%c %b %M'); -- DATE_FORMAT",
        "target_query": "SELECT DATE_FORMAT('2001-01-01', '%c %b %M');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 536,
        "database_name": "BUTTERTrans_536",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT DATE_FORMAT('2010-03-23 11:00:00','%h %p'); -- DATE_FORMAT",
        "target_query": "SELECT DATE_FORMAT('2010-03-23 11:00:00','%h %p');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE_FORMAT",
                "start_pos": 7,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 537,
        "database_name": "BUTTERTrans_537",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select strcmp('','ae'),strcmp('ae',''),strcmp('aeq','q'),strcmp('q','aeq'); -- STRCMP",
        "target_query": "select strcmp('','ae'),strcmp('ae',''),strcmp('aeq','q'),strcmp('q','aeq'); -- STRCMP",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STRCMP",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 23,
                "end_pos": 29
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 39,
                "end_pos": 45
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 57,
                "end_pos": 63
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 538,
        "database_name": "BUTTERTrans_538",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select strcmp('ss',''),strcmp('','ss'),strcmp('s','sss'),strcmp('q','ssq'); -- STRCMP",
        "target_query": "select strcmp('ss',''),strcmp('','ss'),strcmp('s','sss'),strcmp('q','ssq'); -- STRCMP",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STRCMP",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 23,
                "end_pos": 29
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 39,
                "end_pos": 45
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 57,
                "end_pos": 63
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 539,
        "database_name": "BUTTERTrans_539",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select strcmp('','af'),strcmp('a',''),strcmp('','aeq'),strcmp('','aeaeq'); -- STRCMP",
        "target_query": "select strcmp('','af'),strcmp('a',''),strcmp('','aeq'),strcmp('','aeaeq'); -- STRCMP",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STRCMP",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 23,
                "end_pos": 29
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 38,
                "end_pos": 44
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 55,
                "end_pos": 61
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 540,
        "database_name": "BUTTERTrans_540",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select strcmp('ss','a'),strcmp('','ssa'),strcmp('sa','sssb'),strcmp('s',''); -- STRCMP",
        "target_query": "select strcmp('ss','a'),strcmp('','ssa'),strcmp('sa','sssb'),strcmp('s',''); -- STRCMP",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STRCMP",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 24,
                "end_pos": 30
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 41,
                "end_pos": 47
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 61,
                "end_pos": 67
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 541,
        "database_name": "BUTTERTrans_541",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select strcmp('','o'),strcmp('','u'),strcmp('','oeb'); -- STRCMP",
        "target_query": "select strcmp('','o'),strcmp('','u'),strcmp('','oeb'); -- STRCMP",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STRCMP",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 22,
                "end_pos": 28
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 37,
                "end_pos": 43
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 542,
        "database_name": "BUTTERTrans_542",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select strcmp('af',''),strcmp('','a'),strcmp('aeq',''),strcmp('aeaeq',''); -- STRCMP",
        "target_query": "select strcmp('af',''),strcmp('','a'),strcmp('aeq',''),strcmp('aeaeq',''); -- STRCMP",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STRCMP",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 23,
                "end_pos": 29
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 38,
                "end_pos": 44
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 55,
                "end_pos": 61
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 543,
        "database_name": "BUTTERTrans_543",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select strcmp('a','ss'),strcmp('ssa',''),strcmp('sssb','sa'),strcmp('','s'); -- STRCMP",
        "target_query": "select strcmp('a','ss'),strcmp('ssa',''),strcmp('sssb','sa'),strcmp('','s'); -- STRCMP",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STRCMP",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 24,
                "end_pos": 30
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 41,
                "end_pos": 47
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 61,
                "end_pos": 67
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 544,
        "database_name": "BUTTERTrans_544",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select strcmp('u','a'),strcmp('u',''); -- STRCMP",
        "target_query": "select strcmp('u','a'),strcmp('u',''); -- STRCMP",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STRCMP",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 23,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 545,
        "database_name": "BUTTERTrans_545",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select strcmp('s', 'a'), strcmp('a', 'x'); -- STRCMP",
        "target_query": "select strcmp('s', 'a'), strcmp('a', 'x'); -- STRCMP",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STRCMP",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "STRCMP",
                "start_pos": 25,
                "end_pos": 31
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 546,
        "database_name": "BUTTERTrans_546",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT FIELD('ue',s1), FIELD('',s1), s1='ue', s1='' FROM t1; -- FIELD",
        "target_query": "SELECT FIELD('ue',s1), FIELD('',s1), s1='ue', s1='' FROM t1; -- FIELD",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "FIELD",
                "start_pos": 7,
                "end_pos": 12
            },
            {
                "dialect_token": "FIELD",
                "start_pos": 23,
                "end_pos": 28
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the index (1-based) of the first value in the list that is equal to 'val'. Returns 0 if no match is found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the position of 'val' in the list (1-based index). Returns 0 if 'val' is not found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, char(5), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, char(5), )\n"
        ]
    },
    {
        "sql_id": 547,
        "database_name": "BUTTERTrans_547",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select * from t1 where length(s1)=2 and s1='oe'; -- LENGTH",
        "target_query": "select * from t1 where length(s1)=2 and s1='oe'; -- LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 23,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, char(5), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, char(5), )\n"
        ]
    },
    {
        "sql_id": 548,
        "database_name": "BUTTERTrans_548",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD",
        "target_query": "SELECT LPAD(NULL, 5, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 549,
        "database_name": "BUTTERTrans_549",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LPAD(NULL, NULL, 'x') AS result; -- LPAD",
        "target_query": "SELECT LPAD(NULL, NULL, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 550,
        "database_name": "BUTTERTrans_550",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LPAD(NULL, NULL, NULL) AS result; -- LPAD",
        "target_query": "SELECT LPAD(NULL, NULL, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 551,
        "database_name": "BUTTERTrans_551",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LPAD('a', NULL, 'x') AS result; -- LPAD",
        "target_query": "SELECT LPAD('a', NULL, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 552,
        "database_name": "BUTTERTrans_552",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LPAD('a', NULL, NULL) AS result; -- LPAD",
        "target_query": "SELECT LPAD('a', NULL, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 553,
        "database_name": "BUTTERTrans_553",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LPAD('a', 5, NULL) AS result; -- LPAD",
        "target_query": "SELECT LPAD('a', 5, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 554,
        "database_name": "BUTTERTrans_554",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LPAD(NULL, 5, NULL) AS result; -- LPAD",
        "target_query": "SELECT LPAD(NULL, 5, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 555,
        "database_name": "BUTTERTrans_555",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LPAD('a', 0, 'x') AS result; -- LPAD",
        "target_query": "SELECT LPAD('a', 0, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 556,
        "database_name": "BUTTERTrans_556",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LPAD('a', 0, '') AS result; -- LPAD",
        "target_query": "SELECT LPAD('a', 0, '') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 557,
        "database_name": "BUTTERTrans_557",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LPAD('', 0, 'x') AS result; -- LPAD",
        "target_query": "SELECT LPAD('', 0, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 558,
        "database_name": "BUTTERTrans_558",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LPAD('', 0, '') AS result; -- LPAD",
        "target_query": "SELECT LPAD('', 0, '') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 559,
        "database_name": "BUTTERTrans_559",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LPAD('a', -1, 'x'); -- LPAD",
        "target_query": "SELECT LPAD('a', -1, 'x');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 560,
        "database_name": "BUTTERTrans_560",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LPAD('123', 5, 'x'); -- LPAD",
        "target_query": "SELECT LPAD('123', 5, 'x');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 561,
        "database_name": "BUTTERTrans_561",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LPAD('a', 5, 'xy'); -- LPAD",
        "target_query": "SELECT LPAD('a', 5, 'xy');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 562,
        "database_name": "BUTTERTrans_562",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LPAD(\"I LOVE SQL\", 20, \" \"); -- LPAD",
        "target_query": "SELECT LPAD(\"I LOVE SQL\", 20, \" \");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 563,
        "database_name": "BUTTERTrans_563",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LPAD(\"I LOVE SQL in the morning\", 20, \" \"); -- LPAD",
        "target_query": "SELECT LPAD(\"I LOVE SQL in the morning\", 20, \" \");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 564,
        "database_name": "BUTTERTrans_564",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES(REPEAT('a', 1024), 0), (REPEAT('b', 1024), 1),(REPEAT('c', 1024), 2), (REPEAT('d', 1024), 3),(REPEAT('e', 1024), 4), (REPEAT('f', 1024), 5); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES(REPEAT('a', 1024), 0), (REPEAT('b', 1024), 1),(REPEAT('c', 1024), 2), (REPEAT('d', 1024), 3),(REPEAT('e', 1024), 4), (REPEAT('f', 1024), 5);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 22,
                "end_pos": 28
            },
            {
                "dialect_token": "REPEAT",
                "start_pos": 46,
                "end_pos": 52
            },
            {
                "dialect_token": "REPEAT",
                "start_pos": 69,
                "end_pos": 75
            },
            {
                "dialect_token": "REPEAT",
                "start_pos": 93,
                "end_pos": 99
            },
            {
                "dialect_token": "REPEAT",
                "start_pos": 116,
                "end_pos": 122
            },
            {
                "dialect_token": "REPEAT",
                "start_pos": 140,
                "end_pos": 146
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, longtext, )\n(f2, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, longtext, )\n(f2, int(11), )\n"
        ]
    },
    {
        "sql_id": 565,
        "database_name": "BUTTERTrans_565",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT SUM(LENGTH(f1)) FROM t1; -- LENGTH",
        "target_query": "SELECT SUM(LENGTH(f1)) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 11,
                "end_pos": 17
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, longtext, )\n(f2, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, longtext, )\n(f2, int(11), )\n"
        ]
    },
    {
        "sql_id": 566,
        "database_name": "BUTTERTrans_566",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT COALESCE(d, d), IFNULL(d, d), IF(i, d, d),CASE i WHEN i THEN d ELSE d END, GREATEST(d, d), LEAST(d, d)FROM t1 ORDER BY RAND(); -- COALESCE, IFNULL, IF, GREATEST, LEAST",
        "target_query": "SELECT COALESCE(d, d), IFNULL(d, d), IF(i, d, d),CASE i WHEN i THEN d ELSE d END, GREATEST(d, d), LEAST(d, d)FROM t1 ORDER BY RAND();",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "COALESCE",
                "start_pos": 7,
                "end_pos": 15
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 23,
                "end_pos": 29
            },
            {
                "dialect_token": "IF",
                "start_pos": 37,
                "end_pos": 39
            },
            {
                "dialect_token": "GREATEST",
                "start_pos": 82,
                "end_pos": 90
            },
            {
                "dialect_token": "LEAST",
                "start_pos": 98,
                "end_pos": 103
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            },
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            },
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            },
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Same as MySQL: COALESCE function and partition coalescing supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 13;"
                ]
            },
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            },
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            },
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int, )\n(d, date, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int(11), )\n(d, date, )\n"
        ]
    },
    {
        "sql_id": 567,
        "database_name": "BUTTERTrans_567",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT HEX(c1) FROM AB; -- HEX",
        "target_query": "SELECT HEX(c1) FROM AB;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `AB`\nColumns:\n(c1, char(100), )\n"
        ],
        "target_related_schemas": [
            "Table: `AB`\nColumns:\n(c1, char(100), )\n"
        ]
    },
    {
        "sql_id": 568,
        "database_name": "BUTTERTrans_568",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t5 values (1, date_format('2001-01-01','%W')); -- DATE_FORMAT",
        "target_query": "insert into t5 values (1, date_format('2001-01-01','%W'));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE_FORMAT",
                "start_pos": 26,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t5`\nColumns:\n(c1, int, )\n(c2, varchar(128), )\n"
        ],
        "target_related_schemas": [
            "Table: `t5`\nColumns:\n(c1, int(11), )\n(c2, varchar(128), )\n"
        ]
    },
    {
        "sql_id": 569,
        "database_name": "BUTTERTrans_569",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t5 values (2, date_format('2001-01-01','%W')); -- DATE_FORMAT",
        "target_query": "insert into t5 values (2, date_format('2001-01-01','%W'));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE_FORMAT",
                "start_pos": 26,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t5`\nColumns:\n(c1, int, )\n(c2, varchar(128), )\n"
        ],
        "target_related_schemas": [
            "Table: `t5`\nColumns:\n(c1, int(11), )\n(c2, varchar(128), )\n"
        ]
    },
    {
        "sql_id": 570,
        "database_name": "BUTTERTrans_570",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "insert into t5 values (3, date_format('2001-01-01','%W')); -- DATE_FORMAT",
        "target_query": "insert into t5 values (3, date_format('2001-01-01','%W'));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "DATE_FORMAT",
                "start_pos": 26,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t5`\nColumns:\n(c1, int, )\n(c2, varchar(128), )\n"
        ],
        "target_related_schemas": [
            "Table: `t5`\nColumns:\n(c1, int(11), )\n(c2, varchar(128), )\n"
        ]
    },
    {
        "sql_id": 571,
        "database_name": "BUTTERTrans_571",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(a) from t1; -- HEX",
        "target_query": "select hex(a) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(64), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(64), )\n"
        ]
    },
    {
        "sql_id": 572,
        "database_name": "BUTTERTrans_572",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (1,USER()); -- USER",
        "target_query": "INSERT INTO t1 VALUES (1,USER());",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "USER",
                "start_pos": 25,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "USER()",
                "description": "Returns the current MySQL user and host in the format 'username@hostname'.",
                "examples": [
                    "SELECT USER();"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "USER()",
                "description": "Returns the current MariaDB user and host in the format 'username@hostname'.",
                "examples": [
                    "SELECT USER();"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, char(64), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, char(64), )\n"
        ]
    },
    {
        "sql_id": 573,
        "database_name": "BUTTERTrans_573",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 123)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 123));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 23,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, longtext, )\n"
        ]
    },
    {
        "sql_id": 574,
        "database_name": "BUTTERTrans_574",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 234)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 234));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 23,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, longtext, )\n"
        ]
    },
    {
        "sql_id": 575,
        "database_name": "BUTTERTrans_575",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 345)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 345));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 23,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, longtext, )\n"
        ]
    },
    {
        "sql_id": 576,
        "database_name": "BUTTERTrans_576",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 456)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 456));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 23,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, longtext, )\n"
        ]
    },
    {
        "sql_id": 577,
        "database_name": "BUTTERTrans_577",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LENGTH(c1) FROM t1; -- LENGTH",
        "target_query": "SELECT LENGTH(c1) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, longtext, )\n"
        ]
    },
    {
        "sql_id": 578,
        "database_name": "BUTTERTrans_578",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select null,isnull(null),isnull(1/0),isnull(1/0 = null),ifnull(null,1),ifnull(null,\"TRUE\"),ifnull(\"TRUE\",\"ERROR\"),1/0 is null,1 is not null; -- ISNULL, IFNULL",
        "target_query": "select null,isnull(null),isnull(1/0),isnull(1/0 = null),ifnull(null,1),ifnull(null,\"TRUE\"),ifnull(\"TRUE\",\"ERROR\"),1/0 is null,1 is not null;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ISNULL",
                "start_pos": 12,
                "end_pos": 18
            },
            {
                "dialect_token": "ISNULL",
                "start_pos": 25,
                "end_pos": 31
            },
            {
                "dialect_token": "ISNULL",
                "start_pos": 37,
                "end_pos": 43
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 56,
                "end_pos": 62
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 71,
                "end_pos": 77
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 91,
                "end_pos": 97
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Returns 1 if the expression is NULL, otherwise returns 0.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL(5 + NULL);",
                    "SELECT IF(ISNULL(score), 'N/A', score) FROM students;"
                ]
            },
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Checks whether a value is NULL. Returns 1 if NULL, 0 otherwise.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL('abc');",
                    "SELECT IF(ISNULL(balance), 0, balance) FROM accounts;"
                ]
            },
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 579,
        "database_name": "BUTTERTrans_579",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select NULL=NULL,NULL<>NULL,IFNULL(NULL,1.1)+0,IFNULL(NULL,1) | 0; -- IFNULL",
        "target_query": "select NULL=NULL,NULL<>NULL,IFNULL(NULL,1.1)+0,IFNULL(NULL,1) | 0;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IFNULL",
                "start_pos": 28,
                "end_pos": 34
            },
            {
                "dialect_token": "IFNULL",
                "start_pos": 47,
                "end_pos": 53
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 580,
        "database_name": "BUTTERTrans_580",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select strcmp(\"a\",NULL),(1<NULL),NULL regexp \"a\",null like \"a%\",\"a%\" like null; -- STRCMP",
        "target_query": "select strcmp(\"a\",NULL),(1<NULL),NULL regexp \"a\",null like \"a%\",\"a%\" like null;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "STRCMP",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 581,
        "database_name": "BUTTERTrans_581",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select repeat(\"a\",0),repeat(\"ab\",5+5),repeat(\"ab\",-1),reverse(NULL); -- REPEAT",
        "target_query": "select repeat(\"a\",0),repeat(\"ab\",5+5),repeat(\"ab\",-1),reverse(NULL);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "REPEAT",
                "start_pos": 21,
                "end_pos": 27
            },
            {
                "dialect_token": "REPEAT",
                "start_pos": 38,
                "end_pos": 44
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 582,
        "database_name": "BUTTERTrans_582",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select field(NULL,\"a\",\"b\",\"c\"); -- FIELD",
        "target_query": "select field(NULL,\"a\",\"b\",\"c\");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "FIELD",
                "start_pos": 7,
                "end_pos": 12
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the index (1-based) of the first value in the list that is equal to 'val'. Returns 0 if no match is found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the position of 'val' in the list (1-based index). Returns 0 if 'val' is not found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 583,
        "database_name": "BUTTERTrans_583",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "CREATE TABLE t2 SELECT IFNULL(a, b) FROM t1; -- IFNULL",
        "target_query": "CREATE TABLE t2 SELECT IFNULL(a, b) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IFNULL",
                "start_pos": 23,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, decimal(1,0), )\n(b, decimal(1,0), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, decimal(1,0), )\n(b, decimal(1,0), )\n"
        ]
    },
    {
        "sql_id": 584,
        "database_name": "BUTTERTrans_584",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "CREATE TABLE t2 SELECT IFNULL(a, NULL) FROM t1; -- IFNULL",
        "target_query": "CREATE TABLE t2 SELECT IFNULL(a, NULL) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IFNULL",
                "start_pos": 23,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, decimal(1,0), )\n(b, decimal(1,0), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, decimal(1,0), )\n(b, decimal(1,0), )\n"
        ]
    },
    {
        "sql_id": 585,
        "database_name": "BUTTERTrans_585",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "CREATE TABLE t2 SELECT IFNULL(NULL, b) FROM t1; -- IFNULL",
        "target_query": "CREATE TABLE t2 SELECT IFNULL(NULL, b) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IFNULL",
                "start_pos": 23,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, decimal(1,0), )\n(b, decimal(1,0), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, decimal(1,0), )\n(b, decimal(1,0), )\n"
        ]
    },
    {
        "sql_id": 586,
        "database_name": "BUTTERTrans_586",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t1 VALUES ( repeat( 'a', 10 ), 1),( repeat( 'b', 10 ), 2); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES ( repeat( 'a', 10 ), 1),( repeat( 'b', 10 ), 2);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 24,
                "end_pos": 30
            },
            {
                "dialect_token": "REPEAT",
                "start_pos": 48,
                "end_pos": 54
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(10), )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(10), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 587,
        "database_name": "BUTTERTrans_587",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT GROUP_CONCAT(a) FROM t1; -- GROUP_CONCAT",
        "target_query": "SELECT GROUP_CONCAT(a) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GROUP_CONCAT",
                "start_pos": 7,
                "end_pos": 19
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "group_concat(X)group_concat(X,Y)string_agg(X,Y)",
                "description": "The GROUP_CONCAT([DISTINCT] expr [,expr ...]  [ORDER BY {unsigned_integer | col_name | expr}  [ASC | DESC] [,col_name ...]]  [SEPARATOR str_val])\nfunction returns a string result with the concatenated non-NULL values from a group.\nDISTINGUISHED keyword can be used to eliminate duplicate values.\nORDER BY clause can be used to sort the values.\nSEPARATOR keyword specifies the separator between values, default is comma(,).\nThe maximum length of the result is controlled by group_concat_max_len system variable, default is 1024.",
                "examples": [
                    "SELECT group_concat(name) FROM students; -- Returns a comma-separated list of names",
                    "SELECT group_concat(name, ' | ') FROM students; -- Returns names separated by '|'"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "group_concat(X)group_concat(X,Y)string_agg(X,Y)",
                "description": "The group_concat(X) function returns a string that concatenates all the non-NULL values in X, separated by commas. The group_concat(X,Y) function returns a string that concatenates all the non-NULL values in X, separated by Y. The string_agg(X,Y) function returns a string that concatenates all the non-NULL values in X, separated by Y.",
                "examples": [
                    "SELECT group_concat(name) FROM students; -- Returns a comma-separated list of names",
                    "SELECT group_concat(name, ' | ') FROM students; -- Returns names separated by '|'"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(10), )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(10), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 588,
        "database_name": "BUTTERTrans_588",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT UNIX_TIMESTAMP(); -- UNIX_TIMESTAMP",
        "target_query": "SELECT UNIX_TIMESTAMP();",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UNIX_TIMESTAMP",
                "start_pos": 7,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 589,
        "database_name": "BUTTERTrans_589",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select repeat('a',2000); -- REPEAT",
        "target_query": "select repeat('a',2000); -- REPEAT",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 590,
        "database_name": "BUTTERTrans_590",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT length(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") as len; -- LENGTH",
        "target_query": "SELECT length(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") as len; -- LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 591,
        "database_name": "BUTTERTrans_591",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select length(repeat('a',2000)); -- LENGTH, REPEAT",
        "target_query": "select length(repeat('a',2000)); -- LENGTH, REPEAT",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "REPEAT",
                "start_pos": 14,
                "end_pos": 20
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 592,
        "database_name": "BUTTERTrans_592",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT c11, LENGTH(c12) FROM t1; -- LENGTH",
        "target_query": "SELECT c11, LENGTH(c12) FROM t1; -- LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 12,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c11, int, )\n(c12, longtext, )\n",
            "Table: `t2`\nColumns:\n(c21, int, )\n(c22, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c11, int(11), )\n(c12, longtext, )\n",
            "Table: `t2`\nColumns:\n(c21, int(11), )\n(c22, longtext, )\n"
        ]
    },
    {
        "sql_id": 593,
        "database_name": "BUTTERTrans_593",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(a) from t1 where a like 'A_'; -- HEX",
        "target_query": "select hex(a) from t1 where a like 'A_';",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(50), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(50), )\n"
        ]
    },
    {
        "sql_id": 594,
        "database_name": "BUTTERTrans_594",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "explain select hex(a) from t1 where a like 'A_'; -- HEX",
        "target_query": "explain select hex(a) from t1 where a like 'A_';",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 15,
                "end_pos": 18
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(50), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(50), )\n"
        ]
    },
    {
        "sql_id": 595,
        "database_name": "BUTTERTrans_595",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select hex(a) from t1; -- HEX",
        "target_query": "select hex(a) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "HEX",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(50), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(50), )\n"
        ]
    },
    {
        "sql_id": 596,
        "database_name": "BUTTERTrans_596",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "create table t1 as select to_seconds(null) as to_seconds; -- TO_SECONDS",
        "target_query": "create table t1 as select to_seconds(null) as to_seconds;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TO_SECONDS",
                "start_pos": 26,
                "end_pos": 36
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TO_SECONDS(datetime_expr)",
                "description": "Returns the number of seconds since year 0 to the given datetime.",
                "examples": [
                    "SELECT TO_SECONDS('2000-01-01 00:00:00');",
                    "SELECT TO_SECONDS(NOW());",
                    "SELECT TO_SECONDS(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_SECONDS(datetime_expr)",
                "description": "Returns the number of seconds since year 0 to the specified datetime value.",
                "examples": [
                    "SELECT TO_SECONDS('2020-12-31 12:00:00');",
                    "SELECT TO_SECONDS(UTC_TIMESTAMP());",
                    "SELECT TO_SECONDS(NULL);"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 as select to_seconds(null) as to_seconds; -- TO_SECONDS"
        ],
        "target_related_schemas": [
            "create table t1 as select to_seconds(null) as to_seconds;"
        ]
    },
    {
        "sql_id": 597,
        "database_name": "BUTTERTrans_597",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT IF(0,\"ERROR\",\"this\"),IF(1,\"is\",\"ERROR\"),IF(NULL,\"ERROR\",\"a\"),IF(1,2,3),IF(1,2.0,3.0)+0; -- IF",
        "target_query": "SELECT IF(0,\"ERROR\",\"this\"),IF(1,\"is\",\"ERROR\"),IF(NULL,\"ERROR\",\"a\"),IF(1,2,3),IF(1,2.0,3.0)+0; -- IF",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IF",
                "start_pos": 7,
                "end_pos": 9
            },
            {
                "dialect_token": "IF",
                "start_pos": 28,
                "end_pos": 30
            },
            {
                "dialect_token": "IF",
                "start_pos": 47,
                "end_pos": 49
            },
            {
                "dialect_token": "IF",
                "start_pos": 68,
                "end_pos": 70
            },
            {
                "dialect_token": "IF",
                "start_pos": 78,
                "end_pos": 80
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 598,
        "database_name": "BUTTERTrans_598",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT IF(1,st,st) s FROM t1 ORDER BY s; -- IF",
        "target_query": "SELECT IF(1,st,st) s FROM t1 ORDER BY s; -- IF",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IF",
                "start_pos": 7,
                "end_pos": 9
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(st, varchar(255), )\n(u, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(st, varchar(255), )\n(u, int(11), )\n"
        ]
    },
    {
        "sql_id": 599,
        "database_name": "BUTTERTrans_599",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT IF(u=1,st,st) s FROM t1 ORDER BY s; -- IF",
        "target_query": "SELECT IF(u=1,st,st) s FROM t1 ORDER BY s; -- IF",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IF",
                "start_pos": 7,
                "end_pos": 9
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(st, varchar(255), )\n(u, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(st, varchar(255), )\n(u, int(11), )\n"
        ]
    },
    {
        "sql_id": 600,
        "database_name": "BUTTERTrans_600",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select nullif(u, 1) from t1; -- NULLIF",
        "target_query": "select nullif(u, 1) from t1; -- NULLIF",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "NULLIF",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(st, varchar(255), )\n(u, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(st, varchar(255), )\n(u, int(11), )\n"
        ]
    },
    {
        "sql_id": 601,
        "database_name": "BUTTERTrans_601",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "explain select nullif(u, 1) from t1; -- NULLIF",
        "target_query": "explain select nullif(u, 1) from t1; -- NULLIF",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "NULLIF",
                "start_pos": 15,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(st, varchar(255), )\n(u, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(st, varchar(255), )\n(u, int(11), )\n"
        ]
    },
    {
        "sql_id": 602,
        "database_name": "BUTTERTrans_602",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select sum(if(num is null,0.00,num)) from t1; -- IF",
        "target_query": "select sum(if(num is null,0.00,num)) from t1; -- IF",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IF",
                "start_pos": 11,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(num, double(12,2), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(num, double(12,2), )\n"
        ]
    },
    {
        "sql_id": 603,
        "database_name": "BUTTERTrans_603",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select min(if(y -x > 5,y,NULL)), max(if(y - x > 5,y,NULL)) from t1; -- IF",
        "target_query": "select min(if(y -x > 5,y,NULL)), max(if(y - x > 5,y,NULL)) from t1; -- IF",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IF",
                "start_pos": 11,
                "end_pos": 13
            },
            {
                "dialect_token": "IF",
                "start_pos": 37,
                "end_pos": 39
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(x, int, )\n(y, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(x, int(11), )\n(y, int(11), )\n"
        ]
    },
    {
        "sql_id": 604,
        "database_name": "BUTTERTrans_604",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL; -- NULLIF",
        "target_query": "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL; -- NULLIF",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "NULLIF",
                "start_pos": 7,
                "end_pos": 13
            },
            {
                "dialect_token": "NULLIF",
                "start_pos": 28,
                "end_pos": 34
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 605,
        "database_name": "BUTTERTrans_605",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord ASC; -- IF, FROM_UNIXTIME",
        "target_query": "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord ASC; -- IF, FROM_UNIXTIME",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IF",
                "start_pos": 11,
                "end_pos": 13
            },
            {
                "dialect_token": "FROM_UNIXTIME",
                "start_pos": 33,
                "end_pos": 46
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, )\n(date, int, )\n(text, varchar(32), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int(11), )\n(date, int(10), )\n(text, varchar(32), )\n"
        ]
    },
    {
        "sql_id": 606,
        "database_name": "BUTTERTrans_606",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord DESC; -- IF, FROM_UNIXTIME",
        "target_query": "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord DESC; -- IF, FROM_UNIXTIME",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IF",
                "start_pos": 11,
                "end_pos": 13
            },
            {
                "dialect_token": "FROM_UNIXTIME",
                "start_pos": 33,
                "end_pos": 46
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, )\n(date, int, )\n(text, varchar(32), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int(11), )\n(date, int(10), )\n(text, varchar(32), )\n"
        ]
    },
    {
        "sql_id": 607,
        "database_name": "BUTTERTrans_607",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM (SELECT MAX(IF(1, CAST(c AS UNSIGNED), 0)) FROM t1) AS te; -- IF",
        "target_query": "SELECT * FROM (SELECT MAX(IF(1, CAST(c AS UNSIGNED), 0)) FROM t1) AS te; -- IF",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IF",
                "start_pos": 26,
                "end_pos": 28
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c, longtext, )\n"
        ]
    },
    {
        "sql_id": 608,
        "database_name": "BUTTERTrans_608",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM (SELECT MAX(IFNULL(CAST(c AS UNSIGNED), 0)) FROM t1) AS te; -- IFNULL",
        "target_query": "SELECT * FROM (SELECT MAX(IFNULL(CAST(c AS UNSIGNED), 0)) FROM t1) AS te; -- IFNULL",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IFNULL",
                "start_pos": 26,
                "end_pos": 32
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c, longtext, )\n"
        ]
    },
    {
        "sql_id": 609,
        "database_name": "BUTTERTrans_609",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT AVG(NULLIF(YEAR('2001-01-01'),10)); -- NULLIF, YEAR",
        "target_query": "SELECT AVG(NULLIF(YEAR('2001-01-01'),10)); -- NULLIF, YEAR",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "NULLIF",
                "start_pos": 11,
                "end_pos": 17
            },
            {
                "dialect_token": "YEAR",
                "start_pos": 18,
                "end_pos": 22
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            },
            {
                "expression": "YEAR(date)",
                "description": "Extracts the year from a date or datetime and returns it as an integer.",
                "examples": [
                    "SELECT YEAR('2023-04-10');",
                    "SELECT YEAR(NOW());",
                    "SELECT YEAR('2022-03-15');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            },
            {
                "expression": "YEAR(date)",
                "description": "Extracts the year from a date or datetime and returns it as an integer.",
                "examples": [
                    "SELECT YEAR('2023-04-10');",
                    "SELECT YEAR(NOW());",
                    "SELECT YEAR('2022-03-15');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 610,
        "database_name": "BUTTERTrans_610",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT FROM_DAYS(3652499), FROM_DAYS(3652500), FROM_DAYS(3652501); -- FROM_DAYS",
        "target_query": "SELECT FROM_DAYS(3652499), FROM_DAYS(3652500), FROM_DAYS(3652501);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "FROM_DAYS",
                "start_pos": 7,
                "end_pos": 16
            },
            {
                "dialect_token": "FROM_DAYS",
                "start_pos": 27,
                "end_pos": 36
            },
            {
                "dialect_token": "FROM_DAYS",
                "start_pos": 47,
                "end_pos": 56
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_DAYS(n)",
                "description": "Returns a date corresponding to the number of days since year 0.",
                "examples": [
                    "SELECT FROM_DAYS(1);",
                    "SELECT FROM_DAYS(730000);",
                    "SELECT CONCAT('Date is: ', FROM_DAYS(738000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FROM_DAYS(n)",
                "description": "Returns a date corresponding to the number of days since year 0.",
                "examples": [
                    "SELECT FROM_DAYS(1);",
                    "SELECT FROM_DAYS(730000);",
                    "SELECT CONCAT('Date is: ', FROM_DAYS(738000));"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 611,
        "database_name": "BUTTERTrans_611",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT FROM_DAYS(42949670), FROM_DAYS(42949671), FROM_DAYS(42949673); -- FROM_DAYS",
        "target_query": "SELECT FROM_DAYS(42949670), FROM_DAYS(42949671), FROM_DAYS(42949673);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "FROM_DAYS",
                "start_pos": 7,
                "end_pos": 16
            },
            {
                "dialect_token": "FROM_DAYS",
                "start_pos": 28,
                "end_pos": 37
            },
            {
                "dialect_token": "FROM_DAYS",
                "start_pos": 49,
                "end_pos": 58
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_DAYS(n)",
                "description": "Returns a date corresponding to the number of days since year 0.",
                "examples": [
                    "SELECT FROM_DAYS(1);",
                    "SELECT FROM_DAYS(730000);",
                    "SELECT CONCAT('Date is: ', FROM_DAYS(738000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FROM_DAYS(n)",
                "description": "Returns a date corresponding to the number of days since year 0.",
                "examples": [
                    "SELECT FROM_DAYS(1);",
                    "SELECT FROM_DAYS(730000);",
                    "SELECT CONCAT('Date is: ', FROM_DAYS(738000));"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 612,
        "database_name": "BUTTERTrans_612",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO t VALUES (0, REPEAT('x', 120000)), (1, REPEAT('z', 12000)); -- REPEAT",
        "target_query": "INSERT INTO t VALUES (0, REPEAT('x', 120000)), (1, REPEAT('z', 12000));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 25,
                "end_pos": 31
            },
            {
                "dialect_token": "REPEAT",
                "start_pos": 51,
                "end_pos": 57
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(i, int, )\n(b, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(i, int(11), )\n(b, longtext, )\n"
        ]
    },
    {
        "sql_id": 613,
        "database_name": "BUTTERTrans_613",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT LENGTH(b) FROM (SELECT * FROM t INTERSECT SELECT * FROM t) derived; -- LENGTH",
        "target_query": "SELECT LENGTH(b) FROM (SELECT * FROM t INTERSECT SELECT * FROM t) derived;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "LENGTH",
                "start_pos": 7,
                "end_pos": 13
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(i, int, )\n(b, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(i, int(11), )\n(b, longtext, )\n"
        ]
    },
    {
        "sql_id": 614,
        "database_name": "BUTTERTrans_614",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT argument FROM test_log WHERE argument LIKE CONCAT('%azun','dris%'); -- CONCAT",
        "target_query": "SELECT argument FROM test_log WHERE argument LIKE CONCAT('%azun','dris%');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CONCAT",
                "start_pos": 50,
                "end_pos": 56
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `test_log`\nColumns:\n(argument, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `test_log`\nColumns:\n(argument, text, )\n"
        ]
    },
    {
        "sql_id": 615,
        "database_name": "BUTTERTrans_615",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select row(10,2,3) IN (row(3,2,3), row(1,2,3), row(1,3,3)); -- ROW",
        "target_query": "select row(10,2,3) IN (row(3,2,3), row(1,2,3), row(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 23,
                "end_pos": 26
            },
            {
                "dialect_token": "ROW",
                "start_pos": 35,
                "end_pos": 38
            },
            {
                "dialect_token": "ROW",
                "start_pos": 47,
                "end_pos": 50
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 616,
        "database_name": "BUTTERTrans_616",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select row(1,2,3) IN (row(3,NULL,3), row(1,2,3), row(1,3,3)); -- ROW",
        "target_query": "select row(1,2,3) IN (row(3,NULL,3), row(1,2,3), row(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 22,
                "end_pos": 25
            },
            {
                "dialect_token": "ROW",
                "start_pos": 37,
                "end_pos": 40
            },
            {
                "dialect_token": "ROW",
                "start_pos": 49,
                "end_pos": 52
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 617,
        "database_name": "BUTTERTrans_617",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select row(10,2,3) IN (row(3,NULL,3), row(1,2,3), row(1,3,3)); -- ROW",
        "target_query": "select row(10,2,3) IN (row(3,NULL,3), row(1,2,3), row(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 23,
                "end_pos": 26
            },
            {
                "dialect_token": "ROW",
                "start_pos": 38,
                "end_pos": 41
            },
            {
                "dialect_token": "ROW",
                "start_pos": 50,
                "end_pos": 53
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 618,
        "database_name": "BUTTERTrans_618",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select row('a',1.5,3) IN (row(1,2,3), row('a',1.5,3), row('a','a','a')); -- ROW",
        "target_query": "select row('a',1.5,3) IN (row(1,2,3), row('a',1.5,3), row('a','a','a'));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 26,
                "end_pos": 29
            },
            {
                "dialect_token": "ROW",
                "start_pos": 38,
                "end_pos": 41
            },
            {
                "dialect_token": "ROW",
                "start_pos": 54,
                "end_pos": 57
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 619,
        "database_name": "BUTTERTrans_619",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select row('a',0,3) IN (row(3,2,3), row('a','a','3'), row(1,3,3)); -- ROW",
        "target_query": "select row('a',0,3) IN (row(3,2,3), row('a','a','3'), row(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 24,
                "end_pos": 27
            },
            {
                "dialect_token": "ROW",
                "start_pos": 36,
                "end_pos": 39
            },
            {
                "dialect_token": "ROW",
                "start_pos": 54,
                "end_pos": 57
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 620,
        "database_name": "BUTTERTrans_620",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select row('a',0,3) IN (row(3,2,3), row('a','0','3'), row(1,3,3)); -- ROW",
        "target_query": "select row('a',0,3) IN (row(3,2,3), row('a','0','3'), row(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 24,
                "end_pos": 27
            },
            {
                "dialect_token": "ROW",
                "start_pos": 36,
                "end_pos": 39
            },
            {
                "dialect_token": "ROW",
                "start_pos": 54,
                "end_pos": 57
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 621,
        "database_name": "BUTTERTrans_621",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select row('a',1.5,3) IN (row(3,NULL,3), row('a',1.5,3), row(1,3,3)); -- ROW",
        "target_query": "select row('a',1.5,3) IN (row(3,NULL,3), row('a',1.5,3), row(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 26,
                "end_pos": 29
            },
            {
                "dialect_token": "ROW",
                "start_pos": 41,
                "end_pos": 44
            },
            {
                "dialect_token": "ROW",
                "start_pos": 57,
                "end_pos": 60
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 622,
        "database_name": "BUTTERTrans_622",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select row('b',1.5,3) IN (row(3,NULL,3), row('a',1.5,3), row(1,3,3)); -- ROW",
        "target_query": "select row('b',1.5,3) IN (row(3,NULL,3), row('a',1.5,3), row(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 26,
                "end_pos": 29
            },
            {
                "dialect_token": "ROW",
                "start_pos": 41,
                "end_pos": 44
            },
            {
                "dialect_token": "ROW",
                "start_pos": 57,
                "end_pos": 60
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 623,
        "database_name": "BUTTERTrans_623",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select row('b',1.5,3) IN (row('b',NULL,3), row('a',1.5,3), row(1,3,3)); -- ROW",
        "target_query": "select row('b',1.5,3) IN (row('b',NULL,3), row('a',1.5,3), row(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 26,
                "end_pos": 29
            },
            {
                "dialect_token": "ROW",
                "start_pos": 43,
                "end_pos": 46
            },
            {
                "dialect_token": "ROW",
                "start_pos": 59,
                "end_pos": 62
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 624,
        "database_name": "BUTTERTrans_624",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select row('b',1.5,3) IN (row('b',NULL,4), row('a',1.5,3), row(1,3,3)); -- ROW",
        "target_query": "select row('b',1.5,3) IN (row('b',NULL,4), row('a',1.5,3), row(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 26,
                "end_pos": 29
            },
            {
                "dialect_token": "ROW",
                "start_pos": 43,
                "end_pos": 46
            },
            {
                "dialect_token": "ROW",
                "start_pos": 59,
                "end_pos": 62
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 625,
        "database_name": "BUTTERTrans_625",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select row(1,2,row(3,4)) IN (row(3,2,row(3,4)), row(1,2,row(3,NULL))); -- ROW",
        "target_query": "select row(1,2,row(3,4)) IN (row(3,2,row(3,4)), row(1,2,row(3,NULL)));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 15,
                "end_pos": 18
            },
            {
                "dialect_token": "ROW",
                "start_pos": 29,
                "end_pos": 32
            },
            {
                "dialect_token": "ROW",
                "start_pos": 37,
                "end_pos": 40
            },
            {
                "dialect_token": "ROW",
                "start_pos": 48,
                "end_pos": 51
            },
            {
                "dialect_token": "ROW",
                "start_pos": 56,
                "end_pos": 59
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 626,
        "database_name": "BUTTERTrans_626",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "explain select row(1,2,row(3,4)) IN (row(3,2,row(3,4)), row(1,2,row(3,NULL))); -- ROW",
        "target_query": "explain select row(1,2,row(3,4)) IN (row(3,2,row(3,4)), row(1,2,row(3,NULL)));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 15,
                "end_pos": 18
            },
            {
                "dialect_token": "ROW",
                "start_pos": 23,
                "end_pos": 26
            },
            {
                "dialect_token": "ROW",
                "start_pos": 37,
                "end_pos": 40
            },
            {
                "dialect_token": "ROW",
                "start_pos": 45,
                "end_pos": 48
            },
            {
                "dialect_token": "ROW",
                "start_pos": 56,
                "end_pos": 59
            },
            {
                "dialect_token": "ROW",
                "start_pos": 64,
                "end_pos": 67
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 627,
        "database_name": "BUTTERTrans_627",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select row(1,2,row(3,null)) IN (row(3,2,row(3,4)), row(1,2,row(4,5))); -- ROW",
        "target_query": "select row(1,2,row(3,null)) IN (row(3,2,row(3,4)), row(1,2,row(4,5)));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 15,
                "end_pos": 18
            },
            {
                "dialect_token": "ROW",
                "start_pos": 32,
                "end_pos": 35
            },
            {
                "dialect_token": "ROW",
                "start_pos": 40,
                "end_pos": 43
            },
            {
                "dialect_token": "ROW",
                "start_pos": 51,
                "end_pos": 54
            },
            {
                "dialect_token": "ROW",
                "start_pos": 59,
                "end_pos": 62
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 628,
        "database_name": "BUTTERTrans_628",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select row(1,2,row(3,null)) IN (row(3,2,row(3,4)), row(1,2,row(3,5))); -- ROW",
        "target_query": "select row(1,2,row(3,null)) IN (row(3,2,row(3,4)), row(1,2,row(3,5)));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 15,
                "end_pos": 18
            },
            {
                "dialect_token": "ROW",
                "start_pos": 32,
                "end_pos": 35
            },
            {
                "dialect_token": "ROW",
                "start_pos": 40,
                "end_pos": 43
            },
            {
                "dialect_token": "ROW",
                "start_pos": 51,
                "end_pos": 54
            },
            {
                "dialect_token": "ROW",
                "start_pos": 59,
                "end_pos": 62
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 629,
        "database_name": "BUTTERTrans_629",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW(1,2,3)=ROW(1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)=ROW(1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 18,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 630,
        "database_name": "BUTTERTrans_630",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW(2,2,3)=ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(2,2,3)=ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 18,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 631,
        "database_name": "BUTTERTrans_631",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW(1,2,3)=ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)=ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 18,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 632,
        "database_name": "BUTTERTrans_632",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW(1,2,3)<ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)<ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 18,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 633,
        "database_name": "BUTTERTrans_633",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW(1,2,3)>ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)>ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 18,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 634,
        "database_name": "BUTTERTrans_634",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW(1,2,3)<=ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)<=ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 19,
                "end_pos": 22
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 635,
        "database_name": "BUTTERTrans_635",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW(1,2,3)>=ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)>=ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 19,
                "end_pos": 22
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 636,
        "database_name": "BUTTERTrans_636",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW(1,2,3)<>ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)<>ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 19,
                "end_pos": 22
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 637,
        "database_name": "BUTTERTrans_637",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW(NULL,2,3)=ROW(NULL,2,3); -- ROW",
        "target_query": "SELECT ROW(NULL,2,3)=ROW(NULL,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 21,
                "end_pos": 24
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 638,
        "database_name": "BUTTERTrans_638",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW(1,2,ROW(3,4,5))=ROW(1,2,ROW(3,4,5)); -- ROW",
        "target_query": "SELECT ROW(1,2,ROW(3,4,5))=ROW(1,2,ROW(3,4,5));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 15,
                "end_pos": 18
            },
            {
                "dialect_token": "ROW",
                "start_pos": 27,
                "end_pos": 30
            },
            {
                "dialect_token": "ROW",
                "start_pos": 35,
                "end_pos": 38
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 639,
        "database_name": "BUTTERTrans_639",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW('test',2,3.33)=ROW('test',2,3.33); -- ROW",
        "target_query": "SELECT ROW('test',2,3.33)=ROW('test',2,3.33);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 26,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 640,
        "database_name": "BUTTERTrans_640",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,33)); -- ROW",
        "target_query": "SELECT ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,33));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 20,
                "end_pos": 23
            },
            {
                "dialect_token": "ROW",
                "start_pos": 31,
                "end_pos": 34
            },
            {
                "dialect_token": "ROW",
                "start_pos": 44,
                "end_pos": 47
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 641,
        "database_name": "BUTTERTrans_641",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,3)); -- ROW",
        "target_query": "SELECT ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 20,
                "end_pos": 23
            },
            {
                "dialect_token": "ROW",
                "start_pos": 31,
                "end_pos": 34
            },
            {
                "dialect_token": "ROW",
                "start_pos": 44,
                "end_pos": 47
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 642,
        "database_name": "BUTTERTrans_642",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,NULL)); -- ROW",
        "target_query": "SELECT ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,NULL));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 20,
                "end_pos": 23
            },
            {
                "dialect_token": "ROW",
                "start_pos": 31,
                "end_pos": 34
            },
            {
                "dialect_token": "ROW",
                "start_pos": 44,
                "end_pos": 47
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 643,
        "database_name": "BUTTERTrans_643",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select * from t1 where ROW(1,2,3)=ROW(a,b,c); -- ROW",
        "target_query": "select * from t1 where ROW(1,2,3)=ROW(a,b,c);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 23,
                "end_pos": 26
            },
            {
                "dialect_token": "ROW",
                "start_pos": 34,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n(c, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, int(11), )\n(c, int(11), )\n"
        ]
    },
    {
        "sql_id": 644,
        "database_name": "BUTTERTrans_644",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select * from t1 where ROW(0,2,3)=ROW(a,b,c); -- ROW",
        "target_query": "select * from t1 where ROW(0,2,3)=ROW(a,b,c);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 23,
                "end_pos": 26
            },
            {
                "dialect_token": "ROW",
                "start_pos": 34,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n(c, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, int(11), )\n(c, int(11), )\n"
        ]
    },
    {
        "sql_id": 645,
        "database_name": "BUTTERTrans_645",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select * from t1 where ROW(1,2,3)<ROW(a,b,c); -- ROW",
        "target_query": "select * from t1 where ROW(1,2,3)<ROW(a,b,c);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 23,
                "end_pos": 26
            },
            {
                "dialect_token": "ROW",
                "start_pos": 34,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n(c, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, int(11), )\n(c, int(11), )\n"
        ]
    },
    {
        "sql_id": 646,
        "database_name": "BUTTERTrans_646",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select ROW(a,2,3) IN(row(1,b,c), row(2,3,1)) from t1; -- ROW",
        "target_query": "select ROW(a,2,3) IN(row(1,b,c), row(2,3,1)) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 21,
                "end_pos": 24
            },
            {
                "dialect_token": "ROW",
                "start_pos": 33,
                "end_pos": 36
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n(c, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, int(11), )\n(c, int(11), )\n"
        ]
    },
    {
        "sql_id": 647,
        "database_name": "BUTTERTrans_647",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select ROW(c,2,3) IN(row(1,b,a), row(2,3,1)) from t1; -- ROW",
        "target_query": "select ROW(c,2,3) IN(row(1,b,a), row(2,3,1)) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 21,
                "end_pos": 24
            },
            {
                "dialect_token": "ROW",
                "start_pos": 33,
                "end_pos": 36
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n(c, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, int(11), )\n(c, int(11), )\n"
        ]
    },
    {
        "sql_id": 648,
        "database_name": "BUTTERTrans_648",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select ROW(a,b,c) IN(row(1,2,3), row(3,2,1)) from t1; -- ROW",
        "target_query": "select ROW(a,b,c) IN(row(1,2,3), row(3,2,1)) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 21,
                "end_pos": 24
            },
            {
                "dialect_token": "ROW",
                "start_pos": 33,
                "end_pos": 36
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n(c, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, int(11), )\n(c, int(11), )\n"
        ]
    },
    {
        "sql_id": 649,
        "database_name": "BUTTERTrans_649",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "select ROW(1,2,3) IN(row(a,b,c), row(1,2,3)) from t1; -- ROW",
        "target_query": "select ROW(1,2,3) IN(row(a,b,c), row(1,2,3)) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 21,
                "end_pos": 24
            },
            {
                "dialect_token": "ROW",
                "start_pos": 33,
                "end_pos": 36
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n(c, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, int(11), )\n(c, int(11), )\n"
        ]
    },
    {
        "sql_id": 650,
        "database_name": "BUTTERTrans_650",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW(1,1,1) = ROW(1,1,1), ROW(1,1,1) = ROW(1,2,1), ROW(1,NULL,1) = ROW(2,2,1), ROW(1,NULL,1) = ROW(1,2,2), ROW(1,NULL,1) = ROW(1,2,1) ; -- ROW",
        "target_query": "SELECT ROW(1,1,1) = ROW(1,1,1), ROW(1,1,1) = ROW(1,2,1), ROW(1,NULL,1) = ROW(2,2,1), ROW(1,NULL,1) = ROW(1,2,2), ROW(1,NULL,1) = ROW(1,2,1);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 20,
                "end_pos": 23
            },
            {
                "dialect_token": "ROW",
                "start_pos": 32,
                "end_pos": 35
            },
            {
                "dialect_token": "ROW",
                "start_pos": 45,
                "end_pos": 48
            },
            {
                "dialect_token": "ROW",
                "start_pos": 57,
                "end_pos": 60
            },
            {
                "dialect_token": "ROW",
                "start_pos": 73,
                "end_pos": 76
            },
            {
                "dialect_token": "ROW",
                "start_pos": 85,
                "end_pos": 88
            },
            {
                "dialect_token": "ROW",
                "start_pos": 101,
                "end_pos": 104
            },
            {
                "dialect_token": "ROW",
                "start_pos": 113,
                "end_pos": 116
            },
            {
                "dialect_token": "ROW",
                "start_pos": 129,
                "end_pos": 132
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 651,
        "database_name": "BUTTERTrans_651",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW(a, 1) IN (SELECT SUM(b), 1) FROM t1 GROUP BY a; -- ROW",
        "target_query": "SELECT ROW(a, 1) IN (SELECT SUM(b), 1) FROM t1 GROUP BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 652,
        "database_name": "BUTTERTrans_652",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW(a, 1) IN (SELECT SUM(b), 3) FROM t1 GROUP BY a; -- ROW",
        "target_query": "SELECT ROW(a, 1) IN (SELECT SUM(b), 3) FROM t1 GROUP BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 653,
        "database_name": "BUTTERTrans_653",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT 1 FROM t1 WHERE ROW(a, b) >=ROW('1', (SELECT 1 FROM t1 WHERE a > '1234')); -- ROW",
        "target_query": "SELECT 1 FROM t1 WHERE ROW(a, b) >=ROW('1', (SELECT 1 FROM t1 WHERE a > '1234'));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 23,
                "end_pos": 26
            },
            {
                "dialect_token": "ROW",
                "start_pos": 35,
                "end_pos": 38
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, tinyint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, tinyint(4), )\n"
        ]
    },
    {
        "sql_id": 654,
        "database_name": "BUTTERTrans_654",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW(1,2) = (SELECT 1,2 FROM t1 WHERE 1 = 0); -- ROW",
        "target_query": "SELECT ROW(1,2) = (SELECT 1,2 FROM t1 WHERE 1 = 0);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int(11), )\n"
        ]
    },
    {
        "sql_id": 655,
        "database_name": "BUTTERTrans_655",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT ROW(1,2) = (SELECT 1,3 FROM t1 WHERE 1 = 0); -- ROW",
        "target_query": "SELECT ROW(1,2) = (SELECT 1,3 FROM t1 WHERE 1 = 0);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int(11), )\n"
        ]
    },
    {
        "sql_id": 656,
        "database_name": "BUTTERTrans_656",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "EXPLAIN SELECT row( min(a), 1 ) = row( a, 1 ) AS al FROM t1 GROUP BY a; -- ROW",
        "target_query": "EXPLAIN SELECT row( min(a), 1 ) = row( a, 1 ) AS al FROM t1 GROUP BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 15,
                "end_pos": 18
            },
            {
                "dialect_token": "ROW",
                "start_pos": 34,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n"
        ]
    },
    {
        "sql_id": 657,
        "database_name": "BUTTERTrans_657",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT row( min(a), 1 ) = row( a, 1 ) AS al FROM t1 GROUP BY a; -- ROW",
        "target_query": "SELECT row( min(a), 1 ) = row( a, 1 ) AS al FROM t1 GROUP BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ROW",
                "start_pos": 7,
                "end_pos": 10
            },
            {
                "dialect_token": "ROW",
                "start_pos": 26,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n"
        ]
    },
    {
        "sql_id": 658,
        "database_name": "BUTTERTrans_658",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD(NULL, 5, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "RPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 659,
        "database_name": "BUTTERTrans_659",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT RPAD(NULL, NULL, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD(NULL, NULL, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "RPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 660,
        "database_name": "BUTTERTrans_660",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT RPAD(NULL, NULL, NULL) AS result; -- RPAD",
        "target_query": "SELECT RPAD(NULL, NULL, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "RPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 661,
        "database_name": "BUTTERTrans_661",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT RPAD('a', NULL, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', NULL, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "RPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 662,
        "database_name": "BUTTERTrans_662",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT RPAD('a', NULL, NULL) AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', NULL, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "RPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 663,
        "database_name": "BUTTERTrans_663",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT RPAD('a', 5, NULL) AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', 5, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "RPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 664,
        "database_name": "BUTTERTrans_664",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT RPAD(NULL, 5, NULL) AS result; -- RPAD",
        "target_query": "SELECT RPAD(NULL, 5, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "RPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 665,
        "database_name": "BUTTERTrans_665",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT RPAD('a', 0, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', 0, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "RPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 666,
        "database_name": "BUTTERTrans_666",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT RPAD('a', 0, '') AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', 0, '') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "RPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 667,
        "database_name": "BUTTERTrans_667",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT RPAD('', 0, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD('', 0, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "RPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 668,
        "database_name": "BUTTERTrans_668",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT RPAD('', 0, '') AS result; -- RPAD",
        "target_query": "SELECT RPAD('', 0, '') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "RPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 669,
        "database_name": "BUTTERTrans_669",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT RPAD('a', -1, 'x'); -- RPAD",
        "target_query": "SELECT RPAD('a', -1, 'x');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "RPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 670,
        "database_name": "BUTTERTrans_670",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT RPAD('123456787890', 1, 'x'); -- RPAD",
        "target_query": "SELECT RPAD('123456787890', 1, 'x');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "RPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 671,
        "database_name": "BUTTERTrans_671",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT RPAD('a', 5, 'xy'); -- RPAD",
        "target_query": "SELECT RPAD('a', 5, 'xy');",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "RPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 672,
        "database_name": "BUTTERTrans_672",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT RPAD(\"I LOVE SQL\", 20, \" \"); -- RPAD",
        "target_query": "SELECT RPAD(\"I LOVE SQL\", 20, \" \");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "RPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 673,
        "database_name": "BUTTERTrans_673",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT RPAD(\"I LOVE SQL in the morning\", 20, \" \"); -- RPAD",
        "target_query": "SELECT RPAD(\"I LOVE SQL in the morning\", 20, \" \");",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "RPAD",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 674,
        "database_name": "BUTTERTrans_674",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "EXPLAIN SELECT * FROM t1 WHERE ISNULL(t1.a IN (SELECT t3.a FROM t1 t3)); -- ISNULL",
        "target_query": "EXPLAIN SELECT * FROM t1 WHERE ISNULL(t1.a IN (SELECT t3.a FROM t1 t3));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ISNULL",
                "start_pos": 31,
                "end_pos": 37
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Returns 1 if the expression is NULL, otherwise returns 0.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL(5 + NULL);",
                    "SELECT IF(ISNULL(score), 'N/A', score) FROM students;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Checks whether a value is NULL. Returns 1 if NULL, 0 otherwise.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL('abc');",
                    "SELECT IF(ISNULL(balance), 0, balance) FROM accounts;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 675,
        "database_name": "BUTTERTrans_675",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT * FROM t1 WHERE ISNULL(t1.a IN (SELECT t3.a FROM t1 t3)); -- ISNULL",
        "target_query": "SELECT * FROM t1 WHERE ISNULL(t1.a IN (SELECT t3.a FROM t1 t3));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ISNULL",
                "start_pos": 23,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Returns 1 if the expression is NULL, otherwise returns 0.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL(5 + NULL);",
                    "SELECT IF(ISNULL(score), 'N/A', score) FROM students;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Checks whether a value is NULL. Returns 1 if NULL, 0 otherwise.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL('abc');",
                    "SELECT IF(ISNULL(balance), 0, balance) FROM accounts;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 676,
        "database_name": "BUTTERTrans_676",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "EXPLAIN SELECT * FROM t1 WHERE (SELECT b FROM t2 WHERE CAST(UUID() AS CHAR) = CAST(t2.a AS CHAR)) > 0; -- UUID",
        "target_query": "EXPLAIN SELECT * FROM t1 WHERE (SELECT b FROM t2 WHERE CAST(UUID() as CHAR) = CAST(t2.a AS CHAR)) > 0;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "UUID",
                "start_pos": 60,
                "end_pos": 64
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UUID()",
                "description": "In MySQL, the UUID() function generates a unique 128-bit identifier, typically represented as a string containing numbers and letters, in the standard UUID format.",
                "examples": [
                    "SELECT UUID();",
                    "SELECT CONCAT(UUID(), 'some_random_string');",
                    "SELECT UPPER(UUID());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UUID()",
                "description": "MariaDB supports the UUID() function, generating a unique 128-bit identifier in the same format as MySQL.",
                "examples": [
                    "SELECT UUID();",
                    "SELECT CONCAT(UUID(), 'some_random_string');",
                    "SELECT UPPER(UUID());"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(x, int, )\n(y, int, )\n",
            "Table: `t2`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(x, int(11), )\n(y, int(11), )\n",
            "Table: `t2`\nColumns:\n(a, int(11), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 677,
        "database_name": "BUTTERTrans_677",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- COALESCE",
        "target_query": "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "COALESCE",
                "start_pos": 15,
                "end_pos": 23
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Same as MySQL: COALESCE function and partition coalescing supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 13;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n",
            "Table: `t3`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n",
            "Table: `t3`\nColumns:\n(a, int(11), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 678,
        "database_name": "BUTTERTrans_678",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "EXPLAIN SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- COALESCE",
        "target_query": "EXPLAIN SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "COALESCE",
                "start_pos": 23,
                "end_pos": 31
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Same as MySQL: COALESCE function and partition coalescing supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 13;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n",
            "Table: `t3`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n",
            "Table: `t3`\nColumns:\n(a, int(11), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 679,
        "database_name": "BUTTERTrans_679",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT (SELECT IFNULL(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- IFNULL",
        "target_query": "SELECT (SELECT IFNULL(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IFNULL",
                "start_pos": 15,
                "end_pos": 21
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n",
            "Table: `t3`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n",
            "Table: `t3`\nColumns:\n(a, int(11), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 680,
        "database_name": "BUTTERTrans_680",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "EXPLAIN SELECT (SELECT IFNULL(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- IFNULL",
        "target_query": "EXPLAIN SELECT (SELECT IFNULL(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "IFNULL",
                "start_pos": 23,
                "end_pos": 29
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n",
            "Table: `t3`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int(11), )\n",
            "Table: `t3`\nColumns:\n(a, int(11), )\n(b, int(11), )\n"
        ]
    },
    {
        "sql_id": 681,
        "database_name": "BUTTERTrans_681",
        "source_dbms": "mysql",
        "target_dbms": "mariadb",
        "source_query": "SELECT TRIM(f1), COUNT(*) FROM table_varchar_pad_space GROUP BY f1; -- TRIM, COUNT",
        "target_query": "SELECT TRIM(f1), COUNT(*) FROM table_varchar_pad_space GROUP BY f1;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "TRIM",
                "start_pos": 7,
                "end_pos": 11
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            },
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function in MariaDB behaves exactly as in MySQL, removing specified characters or spaces from the beginning or end of the string.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            },
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `table_varchar_pad_space`\nColumns:\n(f1, varchar(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `table_varchar_pad_space`\nColumns:\n(f1, varchar(20), )\n"
        ]
    },
    {
        "sql_id": 682,
        "database_name": "BUTTERTrans_682",
        "source_dbms": "postgresql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO clstr_tst (a, b, c, d) VALUES (32, 6, 'seis', repeat('xyzzy', 10000)); -- REPEAT",
        "target_query": "INSERT INTO clstr_tst (a, b, c, d) VALUES (32, 6, 'seis', repeat('xyzzy', 10000));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 58,
                "end_pos": 64
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `clstr_tst`\nColumns:\n(a, integer, PRI)\n(b, integer, )\n(c, text, )\n(d, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `clstr_tst`\nColumns:\n(a, int(11), PRI)\n(b, int(11), )\n(c, text, )\n(d, text, )\n"
        ]
    },
    {
        "sql_id": 683,
        "database_name": "BUTTERTrans_683",
        "source_dbms": "postgresql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO tidrangescan SELECT i,repeat('x', 100) FROM generate_series(1,200) AS s(i); -- REPEAT, GENERATE_SERIES",
        "target_query": "INSERT INTO tidrangescan SELECT n, REPEAT('x', 100) FROM (WITH RECURSIVE seq(n) AS (SELECT 1 UNION ALL SELECT n + 1 FROM seq WHERE n + 1 <= 200) SELECT * FROM seq) AS s;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 34,
                "end_pos": 40
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            },
            {
                "expression": "generate_series(start, stop [, step])",
                "description": "Generates a series of integers or timestamps between start and stop with an optional step.",
                "examples": [
                    "SELECT generate_series(1, 5);",
                    "SELECT generate_series(3, 9, 2);",
                    "SELECT generate_series(10, 6, -2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            },
            {
                "expression": "WITH RECURSIVE seq(n) AS (...) SELECT * FROM seq",
                "description": "Simulates series generation using recursive common table expressions (CTEs).",
                "examples": [
                    "WITH RECURSIVE seq(n) AS (SELECT 1 UNION ALL SELECT n + 1 FROM seq WHERE n + 1 <= 5) SELECT * FROM seq;",
                    "WITH RECURSIVE seq(n) AS (SELECT 3 UNION ALL SELECT n + 2 FROM seq WHERE n + 2 <= 9) SELECT * FROM seq;",
                    "WITH RECURSIVE seq(n) AS (SELECT 10 UNION ALL SELECT n - 2 FROM seq WHERE n - 2 >= 6) SELECT * FROM seq;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `tidrangescan`\nColumns:\n(id, integer, )\n(data, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `tidrangescan`\nColumns:\n(id, int(11), )\n(data, text, )\n"
        ]
    },
    {
        "sql_id": 684,
        "database_name": "BUTTERTrans_684",
        "source_dbms": "postgresql",
        "target_dbms": "mariadb",
        "source_query": "SELECT pg_sleep(0.1); -- PG_SLEEP",
        "target_query": "SELECT SLEEP(0.1);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "PG_SLEEP",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "pg_sleep(seconds)",
                "description": "Delays execution for the specified number of seconds.",
                "examples": [
                    "SELECT pg_sleep(1);",
                    "SELECT pg_sleep(0.5);",
                    "SELECT pg_sleep(2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SLEEP(seconds)",
                "description": "Pauses execution for the given number of seconds.",
                "examples": [
                    "SELECT SLEEP(1);",
                    "SELECT SLEEP(0.5);",
                    "SELECT SLEEP(2);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `timestamp_tbl`\nColumns:\n(d1, timestamp(2) without time zone, )\n"
        ],
        "target_related_schemas": [
            "Table: `TIMESTAMP_TBL`\nColumns:\n(d1, timestamp(2), )\n"
        ]
    },
    {
        "sql_id": 685,
        "database_name": "BUTTERTrans_685",
        "source_dbms": "postgresql",
        "target_dbms": "mariadb",
        "source_query": "SELECT pg_sleep(0.1); -- PG_SLEEP",
        "target_query": "SELECT SLEEP(0.1);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "PG_SLEEP",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "pg_sleep(seconds)",
                "description": "Delays execution for the specified number of seconds.",
                "examples": [
                    "SELECT pg_sleep(1);",
                    "SELECT pg_sleep(0.5);",
                    "SELECT pg_sleep(2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SLEEP(seconds)",
                "description": "Pauses execution for the given number of seconds.",
                "examples": [
                    "SELECT SLEEP(1);",
                    "SELECT SLEEP(0.5);",
                    "SELECT SLEEP(2);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `timestamp_tbl`\nColumns:\n(d1, timestamp(2) without time zone, )\n"
        ],
        "target_related_schemas": [
            "Table: `TIMESTAMP_TBL`\nColumns:\n(d1, timestamp(2), )\n"
        ]
    },
    {
        "sql_id": 686,
        "database_name": "BUTTERTrans_686",
        "source_dbms": "postgresql",
        "target_dbms": "mariadb",
        "source_query": "SELECT pg_sleep(0.1); -- PG_SLEEP",
        "target_query": "SELECT SLEEP(0.1);",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "PG_SLEEP",
                "start_pos": 7,
                "end_pos": 15
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "pg_sleep(seconds)",
                "description": "Delays execution for the specified number of seconds.",
                "examples": [
                    "SELECT pg_sleep(1);",
                    "SELECT pg_sleep(0.5);",
                    "SELECT pg_sleep(2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SLEEP(seconds)",
                "description": "Pauses execution for the given number of seconds.",
                "examples": [
                    "SELECT SLEEP(1);",
                    "SELECT SLEEP(0.5);",
                    "SELECT SLEEP(2);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `timestamp_tbl`\nColumns:\n(d1, timestamp(2) without time zone, )\n"
        ],
        "target_related_schemas": [
            "Table: `TIMESTAMP_TBL`\nColumns:\n(d1, timestamp(2), )\n"
        ]
    },
    {
        "sql_id": 687,
        "database_name": "BUTTERTrans_687",
        "source_dbms": "postgresql",
        "target_dbms": "mariadb",
        "source_query": "SELECT generate_series(1, 3); -- GENERATE_SERIES",
        "target_query": "WITH RECURSIVE seq(n) AS (SELECT 1 UNION ALL SELECT n + 1 FROM seq WHERE n + 1 <= 3) SELECT * FROM seq;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GENERATE_SERIES",
                "start_pos": 7,
                "end_pos": 22
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "generate_series(start, stop [, step])",
                "description": "Generates a series of integers or timestamps between start and stop with an optional step.",
                "examples": [
                    "SELECT generate_series(1, 5);",
                    "SELECT generate_series(3, 9, 2);",
                    "SELECT generate_series(10, 6, -2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "WITH RECURSIVE seq(n) AS (...) SELECT * FROM seq",
                "description": "Simulates series generation using recursive common table expressions (CTEs).",
                "examples": [
                    "WITH RECURSIVE seq(n) AS (SELECT 1 UNION ALL SELECT n + 1 FROM seq WHERE n + 1 <= 5) SELECT * FROM seq;",
                    "WITH RECURSIVE seq(n) AS (SELECT 3 UNION ALL SELECT n + 2 FROM seq WHERE n + 2 <= 9) SELECT * FROM seq;",
                    "WITH RECURSIVE seq(n) AS (SELECT 10 UNION ALL SELECT n - 2 FROM seq WHERE n - 2 >= 6) SELECT * FROM seq;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 688,
        "database_name": "BUTTERTrans_688",
        "source_dbms": "postgresql",
        "target_dbms": "mariadb",
        "source_query": "SELECT generate_series(1, 3) AS val1, generate_series(3,5) AS val2; -- GENERATE_SERIES",
        "target_query": "WITH RECURSIVE seq1(n) AS (SELECT 1 UNION ALL SELECT n + 1 FROM seq1 WHERE n + 1 <= 3), seq2(n) AS (SELECT 3 UNION ALL SELECT n + 1 FROM seq2 WHERE n + 1 <= 5) SELECT seq1.n AS val1, seq2.n AS val2 FROM seq1, seq2;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GENERATE_SERIES",
                "start_pos": 7,
                "end_pos": 22
            },
            {
                "dialect_token": "GENERATE_SERIES",
                "start_pos": 38,
                "end_pos": 53
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "generate_series(start, stop [, step])",
                "description": "Generates a series of integers or timestamps between start and stop with an optional step.",
                "examples": [
                    "SELECT generate_series(1, 5);",
                    "SELECT generate_series(3, 9, 2);",
                    "SELECT generate_series(10, 6, -2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "WITH RECURSIVE seq(n) AS (...) SELECT * FROM seq",
                "description": "Simulates series generation using recursive common table expressions (CTEs).",
                "examples": [
                    "WITH RECURSIVE seq(n) AS (SELECT 1 UNION ALL SELECT n + 1 FROM seq WHERE n + 1 <= 5) SELECT * FROM seq;",
                    "WITH RECURSIVE seq(n) AS (SELECT 3 UNION ALL SELECT n + 2 FROM seq WHERE n + 2 <= 9) SELECT * FROM seq;",
                    "WITH RECURSIVE seq(n) AS (SELECT 10 UNION ALL SELECT n - 2 FROM seq WHERE n - 2 >= 6) SELECT * FROM seq;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 689,
        "database_name": "BUTTERTrans_689",
        "source_dbms": "postgresql",
        "target_dbms": "mariadb",
        "source_query": "SELECT generate_series(1, 2) AS val1, generate_series(1,4) AS val2; -- GENERATE_SERIES",
        "target_query": "WITH RECURSIVE seq1(n) AS (SELECT 1 UNION ALL SELECT n + 1 FROM seq1 WHERE n + 1 <= 2), seq2(n) AS (SELECT 1 UNION ALL SELECT n + 1 FROM seq2 WHERE n + 1 <= 4) SELECT seq1.n AS val1, seq2.n AS val2 FROM seq1, seq2;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GENERATE_SERIES",
                "start_pos": 7,
                "end_pos": 22
            },
            {
                "dialect_token": "GENERATE_SERIES",
                "start_pos": 38,
                "end_pos": 53
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "generate_series(start, stop [, step])",
                "description": "Generates a series of integers or timestamps between start and stop with an optional step.",
                "examples": [
                    "SELECT generate_series(1, 5);",
                    "SELECT generate_series(3, 9, 2);",
                    "SELECT generate_series(10, 6, -2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "WITH RECURSIVE seq(n) AS (...) SELECT * FROM seq",
                "description": "Simulates series generation using recursive common table expressions (CTEs).",
                "examples": [
                    "WITH RECURSIVE seq(n) AS (SELECT 1 UNION ALL SELECT n + 1 FROM seq WHERE n + 1 <= 5) SELECT * FROM seq;",
                    "WITH RECURSIVE seq(n) AS (SELECT 3 UNION ALL SELECT n + 2 FROM seq WHERE n + 2 <= 9) SELECT * FROM seq;",
                    "WITH RECURSIVE seq(n) AS (SELECT 10 UNION ALL SELECT n - 2 FROM seq WHERE n - 2 >= 6) SELECT * FROM seq;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 690,
        "database_name": "BUTTERTrans_690",
        "source_dbms": "postgresql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO cmdata VALUES(repeat('1234567890', 1000)); -- REPEAT",
        "target_query": "INSERT INTO cmdata VALUES(repeat('1234567890', 1000));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 26,
                "end_pos": 32
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `cmdata`\nColumns:\n(f1, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `cmdata`\nColumns:\n(f1, text, )\n"
        ]
    },
    {
        "sql_id": 691,
        "database_name": "BUTTERTrans_691",
        "source_dbms": "postgresql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO cmdata1 VALUES(repeat('1234567890', 1004)); -- REPEAT",
        "target_query": "INSERT INTO cmdata1 VALUES(repeat('1234567890', 1004));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 27,
                "end_pos": 33
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `cmdata1`\nColumns:\n(f1, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `cmdata1`\nColumns:\n(f1, text, )\n"
        ]
    },
    {
        "sql_id": 692,
        "database_name": "BUTTERTrans_692",
        "source_dbms": "postgresql",
        "target_dbms": "mariadb",
        "source_query": "INSERT INTO delete_test (id, a, b) VALUES (2, 50, repeat('x', 10000)); -- REPEAT",
        "target_query": "INSERT INTO delete_test (id, a, b) VALUES (2, 50, repeat('x', 10000));",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "REPEAT",
                "start_pos": 50,
                "end_pos": 56
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `delete_test`\nColumns:\n(id, integer, PRI)\n(a, integer, )\n(b, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `delete_test`\nColumns:\n(id, int(11), PRI)\n(a, int(11), )\n(b, text, )\n"
        ]
    },
    {
        "sql_id": 693,
        "database_name": "BUTTERTrans_693",
        "source_dbms": "postgresql",
        "target_dbms": "mariadb",
        "source_query": "SELECT current_timestamp = NOW(); -- NOW",
        "target_query": "SELECT NOW() = NOW();",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "NOW",
                "start_pos": 27,
                "end_pos": 30
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CURRENT_TIMESTAMP",
                "description": "In PostgreSQL, CURRENT_TIMESTAMP is used to retrieve the current date and time, equivalent to NOW() in MySQL and MariaDB.",
                "examples": [
                    "SELECT CURRENT_TIMESTAMP;",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > CURRENT_TIMESTAMP) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (CURRENT_TIMESTAMP);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 694,
        "database_name": "BUTTERTrans_694",
        "source_dbms": "postgresql",
        "target_dbms": "mariadb",
        "source_query": "select current_schemas(false); -- CURRENT_SCHEMAS",
        "target_query": "SELECT DATABASE();",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "CURRENT_SCHEMAS",
                "start_pos": 7,
                "end_pos": 22
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "current_schemas(include_implicit boolean)",
                "description": "Returns a text array of schema names in the current search path. The boolean parameter controls whether implicit schemas such as pg_catalog are included.",
                "examples": [
                    "SELECT current_schemas(false);",
                    "SELECT current_schemas(true);",
                    "SELECT unnest(current_schemas(false));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATABASE()",
                "description": "Returns the name of the current database for the connection, analogous to schema name in PostgreSQL.",
                "examples": [
                    "SELECT DATABASE();"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": 695,
        "database_name": "BUTTERTrans_695",
        "source_dbms": "postgresql",
        "target_dbms": "mariadb",
        "source_query": "create table simple1 as select generate_series(1, 200) AS id; -- GENERATE_SERIES",
        "target_query": "CREATE TABLE simple1 AS WITH RECURSIVE seq(n) AS (SELECT 1 UNION ALL SELECT n + 1 FROM seq WHERE n + 1 <= 200) SELECT n AS id FROM seq;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GENERATE_SERIES",
                "start_pos": 31,
                "end_pos": 46
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "generate_series(start, stop [, step])",
                "description": "Generates a series of integers or timestamps between start and stop with an optional step.",
                "examples": [
                    "SELECT generate_series(1, 5);",
                    "SELECT generate_series(3, 9, 2);",
                    "SELECT generate_series(10, 6, -2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "WITH RECURSIVE seq(n) AS (...) SELECT * FROM seq",
                "description": "Simulates series generation using recursive common table expressions (CTEs).",
                "examples": [
                    "WITH RECURSIVE seq(n) AS (SELECT 1 UNION ALL SELECT n + 1 FROM seq WHERE n + 1 <= 5) SELECT * FROM seq;",
                    "WITH RECURSIVE seq(n) AS (SELECT 3 UNION ALL SELECT n + 2 FROM seq WHERE n + 2 <= 9) SELECT * FROM seq;",
                    "WITH RECURSIVE seq(n) AS (SELECT 10 UNION ALL SELECT n - 2 FROM seq WHERE n - 2 >= 6) SELECT * FROM seq;"
                ]
            }
        ],
        "source_related_schemas": [
            "create table simple1 as select generate_series(1, 200) AS id; -- GENERATE_SERIES"
        ],
        "target_related_schemas": [
            "CREATE TABLE simple1 AS WITH RECURSIVE seq(n) AS (SELECT 1 UNION ALL SELECT n + 1 FROM seq WHERE n + 1 <= 200) SELECT n AS id FROM seq;"
        ]
    },
    {
        "sql_id": 696,
        "database_name": "BUTTERTrans_696",
        "source_dbms": "postgresql",
        "target_dbms": "mariadb",
        "source_query": "create table bigger_than_it_looks as select generate_series(1, 200) as id; -- GENERATE_SERIES",
        "target_query": "CREATE TABLE bigger_than_it_looks AS WITH RECURSIVE seq(n) AS (SELECT 1 UNION ALL SELECT n + 1 FROM seq WHERE n + 1 <= 200) SELECT n AS id FROM seq;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "GENERATE_SERIES",
                "start_pos": 44,
                "end_pos": 59
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "generate_series(start, stop [, step])",
                "description": "Generates a series of integers or timestamps between start and stop with an optional step.",
                "examples": [
                    "SELECT generate_series(1, 5);",
                    "SELECT generate_series(3, 9, 2);",
                    "SELECT generate_series(10, 6, -2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "WITH RECURSIVE seq(n) AS (...) SELECT * FROM seq",
                "description": "Simulates series generation using recursive common table expressions (CTEs).",
                "examples": [
                    "WITH RECURSIVE seq(n) AS (SELECT 1 UNION ALL SELECT n + 1 FROM seq WHERE n + 1 <= 5) SELECT * FROM seq;",
                    "WITH RECURSIVE seq(n) AS (SELECT 3 UNION ALL SELECT n + 2 FROM seq WHERE n + 2 <= 9) SELECT * FROM seq;",
                    "WITH RECURSIVE seq(n) AS (SELECT 10 UNION ALL SELECT n - 2 FROM seq WHERE n - 2 >= 6) SELECT * FROM seq;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `simple1`\nColumns:\n(id, integer, )\n"
        ],
        "target_related_schemas": [
            "Table: `simple1`\nColumns:\n(id, int(1), )\n"
        ]
    },
    {
        "sql_id": 697,
        "database_name": "BUTTERTrans_697",
        "source_dbms": "postgresql",
        "target_dbms": "mariadb",
        "source_query": "insert into extremely_skewed select 42 as id, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'from generate_series(1, 200); -- GENERATE_SERIES",
        "target_query": "INSERT INTO extremely_skewed SELECT 42 AS id, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' FROM (WITH RECURSIVE seq(n) AS (SELECT 1 UNION ALL SELECT n + 1 FROM seq WHERE n + 1 <= 200) SELECT * FROM seq) AS series;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [],
        "source_dialect_knowledge": [
            {
                "expression": "generate_series(start, stop [, step])",
                "description": "Generates a series of integers or timestamps between start and stop with an optional step.",
                "examples": [
                    "SELECT generate_series(1, 5);",
                    "SELECT generate_series(3, 9, 2);",
                    "SELECT generate_series(10, 6, -2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "WITH RECURSIVE seq(n) AS (...) SELECT * FROM seq",
                "description": "Simulates series generation using recursive common table expressions (CTEs).",
                "examples": [
                    "WITH RECURSIVE seq(n) AS (SELECT 1 UNION ALL SELECT n + 1 FROM seq WHERE n + 1 <= 5) SELECT * FROM seq;",
                    "WITH RECURSIVE seq(n) AS (SELECT 3 UNION ALL SELECT n + 2 FROM seq WHERE n + 2 <= 9) SELECT * FROM seq;",
                    "WITH RECURSIVE seq(n) AS (SELECT 10 UNION ALL SELECT n - 2 FROM seq WHERE n - 2 >= 6) SELECT * FROM seq;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `bigger_than_it_looks`\nColumns:\n(id, integer, )\n",
            "Table: `extremely_skewed`\nColumns:\n(id, integer, )\n(t, text, )\n",
            "Table: `simple1`\nColumns:\n(id, integer, )\n"
        ],
        "target_related_schemas": [
            "Table: `bigger_than_it_looks`\nColumns:\n(id, int(1), )\n",
            "Table: `extremely_skewed`\nColumns:\n(id, int(11), )\n(t, text, )\n",
            "Table: `simple1`\nColumns:\n(id, int(1), )\n"
        ]
    },
    {
        "sql_id": 698,
        "database_name": "BUTTERTrans_698",
        "source_dbms": "postgresql",
        "target_dbms": "mariadb",
        "source_query": "SELECT a, sum(b), array_agg(distinct c), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3; -- ARRAY_AGG",
        "target_query": "SELECT a, sum(b), GROUP_CONCAT(DISTINCT c), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "ARRAY_AGG",
                "start_pos": 18,
                "end_pos": 27
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ARRAY_AGG(expression [DISTINCT])",
                "description": "Aggregate function that returns an array of all input values, optionally removing duplicates if DISTINCT is specified.",
                "examples": [
                    "SELECT ARRAY_AGG(DISTINCT x) FROM (VALUES (1), (2), (1), (3)) AS t(x);",
                    "SELECT id, ARRAY_AGG(value) FROM my_table GROUP BY id;",
                    "SELECT ARRAY_AGG(DISTINCT LOWER(name)) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "",
                "description": "",
                "examples": []
            }
        ],
        "source_related_schemas": [
            "Table: `pagg_tab_ml`\nColumns:\n(a, integer, )\n(b, integer, )\n(c, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `pagg_tab_ml`\nColumns:\n(a, int(11), )\n(b, int(11), )\n(c, text, )\n"
        ]
    },
    {
        "sql_id": 699,
        "database_name": "BUTTERTrans_699",
        "source_dbms": "postgresql",
        "target_dbms": "mariadb",
        "source_query": "SELECT nextval('seq3'); -- NEXTVAL",
        "target_query": "SELECT NEXT VALUE FOR seq3;",
        "semantic_equivalent_type": "exact_equivalence",
        "source_query_dialect_token_positions": [
            {
                "dialect_token": "NEXTVAL",
                "start_pos": 7,
                "end_pos": 14
            }
        ],
        "source_dialect_knowledge": [
            {
                "expression": "nextval('sequence_name')",
                "description": "Returns the next value from a named sequence and increments the counter atomically.",
                "examples": [
                    "SELECT nextval('my_seq');",
                    "SELECT nextval('my_seq') + 5;",
                    "SELECT nextval('my_seq') * 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NEXT VALUE FOR sequence_name",
                "description": "Fetches the next value from a named sequence using standard SQL syntax.",
                "examples": [
                    "SELECT NEXT VALUE FOR my_seq;",
                    "SELECT NEXT VALUE FOR my_seq + 5;",
                    "SELECT NEXT VALUE FOR my_seq * 2;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": [
            "Table: `seq3`\nColumns:\n(next_not_cached_value, bigint(21), )\n(minimum_value, bigint(21), )\n(maximum_value, bigint(21), )\n(start_value, bigint(21), )\n(increment, bigint(21), )\n(cache_size, bigint(21) unsigned, )\n(cycle_option, tinyint(1) unsigned, )\n(cycle_count, bigint(21), )\n"
        ]
    }
]