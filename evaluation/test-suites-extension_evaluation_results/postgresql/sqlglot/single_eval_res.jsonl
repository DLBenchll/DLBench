{"sql_id": "postgresql_1_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 10))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 10))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_1_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 10), (2, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "subquery has too few columns\nLINE 1: SELECT * FROM t0 WHERE (a, b) IN (VALUES (ROW(1, 10)), (ROW(...\n                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_1_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 20))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "subquery has too few columns\nLINE 1: SELECT * FROM t0 WHERE NOT (a, b) IN (VALUES (ROW(1, 10)))\n                                          ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_1_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "subquery has too few columns\nLINE 1: SELECT * FROM t0 WHERE NOT (a, b) IN (VALUES (ROW(1, 10)), (...\n                                          ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: INSERT INTO t1 (ts) VALUES (UNIX_TIMESTAMP('2002-10-27 01:00...\n                                    ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: INSERT INTO t1 (ts) VALUES (UNIX_TIMESTAMP('2002-10-27 02:00...\n                                    ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: INSERT INTO t1 (ts) VALUES (UNIX_TIMESTAMP('2002-10-27 03:00...\n                                    ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1035680400, datetime.datetime(2002, 10, 27, 1, 0, tzinfo=datetime.timezone.utc)), (1035684000, datetime.datetime(2002, 10, 27, 2, 0, tzinfo=datetime.timezone.utc)), (1035687600, datetime.datetime(2002, 10, 27, 3, 0, tzinfo=datetime.timezone.utc)))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1035680400, datetime.datetime(2002, 10, 27, 1, 0, tzinfo=datetime.timezone.utc)), (1035684000, datetime.datetime(2002, 10, 27, 2, 0, tzinfo=datetime.timezone.utc)), (1035687600, datetime.datetime(2002, 10, 27, 3, 0, tzinfo=datetime.timezone.utc)))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'2001-01-01 00:00:00'\"\nLINE 1: SELECT TIMESTAMP('2001-01-01 00:00:00')\n                         ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((730851,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "date/time field value out of range: \"0000-01-01\"\nLINE 1: ...1-01 00:00:00' AS DATE) AS TIMESTAMP) - CAST(CAST('0000-01-0...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((730851,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "date/time field value out of range: \"0000-01-01\"\nLINE 1: ...1-01 00:00:00' AS DATE) AS TIMESTAMP) - CAST(CAST('0000-01-0...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type interval to bigint\nLINE 1: SELECT CAST(AGE(CAST('2007-12-31 23:59:59' AS TIMESTAMP), CA...\n               ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function timediff(unknown, unknown) does not exist\nLINE 1: SELECT TIMEDIFF('2000:01:01 00:00:00', '2000:01:01 00:00:00'...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Saturday October 2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_char(unknown, unknown) is not unique\nLINE 1: SELECT TO_CHAR('2009-10-10 23:59:59', 'TMDay TMMonth YYYY')\n               ^\nHINT:  Could not choose a best candidate function. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:59:59',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'2003-12-31 23:59:59'\"\nLINE 1: SELECT TIME('2003-12-31 23:59:59')\n                    ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 1, 1, 11, 59, 59, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'2003-12-31 23:59:59'\"\nLINE 1: SELECT TIMESTAMP('2003-12-31 23:59:59', '12:00:00')\n                         ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2003, 1, 3, 0, 0, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"minute\" does not exist\nLINE 1: SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02 23:59:59')\n                            ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('2'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"month\" does not exist\nLINE 1: ...CT TIMESTAMPDIFF('2003-05-01', '2003-02-01 23:59:59', MONTH)\n                                                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('63426758399.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_seconds(unknown) does not exist\nLINE 1: SELECT TO_SECONDS('2009-11-29 23:59:59')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1447459199.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_101_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',), ('6120',), ('612020',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bytea) does not exist\nLINE 1: SELECT HEX(s1) FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_101_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((7,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((15,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_101_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('41', 'a'), ('41', 'c'), ('4100', 'b'), ('4100', 'd'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bytea) does not exist\nLINE 1: SELECT HEX(s1), s2 FROM t1 ORDER BY s1 NULLS FIRST, s2 NULLS...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_101_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"ubigint\" does not exist\nLINE 1: SELECT CAST(123456789 AS UBIGINT)\n                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_102_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_102_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_102_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_102_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_102_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_102_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function curdate() does not exist\nLINE 1: CREATE TABLE t1 AS SELECT CURDATE() AS f1\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_102_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function makedate(integer, integer) does not exist\nLINE 1: SELECT 1 FROM (SELECT MAKEDATE(2011, 0)) AS a\n                              ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_2_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "recursive query \"qn\" column 2 has type character(100) in non-recursive term but type bpchar overall\nLINE 1: WITH RECURSIVE qn AS (SELECT 1 AS n, CAST('x' AS CHAR(100)) ...\n                                             ^\nHINT:  Cast the output of the non-recursive term to the correct type.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_3_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('NO',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('NO',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_39_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"b\" does not exist\nLINE 1: ...= 1 THEN a ELSE a END AS b FROM t1 ORDER BY FIELD(b + 1, 1) ...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_39_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,), (3,), (1,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"b\" does not exist\nLINE 1: ...= 1 THEN a ELSE a END AS b FROM t1 ORDER BY FIELD(b, 1) NULL...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_4_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_4_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_4_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT 1 FROM t1 WHERE a = 9223372036854775805 AND ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_4_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT 1 FROM t1 WHERE a = 0 AND TRIM(a) = b\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_4_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_4_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_4_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_5_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('postgres',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"(\"\nLINE 1: SELECT USER()\n                   ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_6_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('3a',), ('3b',), ('3c',), ('3d',), ('3e',), ('3f',), ('40',), ('5b',), ('5c',), ('5d',), ('5e',), ('5f',), ('60',), ('7b',), ('7c',), ('7d',), ('7e',))", "rowcount": 17, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bytea) does not exist\nLINE 1: SELECT HEX(c1) FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_6_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_6_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 256, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 256, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_6_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 256, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 256, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_6_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "can't execute an empty query", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_6_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_6_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_6_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_7_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc                  ', 21), ('\u07f0                   ', 21), ('\u02ae                   ', 21), ('                    ', 20), ('50515253            ', 20), ('31                  ', 20), ('h31                 ', 20), ('2805                ', 20))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc                  ', 2), ('\u07f0                   ', 1), ('\u02ae                   ', 1), ('                    ', 0), ('50515253            ', 8), ('31                  ', 2), ('h31                 ', 3), ('2805                ', 4))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_7_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc                  ', '                  h\u04bc'), ('\u07f0                   ', '                   \u07f0'), ('\u02ae                   ', '                   \u02ae'), ('                    ', '                    '), ('50515253            ', '            50515253'), ('31                  ', '                  31'), ('h31                 ', '                 h31'), ('2805                ', '                2805'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc                  ', '                  h\u04bc'), ('\u07f0                   ', '                   \u07f0'), ('\u02ae                   ', '                   \u02ae'), ('                    ', '                    '), ('50515253            ', '            50515253'), ('31                  ', '                  31'), ('h31                 ', '                 h31'), ('2805                ', '                2805'))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_7_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc                  ', 'h\u04bc525252525252525252'), ('\u07f0                   ', '\u07f05252525252525252525'), ('\u02ae                   ', '\u02ae5252525252525252525'), ('                    ', '52525252525252525252'), ('50515253            ', '50515253525252525252'), ('31                  ', '31525252525252525252'), ('h31                 ', 'h3152525252525252525'), ('2805                ', '28055252525252525252'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc                  ', 'h\u04bc525252525252525252'), ('\u07f0                   ', '\u07f05252525252525252525'), ('\u02ae                   ', '\u02ae5252525252525252525'), ('                    ', '52525252525252525252'), ('50515253            ', '50515253525252525252'), ('31                  ', '31525252525252525252'), ('h31                 ', 'h3152525252525252525'), ('2805                ', '28055252525252525252'))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_7_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_7_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_7_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_7_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_7_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_7_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('h315253             ', 'h315253'), ('h31525352           ', 'h31525352'), ('h3152535252         ', 'h3152535252'), ('h315253525252       ', 'h315253525252'), ('52h315253           ', '52h315253'), ('5252h315253         ', '5252h315253'), ('525252h315253       ', '525252h315253'), ('   h315253          ', 'h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('h315253             ', 'h315253'), ('h31525352           ', 'h31525352'), ('h3152535252         ', 'h3152535252'), ('h315253525252       ', 'h315253525252'), ('52h315253           ', '52h315253'), ('5252h315253         ', '5252h315253'), ('525252h315253       ', '525252h315253'), ('   h315253          ', 'h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1973, 11, 29, 21, 33, 9, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1973, 11, 29, 21, 33, 9, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1977, 6, 7, 21, 44, 50, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1977, 6, 7, 21, 44, 50, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 0, 0, 1, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 0, 0, 1, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('123456789.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(timestamp with time zone) does not exist\nLINE 1: SELECT UNIX_TIMESTAMP(TO_TIMESTAMP(123456789))\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('234567890.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(timestamp with time zone) does not exist\nLINE 1: SELECT UNIX_TIMESTAMP(TO_TIMESTAMP(234567890))\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('2179098000.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: SELECT UNIX_TIMESTAMP('2039-01-20 01:00:00')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('2149376400.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: SELECT UNIX_TIMESTAMP('2038-02-10 01:00:00')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('3600.000000'), Decimal('3601.000000'), Decimal('2147487247.000000'), Decimal('2147487248.000000')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: SELECT UNIX_TIMESTAMP('1970-01-01 01:00:00'), UNIX_TIMESTAMP...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 12280 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 12280 is out of range", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('32536803599.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: SELECT UNIX_TIMESTAMP('3001-01-19 08:59:59')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_72_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT * FROM t WHERE CONCAT(x, x) = 'XX'\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_74_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_74_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((13,), (13,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((13,), (13,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_74_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_74_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_74_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'abc-def', '6162632d646566'), (2, \"'(),-.\", '2728292c2d2e'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(character varying) does not exist\nLINE 1: SELECT *, HEX(a) FROM t1\n                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_74_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'abc-def', '6162632d646566'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(character varying) does not exist\nLINE 1: SELECT *, HEX(a) FROM t1 WHERE a = 'abc-def'\n                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_75_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unhex(unknown) does not exist\nLINE 1: INSERT INTO t1 VALUES ('valid-string', 1), (UNHEX('11'), 2)\n                                                    ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_75_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 12, 12), (2, 4, 4))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 12, 12), (2, 4, 4))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_76_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"IGNORE\"\nLINE 1: INSERT IGNORE INTO t1 VALUES (1, REPEAT('a', 110), REPEAT('b...\n               ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_76_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 200, 210, 110, 210))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 110, 210, 110, 210))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_76_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_77_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(12, 22, 22), datetime.date(1997, 1, 1), datetime.datetime(1997, 1, 2, 0, 0), '1997-01-01 12:22:22', 3, 7, 5))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(12, 22, 22), datetime.date(1997, 1, 1), datetime.datetime(1997, 1, 2, 0, 0), '1997-01-01 12:22:22', 3, 7, 5))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_78_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_78_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(text) does not exist\nLINE 1: SELECT HEX(val) FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_78_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(character varying) does not exist\nLINE 1: SELECT HEX(a) FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_79_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Sun', 'Sunday   '), (datetime.date(2006, 1, 2), 'Mon', 'Monday   '), (datetime.date(2006, 1, 3), 'Tue', 'Tuesday  '), (datetime.date(2006, 1, 4), 'Wed', 'Wednesday'), (datetime.date(2006, 1, 5), 'Thu', 'Thursday '), (datetime.date(2006, 1, 6), 'Fri', 'Friday   '), (datetime.date(2006, 1, 7), 'Sat', 'Saturday '))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function dayname(date) does not exist\nLINE 1: SELECT a, TO_CHAR(a, 'TMDy') AS abday, DAYNAME(a) AS day FRO...\n                                               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_79_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Jan', 'January  '), (datetime.date(2006, 2, 1), 'Feb', 'February '), (datetime.date(2006, 3, 1), 'Mar', 'March    '), (datetime.date(2006, 4, 1), 'Apr', 'April    '), (datetime.date(2006, 5, 1), 'May', 'May      '), (datetime.date(2006, 6, 1), 'Jun', 'June     '), (datetime.date(2006, 7, 1), 'Jul', 'July     '), (datetime.date(2006, 8, 1), 'Aug', 'August   '), (datetime.date(2006, 9, 1), 'Sep', 'September'), (datetime.date(2006, 10, 1), 'Oct', 'October  '), (datetime.date(2006, 11, 1), 'Nov', 'November '), (datetime.date(2006, 12, 1), 'Dec', 'December '))", "rowcount": 12, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Jan', 'January'), (datetime.date(2006, 2, 1), 'Feb', 'February'), (datetime.date(2006, 3, 1), 'Mar', 'March'), (datetime.date(2006, 4, 1), 'Apr', 'April'), (datetime.date(2006, 5, 1), 'May', 'May'), (datetime.date(2006, 6, 1), 'Jun', 'June'), (datetime.date(2006, 7, 1), 'Jul', 'July'), (datetime.date(2006, 8, 1), 'Aug', 'August'), (datetime.date(2006, 9, 1), 'Sep', 'September'), (datetime.date(2006, 10, 1), 'Oct', 'October'), (datetime.date(2006, 11, 1), 'Nov', 'November'), (datetime.date(2006, 12, 1), 'Dec', 'December'))", "rowcount": 12, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_79_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1 Mon 01',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_char(unknown, unknown) is not unique\nLINE 1: SELECT TO_CHAR('2001-01-01', '%w TMDy TMDay')\n               ^\nHINT:  Could not choose a best candidate function. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_79_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('01 Jan January  ',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_char(unknown, unknown) is not unique\nLINE 1: SELECT TO_CHAR('2001-01-01', 'FMMM TMMon TMMonth')\n               ^\nHINT:  Could not choose a best candidate function. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_79_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('11 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_char(unknown, unknown) is not unique\nLINE 1: SELECT TO_CHAR('2010-03-23 11:00:00', 'HH12 PM')\n               ^\nHINT:  Could not choose a best candidate function. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_8_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT STRCMP('', 'ae'), STRCMP('ae', ''), STRCMP('aeq', 'q'...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_8_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT STRCMP('ss', ''), STRCMP('', 'ss'), STRCMP('s', 'sss'...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_8_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT STRCMP('', 'af'), STRCMP('a', ''), STRCMP('', 'aeq'),...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_8_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT STRCMP('ss', 'a'), STRCMP('', 'ssa'), STRCMP('sa', 's...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_8_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT STRCMP('', 'o'), STRCMP('', 'u'), STRCMP('', 'oeb')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_8_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, 1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT STRCMP('af', ''), STRCMP('', 'a'), STRCMP('aeq', ''),...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_8_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, 1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT STRCMP('a', 'ss'), STRCMP('ssa', ''), STRCMP('sssb', ...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_8_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT STRCMP('u', 'a'), STRCMP('u', '')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_8_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT STRCMP('s', 'a'), STRCMP('a', 'x')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_8_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 1, False, True), (1, 0, True, False))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function field(unknown, character) does not exist\nLINE 1: SELECT FIELD('ue', s1), FIELD('', s1), s1 = 'ue', s1 = '' FR...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_8_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('oe   ',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xx123',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xx123',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xyxya',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xyxya',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('          I LOVE SQL',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('          I LOVE SQL',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_81_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_81_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((25165824,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((25165824,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_82_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2)), (datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1)), (datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3)))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of CASE/WHEN must be type boolean, not type integer\nLINE 1: SELECT COALESCE(d, d), COALESCE(d, d), CASE WHEN i THEN d EL...\n                                                         ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_83_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('41422020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(character) does not exist\nLINE 1: SELECT HEX(c1) FROM AB\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_84_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_char(unknown, unknown) is not unique\nLINE 1: INSERT INTO t5 VALUES (1, TO_CHAR('2001-01-01', 'TMDay'))\n                                  ^\nHINT:  Could not choose a best candidate function. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_84_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_char(unknown, unknown) is not unique\nLINE 1: INSERT INTO t5 VALUES (2, TO_CHAR('2001-01-01', 'TMDay'))\n                                  ^\nHINT:  Could not choose a best candidate function. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_84_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_char(unknown, unknown) is not unique\nLINE 1: INSERT INTO t5 VALUES (3, TO_CHAR('2001-01-01', 'TMDay'))\n                                  ^\nHINT:  Could not choose a best candidate function. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_84_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(character varying) does not exist\nLINE 1: SELECT HEX(a) FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_84_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"(\"\nLINE 1: INSERT INTO t1 VALUES (1, USER())\n                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_85_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_85_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_85_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_85_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_85_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1968,), (3744,), (5520,), (7296,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1968,), (3744,), (5520,), (7296,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_86_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None, None, Decimal('1.1'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None, None, Decimal('1.1'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_86_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, None, None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT STRCMP('a', NULL), (1 < NULL), NULL ~ 'a', NULL LIKE ...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_86_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('', 'abababababababababab', '', None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', 'abababababababababab', '', None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_86_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function field(unknown, unknown, unknown, unknown) does not exist\nLINE 1: SELECT FIELD(NULL, 'a', 'b', 'c')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_86_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_86_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_86_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_87_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_87_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaaaaaaaa,bbbbbbbbbb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaaaaaaaa,bbbbbbbbbb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_87_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1748422497.855188'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp() does not exist\nLINE 1: SELECT UNIX_TIMESTAMP()\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_88_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_88_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((100,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((100,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_88_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2000,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_88_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((100, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((100, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_89_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(character varying) does not exist\nLINE 1: SELECT HEX(a) FROM t1 WHERE a LIKE 'A_'\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_89_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT HEX(a) FROM t1 WHERE a LIKE 'A_'\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_89_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('00410000',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(character varying) does not exist\nLINE 1: SELECT HEX(a) FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_89_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_seconds(unknown) does not exist\nLINE 1: CREATE TABLE t1 AS SELECT TO_SECONDS(NULL) AS to_seconds\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('this', 'is', 'a', 2, Decimal('2.0')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of CASE/WHEN must be type boolean, not type integer\nLINE 1: SELECT CASE WHEN 0 THEN 'ERROR' ELSE 'this' END, CASE WHEN 1...\n                         ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a',), ('A',), ('aa',), ('AA',), ('aaa',), ('BBB',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of CASE/WHEN must be type boolean, not type integer\nLINE 1: SELECT CASE WHEN 1 THEN st ELSE st END AS s FROM t1 ORDER BY...\n                         ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a',), ('A',), ('aa',), ('AA',), ('aaa',), ('BBB',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a',), ('A',), ('aa',), ('AA',), ('aaa',), ('BBB',))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT NULLIF(u, 1) FROM t1\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('144.54'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('144.54'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6, 56))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6, 56))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True, False))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True, False))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, '05-03-2005', 'Day 1'), (2, '16-03-2005', 'Day 2'), (3, '28-03-2005', 'Day 3'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_timestamp(integer, unknown) does not exist\nLINE 1: SELECT id, CASE WHEN date IS NULL THEN '-' ELSE TO_TIMESTAMP...\n                                                        ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, '28-03-2005', 'Day 3'), (2, '16-03-2005', 'Day 2'), (1, '05-03-2005', 'Day 1'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_timestamp(integer, unknown) does not exist\nLINE 1: SELECT id, CASE WHEN date IS NULL THEN '-' ELSE TO_TIMESTAMP...\n                                                        ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1234567890123456789'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of CASE/WHEN must be type boolean, not type integer\nLINE 1: SELECT * FROM (SELECT MAX(CASE WHEN 1 THEN CAST(c AS UBIGINT...\n                                            ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1234567890123456789'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"ubigint\" does not exist\nLINE 1: SELECT * FROM (SELECT MAX(COALESCE(CAST(c AS UBIGINT), 0)) F...\n                                                     ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_29", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('2001.0000000000000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function year(date) does not exist\nLINE 1: SELECT AVG(NULLIF(YEAR(CAST('2001-01-01' AS DATE)), 10))\n                          ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_90_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 10000 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function from_days(integer) does not exist\nLINE 1: SELECT FROM_DAYS(3652499), FROM_DAYS(3652500), FROM_DAYS(365...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_90_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 117592 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function from_days(integer) does not exist\nLINE 1: SELECT FROM_DAYS(42949670), FROM_DAYS(42949671), FROM_DAYS(4...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_91_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_91_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((120000,), (12000,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((120000,), (12000,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_92_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_17", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_18", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_19", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_20", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_21", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_22", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_23", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_24", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_25", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_26", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_94_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 2, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 2, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_94_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_94_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2, 3, 1), (3, 2, 1))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, 3, 1), (3, 2, 1))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_94_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,), (False,), (False,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,), (False,), (False,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_94_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_94_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,), (False,), (True,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,), (False,), (True,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_94_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,), (True,), (True,), (True,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,), (True,), (True,), (True,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_94_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True, False, False, False, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True, False, False, False, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_95_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_95_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_95_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_95_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_95_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_95_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT ROW(MIN(a), 1) = ROW(a, 1) AS al FROM t1 GRO...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_95_19", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('axyxy',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('axyxy',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('I LOVE SQL          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('I LOVE SQL          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_97_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT * FROM t1 WHERE (t1.a IN (SELECT t3.a FROM t...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_97_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_98_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT * FROM t1 WHERE (SELECT b FROM t2 WHERE CAST...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_98_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_98_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_98_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_98_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_99_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('ABC', 1), ('XYZ', 1), ('ABC', 1), ('XYZ', 1))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('ABC', 1), ('XYZ', 1), ('ABC', 1), ('XYZ', 1))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_10_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('b                                                               ', 'a                                                               ', 'a               ', 'a211            '), ('c                                                               ', 'a                                                               ', 'a               ', 'a311            '), ('d                                                               ', 'a                                                               ', 'a               ', 'a411            '))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function ord(character) does not exist\nLINE 1: SELECT a1, a2, b, MIN(c) FROM t1 WHERE (ORD(a1) > 97) AND (O...\n                                                ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_10_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ca311', 'a               '), ('ba211', 'a               '), ('aa111', 'a               '))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('c                                                               a311            ', 'a               '), ('b                                                               a211            ', 'a               '), ('a                                                               a111            ', 'a               '))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_10_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ca311', 'a               ', 'c311            '), ('ba211', 'a               ', 'c211            '), ('aa111', 'a               ', 'c111            '))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('c                                                               a311            ', 'a               ', 'c311            '), ('b                                                               a211            ', 'a               ', 'c211            '), ('a                                                               a111            ', 'a               ', 'c111            '))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_10_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ca', 'a               ', 'a311            ', 'c311            '), ('ba', 'a               ', 'a211            ', 'c211            '), ('aa', 'a               ', 'a111            ', 'c111            '))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('c                                                               a                                                               ', 'a               ', 'a311            ', 'c311            '), ('b                                                               a                                                               ', 'a               ', 'a211            ', 'c211            '), ('a                                                               a                                                               ', 'a               ', 'a111            ', 'c111            '))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_10_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('9797', 'a               ', 'a               '), ('9797', 'a               ', 'a               '), ('9797', 'a               ', 'a               '), ('9797', 'a               ', 'a               '))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function ord(character) does not exist\nLINE 1: SELECT CONCAT(ORD(MIN(b)), ORD(MAX(b))), MIN(b), MAX(b) FROM...\n                      ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_11_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, 50), (1, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function std(integer) does not exist\nLINE 1: ... Fld1, MAX(Fld2) FROM t1 GROUP BY Fld1 HAVING NOT STD(Fld2) ...\n                                                             ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_11_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3, 50), (1, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3, 50), (1, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_12_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1000, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1000, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_12_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1000, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1000, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_12_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 25, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 25, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_12_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT * FROM t1 WHERE a < 10 AND b = REPEAT(CHR(65...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_12_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (1, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (2, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (3, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (4, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (5, '77777777777777777777', 'filler                                                                                                                                                                                                  '), (6, '77777777777777777777', 'filler                                                                                                                                                                                                  '), (7, '77777777777777777777', 'filler                                                                                                                                                                                                  '), (8, '77777777777777777777', 'filler                                                                                                                                                                                                  '), (9, '77777777777777777777', 'filler                                                                                                                                                                                                  '))", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_14_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"data\" is of type bytea but expression is of type text\nLINE 1: UPDATE t1 SET data = REPEAT('a', 18 * 1024)\n                             ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_14_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((18432,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18432,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_14_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"data\" is of type bytea but expression is of type text\nLINE 1: INSERT INTO t1 (data) VALUES (REPEAT('a', 1 * 1024))\n                                      ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_14_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"data\" is of type bytea but expression is of type text\nLINE 1: INSERT INTO t1 (data) VALUES (REPEAT('b', 16 * 1024 - 1024))\n                                      ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_14_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"data\" is of type bytea but expression is of type text\nLINE 1: UPDATE t1 SET data = REPEAT('c', 17 * 1024)\n                             ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_14_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "can't execute an empty query", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_14_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((17408,), (17408,), (18432,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((17408,), (17408,), (18432,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_15_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1293840000.000000'), Decimal('0.000000'), 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: SELECT UNIX_TIMESTAMP('2011-01-01 00:00:00') AS time_t, UNIX...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_15_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_15_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_16_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('postgres', 'postgres'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"(\"\nLINE 1: SELECT USER(), CURRENT_USER\n                   ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('6131',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(text) does not exist\nLINE 1: SELECT HEX(CONCAT(REGEXP_INSTR('a', 'a')))\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function regexp_instr(integer, unknown) does not exist\nLINE 1: SELECT REGEXP_INSTR(1, 'a')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function regexp_instr(numeric, unknown) does not exist\nLINE 1: SELECT REGEXP_INSTR(1.1, 'a')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function regexp_instr(unknown, integer) does not exist\nLINE 1: SELECT REGEXP_INSTR('a', 1)\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function regexp_instr(unknown, numeric) does not exist\nLINE 1: SELECT REGEXP_INSTR('a', 1.1)\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((5,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((7,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_22", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((7,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_28", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_29", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_30", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_31", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_32", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('XXX',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('XXXx',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Xaax',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaXccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaXccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaabbccXddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaa<bb>ccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaabbcc<$1>ddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaabbccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaabbccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaxccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaxccxddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaax',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaab',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaxccc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaabccc',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aXcXdX',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('abcXdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aXa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('XXaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aXXa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_19_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_19_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_19_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type integer: \"b\"\nLINE 1: SELECT LENGTH(REGEXP_REPLACE(REPEAT('a', 'b'), 'a', 'b'))\n                                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_19_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_19_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((16384,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((16384,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_19_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('b',), ('c',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('$1',), ('$1',), ('$1',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_19_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_20_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_20_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_20_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_20_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_21_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1-1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function concat_ws(integer, character varying) does not exist\nLINE 1: SELECT CONCAT_WS(pkCrash, strCrash) FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_21_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1, 'one'), (2, 1, 'one'), (4, 2, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function elt(integer, unknown, unknown) does not exist\nLINE 1: SELECT one.id, two.val, ELT(two.val, 'one', 'two') FROM t1 A...\n                                ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_22_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type timestamp: \"01-01:02\"\nLINE 1: SELECT LEAST(CAST('01-01-01' AS TIMESTAMP), '01-01:02')\n                                                    ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_22_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2001, 12, 10),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type date: \"2001-12/11\"\nLINE 1: SELECT LEAST(CAST('2001-12-10' AS DATE), '2001-12/11')\n                                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_22_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('0.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function utc_timestamp() does not exist\nLINE 1: SELECT UNIX_TIMESTAMP(UTC_TIMESTAMP()) - UNIX_TIMESTAMP(CURR...\n                              ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: INSERT INTO t1 (i, ts) VALUES (UNIX_TIMESTAMP('2003-03-01 00...\n                                       ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: INSERT INTO t1 (i, ts) VALUES (UNIX_TIMESTAMP('2003-03-30 01...\n                                       ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(bigint) does not exist\nLINE 1: INSERT INTO t1 (i, ts) VALUES (UNIX_TIMESTAMP(20030330015959...\n                                       ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: INSERT INTO t1 (i, ts) VALUES (UNIX_TIMESTAMP('2003-05-01 00...\n                                       ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: INSERT INTO t1 (i, ts) VALUES (UNIX_TIMESTAMP('2003-10-26 01...\n                                       ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1981, 7, 1, 0, 0, 9, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1981, 7, 1, 0, 0, 9, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1048989599.000000'), 'Before the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: SELECT UNIX_TIMESTAMP('2003-03-30 01:59:59'), 'Before the ga...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1048991400.000000'), 'Inside the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: SELECT UNIX_TIMESTAMP('2003-03-30 02:30:00'), 'Inside the ga...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1048993200.000000'), 'After the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: SELECT UNIX_TIMESTAMP('2003-03-30 03:00:00'), 'After the gap...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_21", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('-28801.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: SELECT UNIX_TIMESTAMP('1969-12-31 15:59:59')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('-28800.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: SELECT UNIX_TIMESTAMP('1969-12-31 16:00:00')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('-28799.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: SELECT UNIX_TIMESTAMP('1969-12-31 16:00:01')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: SELECT UNIX_TIMESTAMP('1970-01-01 00:00:01')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1641052801.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: SELECT UNIX_TIMESTAMP('2022-01-01 16:00:01')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_24_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"resultrowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bit) does not exist\nLINE 1: SELECT HEX(a) FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_24_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',), ('31',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bit) does not exist\nLINE 1: SELECT HEX(a) FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_24_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('18af7',), ('2b67',), ('1b1fd',), ('1870f',), ('3f3',), ('1b1fd',), ('0',), ('f4633',), ('2b03',), ('f4697',), ('1b1a3',), ('2711',), ('1adb1',), ('1b1a3',), ('10cd37',), ('18af7',), ('6f',), ('f468d',), ('2b5d',), ('3e9',), ('277f',), ('2b5d',), ('10f05f',), ('f69bf',), ('10f3e3',), ('b',), ('2711',), ('6f',), ('457',), ('65',), ('457',), ('1',), ('44d',), ('1ae15',), ('10f447',), ('3f3',), ('2711',), ('1b199',))", "rowcount": 38, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function min(bit) does not exist\nLINE 1: SELECT HEX(MIN(a)) FROM t1\n                   ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_24_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('277f',), ('10cd2d',), ('271b',), ('10f3e3',), ('a7dcb3',), ('1b1a3',), ('9a4431',), ('2775',), ('f424b',), ('9a216d',), ('18af7',), ('10c94f',), ('9a2109',), ('18af7',), ('277f',), ('10f055',), ('9a487d',), ('f424b',), ('a7d92f',), ('9a443b',), ('3e9',), ('10c8eb',), ('277f',), ('9a2177',), ('a7dcb3',), ('10c8eb',), ('10c945',), ('a98a63',), ('9a1d8f',), ('f6d39',), ('9a2113',), ('a986d5',), ('2711',), ('10cd37',), ('a7dcb3',), ('98c183',), ('10eff1',), ('f424b',))", "rowcount": 38, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function min(bit) does not exist\nLINE 1: SELECT HEX(MIN(b)) FROM t1\n                   ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_24_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('18af7', '18af7', '277f', '277f'), ('2b67', '2b67', '10cd2d', '10cd2d'), ('1b1fd', '1b1fd', '271b', '271b'), ('1870f', '1870f', '10f3e3', '10f3e3'), ('3f3', '3f3', 'a7dcb3', 'a7dcb3'), ('1b1fd', '1b1fd', '1b1a3', '1b1a3'), ('0', '0', '9a4431', '9a4431'), ('f4633', 'f4633', '2775', '2775'), ('2b03', '2b03', 'f424b', 'f424b'), ('f4697', 'f4697', '9a216d', '9a216d'), ('1b1a3', '1b1a3', '18af7', '18af7'), ('2711', '2711', '10c94f', '10c94f'), ('1adb1', '1adb1', '9a2109', '9a2109'), ('1b1a3', '1b1a3', '18af7', '18af7'), ('10cd37', '10cd37', '277f', '277f'), ('18af7', '18af7', '10f055', '10f055'), ('6f', '6f', '9a487d', '9a487d'), ('f468d', 'f468d', 'f424b', 'f424b'), ('2b5d', '2b5d', 'a7d92f', 'a7d92f'), ('3e9', '3e9', '9a443b', '9a443b'), ('277f', '277f', '3e9', '3e9'), ('2b5d', '2b5d', '10c8eb', '10c8eb'), ('10f05f', '10f05f', '277f', '277f'), ('f69bf', 'f69bf', '9a2177', '9a2177'), ('10f3e3', '10f3e3', 'a7dcb3', 'a7dcb3'), ('b', 'b', '10c8eb', '10c8eb'), ('2711', '2711', '10c945', '10c945'), ('6f', '6f', 'a98a63', 'a98a63'), ('457', '457', '9a1d8f', '9a1d8f'), ('65', '65', 'f6d39', 'f6d39'), ('457', '457', '9a2113', '9a2113'), ('1', '1', 'a986d5', 'a986d5'), ('44d', '44d', '2711', '2711'), ('1ae15', '1ae15', '10cd37', '10cd37'), ('10f447', '10f447', 'a7dcb3', 'a7dcb3'), ('3f3', '3f3', '98c183', '98c183'), ('2711', '2711', '10eff1', '10eff1'), ('1b199', '1b199', 'f424b', 'f424b'))", "rowcount": 38, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function min(bit) does not exist\nLINE 1: SELECT HEX(MIN(a)), HEX(MAX(a)), HEX(MIN(b)), HEX(MAX(b)) FR...\n                   ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_24_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,), ('0',), ('0',), ('0',), ('1',), ('0',))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function min(bit) does not exist\nLINE 1: SELECT HEX(MIN(b)) FROM t1 WHERE a = 4\n                   ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_24_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('b',), ('277f',), ('2b03',), ('2711',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function min(bit) does not exist\nLINE 1: SELECT HEX(MIN(c)) FROM t1 WHERE a = 4 AND b = 0\n                   ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_24_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,), ('0',), ('1',), ('1',), ('0',), ('0',), ('0',), ('1',), ('0',), ('0',))", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function max(bit) does not exist\nLINE 1: SELECT HEX(MAX(b)) FROM t1\n                   ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_24_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"b\" is of type bit but expression is of type text\nLINE 1: UPDATE t1 SET b = CONCAT(a)\n                          ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_24_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30302c3131',), ('30312c3130',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function string_agg(bit, unknown) does not exist\nLINE 1: SELECT HEX(STRING_AGG(DISTINCT b, ',')) FROM t1 GROUP BY a\n                   ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_25_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('31', 100), ('31', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bit) does not exist\nLINE 1: SELECT HEX(b), i2 FROM t1 WHERE (i2 >= 100 AND i2 < 201) AND...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_25_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('31', 100), ('31', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bit) does not exist\nLINE 1: SELECT HEX(b1), i2 FROM t2 WHERE (i2 >= 100 AND i2 < 201) AN...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_25_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30', 100), ('30', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bit) does not exist\nLINE 1: SELECT HEX(b2), i2 FROM t2 WHERE (i2 >= 100 AND i2 < 201) AN...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_25_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30302c3131',), ('30312c3130',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function string_agg(bit, unknown) does not exist\nLINE 1: SELECT HEX(STRING_AGG(DISTINCT b, ',')) FROM t1 GROUP BY a\n                   ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_25_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('3030',), ('3031',), ('3130',), ('3131',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bit) does not exist\nLINE 1: SELECT HEX(t2.b) FROM t2\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_25_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, '3030'), (3, '3031'), (3, '3130'), (3, '3130'), (2, '3131'))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bit) does not exist\nLINE 1: SELECT a, HEX(b) FROM t1 ORDER BY b NULLS FIRST\n                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_26_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',), ('6120',), ('615c30',), ('6161',), ('62',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bytea) does not exist\nLINE 1: SELECT HEX(a) FROM t1 ORDER BY a NULLS FIRST\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_26_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61205c30',), ('615c30',), ('615c305c30',), ('61615c30',), ('625c30',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(text) does not exist\nLINE 1: SELECT HEX(CONCAT(a, '\\0')) AS b FROM t1 ORDER BY CONCAT(a, ...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_26_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',), ('6120',), ('615c30',), ('6161',), ('62',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bytea) does not exist\nLINE 1: SELECT HEX(a) FROM t1 ORDER BY a NULLS FIRST\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_26_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_26_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((65535, 65535))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((65535, 65535))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_26_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_27_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1.7976931348623157e+308,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function string_agg(numeric, unknown) does not exist\nLINE 1: SELECT LEAST(-1.1111111111111111111111111, -STRING_AGG(1.797...\n                                                    ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_28_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_28_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('2025 25', Decimal('2025'), Decimal('2025')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function year(date) does not exist\nLINE 1: SELECT TO_CHAR(a, 'YYYY YY'), YEAR(CAST(a AS DATE)), YEAR(CA...\n                                      ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_28_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1206, seconds=84012),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'2000-01-27'\"\nLINE 1: SELECT TIMESTAMP('2000-01-27', '23:13:41') - TIMESTAMP('2003...\n                         ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_30_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, 3, 3, 3), (4, 3, 3, 4), (7, 3, 3, 7))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3, 2, 3, 3), (4, 2, 3, 4), (7, 1, 3, 7))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_30_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"f1\" does not exist\nLINE 1: INSERT INTO t1 VALUES (SUBSTRING(f1 FROM 1 FOR 3))\n                                         ^\nDETAIL:  There is a column named \"f1\" in table \"t1\", but it cannot be referenced from this part of the query.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_30_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('10', 5.0), ('30', 15.0), ('50', 25.0), ('60', 30.0))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function div(character, integer) does not exist\nLINE 1: SELECT a, (DIV(a, 2)) FROM t1 ORDER BY a NULLS FIRST\n                   ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_31_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"y\" is of type smallint but expression is of type timestamp with time zone\nLINE 1: INSERT INTO t1 VALUES (NOW())\n                               ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_31_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: smallint = timestamp with time zone\nLINE 1: SELECT CASE WHEN y = NOW() THEN 1 ELSE 0 END FROM t1\n                           ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_31_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: smallint = timestamp with time zone\nLINE 1: SELECT * FROM t4 WHERE yyyy = NOW()\n                                    ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_31_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('3'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"quarter\" does not exist\nLINE 1: SELECT TIMESTAMPDIFF(dbl, LEAST(y1, y2), QUARTER) FROM t1\n                                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_31_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2085,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hour(smallint) does not exist\nLINE 1: SELECT HOUR(GREATEST(y1, y2)) FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_32_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, '\"0\"'), (0, '\"0\"'), (2012, '\"2012\"'), (0, '\"0\"'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, '\"0\"'), (0, '\"0\"'), (2012, '\"2012\"'), (0, '\"0\"'))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_33_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1111111111111111111111111111111111111111111111111111111111111111',), ('1000000000000000000000000000000000000000000000000000000000000000',), ('0000000000000000000000000000000000000000000000000000000000000000',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bit) does not exist\nLINE 1: SELECT HEX(b) FROM t1 ORDER BY pk1 NULLS FIRST\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_33_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('0000000000000000',), ('0000000000000001',), ('0000000000000010',), ('0000000000000011',), ('0000000000000100',))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" does not exist\nLINE 1: SELECT HEX(b) FROM t1 ORDER BY pk1 NULLS FIRST\n                           ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_34_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('*a*',), ('*b*',), ('*o*',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('*a                   *',), ('*b                   *',), ('*o                   *',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_34_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a                   ', '*a*', 'o                   ', '*o*'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a                   ', '*a                   *', 'o                   ', '*o                   *'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_34_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('-hello-hello-',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('-hello     -hello     -',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_34_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('-hello-hello-',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('-hello     -hello-',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_34_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bytea) does not exist\nLINE 1: SELECT HEX(col1) FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_34_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bytea) does not exist\nLINE 1: SELECT HEX(col1) FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_34_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',), ('6120',), ('62',), ('6220',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bytea) does not exist\nLINE 1: SELECT HEX(col1) FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_35_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "can't execute an empty query", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_35_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "can't execute an empty query", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_35_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "can't execute an empty query", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_35_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1f9480179366f2bf567e1c4b964c1ef029080707',), ('1f9480179366f2bf567e1c4b964c1ef029082020',), ('1f9480179366f2bf567e1c4b964c1ef029087575',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bytea) does not exist\nLINE 1: SELECT HEX(a) FROM t1 ORDER BY a NULLS FIRST\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_35_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT HEX(a) FROM t1 ORDER BY a NULLS FIRST\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_35_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1f9480179366f2bf567e1c4b964c1ef029082020',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bytea) does not exist\nLINE 1: SELECT HEX(a) FROM t1 WHERE a = UNHEX('1F9480179366F2BF567E1...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_35_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bytea) does not exist\nLINE 1: SELECT HEX(a) FROM t1 WHERE a = UNHEX('1F9480179366F2BF567E1...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_36_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of AND must be type boolean, not type integer\nLINE 1: SELECT CASE WHEN NULL AND 1 THEN 1 ELSE 2 END, CASE WHEN 1 A...\n                                  ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_36_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of AND must be type boolean, not type integer\nLINE 1: SELECT * FROM t1 WHERE CASE WHEN a AND 1 THEN 0 ELSE 1 END\n                                         ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_36_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of AND must be type boolean, not type integer\nLINE 1: SELECT * FROM t1 WHERE CASE WHEN 1 AND a THEN 0 ELSE 1 END\n                                         ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_36_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N'), ('N', 'N', 'Y', 'N', 'N', 'Y', 'Y', 'N', 'N'), ('Y', 'N', 'N', 'N', 'N', 'N', 'N', 'Y', 'N'), ('N', 'N', 'N', 'Y', 'N', 'Y', 'Y', 'N', 'N'), ('N', 'Y', 'N', 'N', 'N', 'N', 'N', 'Y', 'N'), ('N', 'N', 'Y', 'Y', 'N', 'Y', 'Y', 'N', 'Y'), ('N', 'Y', 'Y', 'N', 'N', 'Y', 'Y', 'Y', 'N'), ('Y', 'N', 'N', 'Y', 'N', 'Y', 'Y', 'Y', 'N'), ('Y', 'Y', 'N', 'N', 'Y', 'N', 'N', 'Y', 'N'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False, False, False, False, False, False, False, False, False, False), (False, False, True, False, False, True, True, False, False, False), (True, False, False, False, False, False, False, True, False, False), (False, False, False, True, False, True, True, False, False, False), (False, True, False, False, False, False, False, True, False, False), (False, False, True, True, False, True, True, False, True, True), (False, True, True, False, False, True, True, True, False, False), (True, False, False, True, False, True, True, True, False, False), (True, True, False, False, True, False, False, True, False, False))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.date(2004, 1, 22),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2004, 1, 22),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function timediff(time without time zone, unknown) does not exist\nLINE 1: SELECT TIMEDIFF(CAST('2004-12-30 12:00:00' AS TIME), '12:00:...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type time: \"1 12:00:00\"\nLINE 1: SELECT TIMEDIFF(CAST('1 12:00:00' AS TIME), '12:00:00')\n                             ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"ubigint\" does not exist\nLINE 1: SELECT CAST(CONCAT('12345', '6789') AS UBIGINT)\n                                               ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"ubigint\" does not exist\nLINE 1: SELECT CAST(REPEAT('1', 9) AS UBIGINT)\n                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True, True))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True, True))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type modifier is not allowed for type \"bytea\"\nLINE 1: SELECT HEX(CAST('a' AS BYTEA(2)))\n                               ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((20070719,), (None,), (20070719,), (None,), (20070719,))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type date to bigint\nLINE 1: SELECT CAST(CAST(d1 AS DATE) AS BIGINT) FROM t1\n               ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('0'), Decimal('0'), Decimal('0.000000')), (None, None, None))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hour(date) does not exist\nLINE 1: SELECT HOUR(f1), MINUTE(f1), SECOND(f1) FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('0'), Decimal('0'), Decimal('0.000000')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hour(date) does not exist\nLINE 1: SELECT HOUR(CAST('2007-07-19' AS DATE)), MINUTE(CAST('2007-0...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hour(date) does not exist\nLINE 1: SELECT HOUR(CAST(NULL AS DATE)), MINUTE(CAST(NULL AS DATE)),...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hour(unknown) does not exist\nLINE 1: SELECT HOUR(NULL), MINUTE(NULL), SECOND(NULL)\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_21", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('arowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('arowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_22", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('value=340000',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('value=340000',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(1, 2, 1, 600000),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(1, 2, 1, 600000),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_38_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(smallint, character varying) does not exist\nLINE 1: SELECT STRCMP(a, b) FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_38_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1934,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"year\" does not exist\nLINE 1: ...SON_EXTRACT_PATH('{\\\"key_year\\\":1934}', 'key_year') AS YEAR)\n                                                                  ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_38_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1988, '198819881988'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"year\" does not exist\nLINE 1: SELECT CAST(1988 AS YEAR), REPEAT(CAST(1988 AS YEAR), 3) AS ...\n                            ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_38_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x1988',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"year\" does not exist\nLINE 1: SELECT CONCAT('x', CAST(1988 AS YEAR))\n                                        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_38_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('73800.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"year\" does not exist\nLINE 1: SELECT TIME_TO_SEC(CAST('2030' AS YEAR))\n                                          ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_38_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1988, 1, 1, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"minute\" does not exist\nLINE 1: SELECT TIMESTAMPADD(MINUTE, 1, CAST(1988 AS YEAR))\n                            ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_38_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2025,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"year\" does not exist\nLINE 1: SELECT CAST(TO_DATE('nope', 'DD-MM-YYYY') AS YEAR)\n                                                     ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_38_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"ubigint\" does not exist\nLINE 1: SELECT 1 FROM t WHERE CAST(a AS UBIGINT) = 1 AND a = CASE WH...\n                                        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_40_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61202020202020202020', 0, 0), ('615c30202020202020', 1, 1), ('615c74202020202020', 1, 1), ('61202020202020202020', 0, 0))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(character) does not exist\nLINE 1: SELECT HEX(a), STRCMP(a, 'a'), STRCMP(a, 'a ') FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_40_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12', False), ('11', False), ('22', False))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12', False), ('11', False), ('22', False))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_40_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT b, c FROM t1 WHERE b = 1 AND CONCAT(b, c) = ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_40_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_40_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_40_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,), (False,), (False,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,), (False,), (False,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_40_17", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,), (True,), (True,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,), (True,), (True,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_41_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of CASE/WHEN must be type boolean, not type integer\nLINE 1: SELECT COUNT(DISTINCT CASE WHEN f1 THEN 3 ELSE f2 END) FROM ...\n                                        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_42_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('0.0.0.1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function inet_ntoa(unknown) does not exist\nLINE 1: SELECT INET6_NTOA(INET_NTOA('1'))\n                          ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_42_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(character varying) does not exist\nLINE 1: SELECT HEX(v) FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_43_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('string ', 'string '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function space(smallint) does not exist\nLINE 1: SELECT CONCAT(name, SPACE(level)), CONCAT(name, REPEAT(' ', ...\n                            ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_43_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_43_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 256, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 256, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_43_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 256, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 256, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_43_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('0.0.0.1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function inet_ntoa(unknown) does not exist\nLINE 1: SELECT INET6_NTOA(INET_NTOA('1'))\n                          ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type integer: \"\"\nLINE 1: SELECT STRING_AGG(COALESCE(a, ''), ',') FROM t1\n                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of CASE/WHEN must be type boolean, not type integer\nLINE 1: SELECT STRING_AGG(CASE WHEN a THEN a ELSE '' END, ',') FROM ...\n                                    ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of CASE/WHEN must be type boolean, not type integer\nLINE 1: SELECT STRING_AGG(CASE WHEN a THEN a ELSE '' END, ',') FROM ...\n                                    ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type integer: \"\"\nLINE 1: SELECT COALESCE(a, '') FROM t1 GROUP BY 1\n                           ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function concat_ws(integer, integer, integer) does not exist\nLINE 1: CREATE TABLE t2 AS SELECT CONCAT_WS(1, 2, 3) FROM t1\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function lower(integer) does not exist\nLINE 1: CREATE TABLE t2 AS SELECT LOWER(a) FROM t1\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function upper(integer) does not exist\nLINE 1: CREATE TABLE t2 AS SELECT UPPER(a) FROM t1\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function repeat(integer, integer) does not exist\nLINE 1: CREATE TABLE t2 AS SELECT REPEAT(1, 2) FROM t1\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function elt(integer, integer, integer, integer) does not exist\nLINE 1: CREATE TABLE t2 AS SELECT ELT(1, 111, 222, 333) FROM t1\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(text) does not exist\nLINE 1: SELECT HEX(a) FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('20202020202020202020',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(character) does not exist\nLINE 1: SELECT HEX(a) FROM t2\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('       xxx          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('       xxx          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('x         ', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x         ', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x         ', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of CASE/WHEN must be type boolean, not type integer\nLINE 1: SELECT CASE WHEN 1 THEN c1 ELSE '' END, CASE WHEN 0 THEN c1 ...\n                         ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_17", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_18", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function field(character, unknown) does not exist\nLINE 1: SELECT FIELD(c1, ''), FIELD('', c1) FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x         ', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_22", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('x', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x         ', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function elt(integer, character, unknown) does not exist\nLINE 1: SELECT ELT(1, c1, ''), ELT(1, '', c1) FROM t1\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_24", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_25", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_46_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 15, 2, 59, 58, 999000, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid combination of date conventions\nHINT:  Do not mix Gregorian and ISO week date conventions in a formatting template.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_46_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2004, 12, 12, 22, 30, 59, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2004, 12, 12, 22, 30, 59, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_46_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('2003-01-02 08:11:02+00',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('2003-01-02 08:11:02+00',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_46_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('14',), ('14',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('14',), ('14',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_46_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Thursday (Thu), 1 January (Jan) 2004',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_char(unknown, unknown) is not unique\nLINE 1: SELECT TO_CHAR('2004-01-01', 'TMDay (TMDy), FMDD TMMonth (TM...\n               ^\nHINT:  Could not choose a best candidate function. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function time_format(unknown, unknown) does not exist\nLINE 1: SELECT TIME_FORMAT('24:00:00', '%r')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function time_format(unknown, unknown) does not exist\nLINE 1: SELECT TIME_FORMAT('00:00:00', '%r')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12:00:00 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function time_format(unknown, unknown) does not exist\nLINE 1: SELECT TIME_FORMAT('12:00:00', '%r')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('03:00:00 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function time_format(unknown, unknown) does not exist\nLINE 1: SELECT TIME_FORMAT('15:00:00', '%r')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('01:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function time_format(unknown, unknown) does not exist\nLINE 1: SELECT TIME_FORMAT('01:00:00', '%r')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function time_format(unknown, unknown) does not exist\nLINE 1: SELECT TIME_FORMAT('00:00:00', '%l %p')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('01 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function time_format(unknown, unknown) does not exist\nLINE 1: SELECT TIME_FORMAT('01:00:00', '%l %p')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function time_format(unknown, unknown) does not exist\nLINE 1: SELECT TIME_FORMAT('12:00:00', '%l %p')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('11 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function time_format(unknown, unknown) does not exist\nLINE 1: SELECT TIME_FORMAT('23:00:00', '%l %p')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function time_format(unknown, unknown) does not exist\nLINE 1: SELECT TIME_FORMAT('24:00:00', '%l %p')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2004, 4, 30),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2004, 4, 30),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2004, 4, 30),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Thursday  01 January   2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_char(unknown, unknown) is not unique\nLINE 1: SELECT TO_CHAR('2009-01-01', 'TMDay DD TMMonth YYYY') AS val...\n               ^\nHINT:  Could not choose a best candidate function. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_48_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('3',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('3',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_48_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('$Barney',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_49_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',), ('|teststring\\\\\\\\t|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring                      |',), ('|teststring\\\\\\\\t                   |',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_49_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring                      |',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_49_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('nothing                         ', 32), ('teststring                      ', 32), ('teststring\\\\\\\\t                   ', 32))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('nothing                         ', 7), ('teststring                      ', 10), ('teststring\\\\\\\\t                   ', 13))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_49_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|nothing|',), ('|teststring|',), ('|teststring|',), ('|teststring\\\\\\\\t|',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|nothing                         |',), ('|teststring                      |',), ('|teststring                      |',), ('|teststring\\\\\\\\t                   |',))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_49_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',), ('|teststring|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring                      |',), ('|teststring                      |',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_49_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',), ('|teststring|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring                      |',), ('|teststring                      |',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_49_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',), ('|teststring|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring                      |',), ('|teststring                      |',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_50_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((\"Let's create some new events from the name of postgres\",))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"(\"\nLINE 1: ...T('Let''s create some new events from the name of ', USER())\n                                                                    ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"f2\" is of type bytea but expression is of type text\nLINE 1: INSERT INTO t1 VALUES (2, REPEAT('-', 104))\n                                  ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"f2\" is of type bytea but expression is of type text\nLINE 1: INSERT INTO t1 VALUES (1, REPEAT('x', 104))\n                                  ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',), ('',), (None,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',), ('',), ('',), ('',))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2023, 1, 15),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(date) does not exist\nLINE 1: SELECT * FROM t1 ORDER BY UNIX_TIMESTAMP(f1) NULLS FIRST\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_18", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_19", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_20", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_21", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_22", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_23", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_24", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6, 40013), (5, 40008), (4, 40005), (3, 40003), (2, 40002), (1, 40001))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6, 40013), (5, 40008), (4, 40005), (3, 40003), (2, 40002), (1, 40001))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_52_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT * FROM t1 WHERE LENGTH(t1.vc) > 3\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_52_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT * FROM t1 WHERE LENGTH(t1.vc) = 3\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_52_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT * FROM t1 WHERE LENGTH(t1.vc) IS NULL\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_52_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT * FROM t1 WHERE NOT LENGTH(t1.vc) IS NULL\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_53_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function repeat(bit, integer) does not exist\nLINE 1: INSERT INTO t VALUES (REPEAT(x'0a', 1000))\n                              ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_53_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"a\" is of type bytea but expression is of type text\nLINE 1: INSERT INTO t VALUES (1, REPEAT('2', 257)), (1, REPEAT('1', ...\n                                 ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_53_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"a\" is of type bytea but expression is of type text\nLINE 1: INSERT INTO t VALUES (1, REPEAT('2', 255)), (1, REPEAT('1', ...\n                                 ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_53_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"a\" is of type bytea but expression is of type text\nLINE 1: INSERT INTO t VALUES (1, REPEAT('2', 32750), REPEAT('1', 327...\n                                 ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_54_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type bytea\nLINE 1: INSERT INTO t1 VALUES (NULL), ('A\\0\\0\\0BBBBBBBB'), (SPACE(50...\n                                       ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_54_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,), (12,), (50000,), (50000,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,), (12,), (50000,), (50000,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_55_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('AAAA', 105.0, datetime.date(2003, 3, 1), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('AAAA', 105.0, datetime.date(2003, 3, 1), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_55_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a-4',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a-4',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_55_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a-4.5',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a-4.5',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_55_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a-5',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a-5',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_55_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a-1',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a-1',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_55_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a0',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a0',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_55_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a0.0',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a0.0',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_55_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a0.0000',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a0.0000',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_55_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('ab',), ('ab',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('ab',), ('ab',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_55_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1234562',), ('x',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1234562',), ('x',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_55_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('', 'First'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', 'First'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_56_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"d\" is of type date but expression is of type interval\nLINE 1: INSERT INTO t1 VALUES (NULL + INTERVAL '1 DAY')\n                               ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_56_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type interval: \"NULL DAY\"\nLINE 1: INSERT INTO t1 VALUES ('2000-01-04' + INTERVAL 'NULL DAY')\n                                                       ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_56_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"d\" is of type date but expression is of type interval\nLINE 1: INSERT INTO t1 VALUES (NULL + INTERVAL '1 DAY')\n                               ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_56_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type interval: \"2000-01-04\"\nLINE 1: INSERT INTO t1 VALUES ('2000-01-04' + INTERVAL '1 DAY')\n                               ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_56_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False, datetime.time(0, 0)))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"ts\"\nLINE 1: ...RENT_DATE + INTERVAL '1 DAY' AS is_tomorrow, TIME(ts) FROM (...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_57_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "date/time field value out of range: \"0000-01-01\"\nLINE 1: ...ST(CAST(mydate AS DATE) AS TIMESTAMP) - CAST(CAST('0000-01-0...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_57_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 2, 1, None, None, None), (1, 3, 1, None, None, None), (2, 1, 2, None, None, None), (2, 3, 2, None, None, None), (3, 1, 3, None, None, None), (3, 2, 3, None, None, None))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \",\"\nLINE 1: SELECT * FROM t3 LEFT JOIN (t2 AS outr2, t2 AS outr, t1) ON ...\n                                               ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_57_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \",\"\nLINE 1: SELECT * FROM t3 JOIN (t2 AS outr2, t2 AS outr, t1) ON (outr...\n                                          ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_58_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT * FROM t1 WHERE a LIKE CONCAT('abc', '%')\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_58_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('abc',), ('abcd',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('abc',), ('abcd',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_59_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((10.0, 10.000000000000002, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((10.0, 10.000000000000002, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_59_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('3.0000000000000000'), Decimal('3.9068905956085185')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('3.0000000000000000'), Decimal('3.9068905956085185'), None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_59_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((10.0, 16.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('10.0000000000000000'), 16.0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_59_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_59_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_59_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_59_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('http://www.foo.com/',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function timediff(timestamp without time zone, integer) does not exist\nLINE 1: ...M t1 WHERE a = 'http://www.foo.com/' ORDER BY ABS(TIMEDIFF(t...\n                                                             ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_59_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-2, Decimal('2'), -2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"ubigint\" does not exist\nLINE 1: SELECT CAST(-2 AS UBIGINT) % 3, 18446744073709551614 % 3, -2...\n                          ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_59_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, Decimal('5'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"ubigint\" does not exist\nLINE 1: SELECT 5 % CAST(-2 AS UBIGINT), 5 % 18446744073709551614, 5 ...\n                              ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_59_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-32.0, Decimal('2135987035920910081237100813796390160618078741685240921940550748740445664954564698653747478265824'), -32.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"ubigint\" does not exist\nLINE 1: SELECT CAST(-2 AS UBIGINT) ^ 5, 18446744073709551614 ^ 5, -2...\n                          ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_60_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('-4939092'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('-4939092'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_60_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_60_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_60_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_60_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((9223372036854774784,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((9223372036854774784,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_60_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-9223372036854775808,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-9223372036854775808,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_60_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"ubigint\" does not exist\nLINE 1: SELECT * FROM t0 WHERE CAST(COALESCE(t0.c0, -1) AS UBIGINT)\n                                                           ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_60_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"ubigint\" does not exist\nLINE 1: SELECT * FROM t0 WHERE CAST(COALESCE(t0.c0, -1) AS UBIGINT)\n                                                           ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_60_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"ubigint\" does not exist\nLINE 1: SELECT CAST(COALESCE(t0.c0, -1) AS UBIGINT) IS TRUE FROM t0\n                                           ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_60_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"ubigint\" does not exist\nLINE 1: SELECT CAST(COALESCE(t0.c0, -1) AS UBIGINT) FROM t0\n                                           ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_61_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('0cc175b9c0f1b6a831c399e269772661', '3063633137356239633066316236613833316333393965323639373732363631'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(text) does not exist\nLINE 1: SELECT MD5('a'), HEX(MD5('a'))\n                         ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_61_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_61_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('5d41402abc4b2a76b9719d911017c592',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5d41402abc4b2a76b9719d911017c592',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_61_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"DESCRIBE\"\nLINE 1: DESCRIBE SELECT MD5('hello')\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_61_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((16,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unhex(text) does not exist\nLINE 1: SELECT LENGTH(UNHEX(MD5('abrakadabra')))\n                      ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_61_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_61_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_61_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_62_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('255.255.1.255', '0.0.1.255'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function inet_ntoa(bigint) does not exist\nLINE 1: SELECT INET_NTOA(4294902271), INET_NTOA(511)\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_62_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: timestamp without time zone + integer\nLINE 1: SELECT a FROM t1 WHERE MID(a + 0, 6, 3) IN (MID(200401061234...\n                                     ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_62_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: timestamp without time zone + integer\nLINE 1: SELECT a FROM t1 WHERE MID(a + 0, 6, 3) = (MID(2004010612340...\n                                     ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_62_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1,), (-2,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function inet_ntoa(integer) does not exist\nLINE 1: SELECT MIN(a) FROM t1 GROUP BY INET_NTOA(a)\n                                       ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_62_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,), (1,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "LEAST types integer and character varying cannot be matched\nLINE 1: SELECT DISTINCT LEAST(a, (SELECT b FROM t1 LIMIT 1)) FROM t1...\n                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_62_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,), (2,), (1,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "GREATEST types integer and character varying cannot be matched\nLINE 1: SELECT DISTINCT GREATEST(a, (SELECT b FROM t1 LIMIT 1)) FROM...\n                                    ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_63_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 0, 3, 1, 3, 3, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, 0, 3, 1.6, 3, 3, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_63_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, 1, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function bit_count(integer) does not exist\nLINE 1: SELECT 1 | (1 + 1), 5 & 3, BIT_COUNT(7)\n                                   ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_63_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1, 7, 3), (2, None, None, None), (3, 3, 7, 3))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function bit_count(integer) does not exist\nLINE 1: SELECT t1.a, t2.a, t2.b, BIT_COUNT(t2.b) FROM t1 LEFT JOIN t...\n                                 ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('000',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_char(unknown, unknown) is not unique\nLINE 1: SELECT TO_CHAR('1997-12-31 23:59:59.000002', 'US')\n               ^\nHINT:  Could not choose a best candidate function. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type interval to bigint\nLINE 1: SELECT CAST(AGE(CAST('1997-12-31 23:59:59.000001' AS TIMESTA...\n               ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(3, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function makedate(integer, integer) does not exist\nLINE 1: SELECT MAKEDATE(03, 1)\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1997, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function makedate(integer, integer) does not exist\nLINE 1: SELECT MAKEDATE(1997, 1)\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1996, 12, 31, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function makedate(integer, integer) does not exist\nLINE 1: SELECT MAKEDATE(1997, 0)\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(9999, 12, 31, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function makedate(integer, integer) does not exist\nLINE 1: SELECT MAKEDATE(9999, 365)\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 10000 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function makedate(integer, integer) does not exist\nLINE 1: SELECT MAKEDATE(9999, 366)\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(100, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function makedate(integer, integer) does not exist\nLINE 1: SELECT MAKEDATE(100, 1)\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1997, 12, 30, 22, 58, 57, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function subtime(unknown, unknown) does not exist\nLINE 1: SELECT SUBTIME('1997-12-31 23:59:59.000001', '1 1:1:1.000002...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1, seconds=82738),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function subtime(unknown, unknown) does not exist\nLINE 1: SELECT SUBTIME('1997-12-31 23:59:59.999999', '1998-01-01 01:...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(23, 0, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function subtime(unknown, unknown) does not exist\nLINE 1: SELECT SUBTIME('01:00:00.999999', '02:00:00.999998')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(1, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function subtime(unknown, unknown) does not exist\nLINE 1: SELECT SUBTIME('02:01:01.999999', '01:01:01.999999')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(23, 59, 59, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function timediff(unknown, unknown) does not exist\nLINE 1: SELECT TIMEDIFF('1997-01-01 23:59:59.000001', '1995-12-31 23...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(22, 58, 57, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function timediff(unknown, unknown) does not exist\nLINE 1: SELECT TIMEDIFF('1997-12-31 23:59:59.000001', '1997-12-30 01...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function timediff(unknown, unknown) does not exist\nLINE 1: SELECT TIMEDIFF('1997-12-31 23:59:59.000001', '23:59:59.0000...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(23, 59, 59, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function timediff(unknown, unknown) does not exist\nLINE 1: SELECT TIMEDIFF('2000:01:01 00:00:00', '2000:01:01 00:00:00....\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(23, 59, 59, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function timediff(unknown, unknown) does not exist\nLINE 1: SELECT TIMEDIFF('2005-01-11 15:48:49.999999', '2005-01-11 15...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_65_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_65_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(20, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(20, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_65_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 1, 1, 1, 999999, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'2001-12-01'\"\nLINE 1: SELECT TIMESTAMP('2001-12-01', '01:01:01.999999')\n                         ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_65_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 10, 1, 1, 1, 1, 1, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'2001-10-01'\"\nLINE 1: SELECT TIMESTAMP('2001-10-01', '01:01:01.000001')\n                         ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_65_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 20, 1, 1, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'2001-12-01'\"\nLINE 1: SELECT TIMESTAMP('2001-12-01', '20:01:01')\n                         ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_65_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'2001-12-01'\"\nLINE 1: SELECT TIMESTAMP('2001-12-01')\n                         ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_65_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('31'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function day(date) does not exist\nLINE 1: SELECT DAY(CAST('1997-12-31 23:59:59.000001' AS DATE))\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_65_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:59:59.000001',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'1997-12-31 23:59:59.000001'\"\nLINE 1: SELECT TIME('1997-12-31 23:59:59.000001')\n                    ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_65_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0), None, None, datetime.time(0, 0)), (datetime.time(1, 1, 1, 999999), datetime.time(23, 58, 58), datetime.time(0, 1, 2), datetime.time(23, 58, 59, 999999)), (datetime.time(22, 58, 58, 1), datetime.time(0, 1, 2), datetime.time(23, 58, 58), datetime.time(22, 59)), (None, None, None, None))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function timediff(timestamp without time zone, timestamp without time zone) does not exist\nLINE 1: SELECT TIMEDIFF(t1, t4) AS ttt, TIMEDIFF(t2, t3) AS qqq, TIM...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_65_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2003, 1, 2, 10, 11, 12, 1200, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2003, 1, 2, 10, 11, 12, 1200, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_65_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0), datetime.time(0, 0)))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'00:00:00'\"\nLINE 1: ...008-09-29 20:10:10', '2008-09-30 20:10:10'), TIME('00:00:00'...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_65_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'00:00:00'\"\nLINE 1: ...08-09-29 20:10:10', '2008-09-30 20:10:10') > TIME('00:00:00'...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_65_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'00:00:00'\"\nLINE 1: ...08-09-29 20:10:10', '2008-09-30 20:10:10') < TIME('00:00:00'...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_66_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:42:12',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'23:42:12'\"\nLINE 1: SELECT CAST(TIME('23:42:12') AS DECIMAL)\n                         ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_66_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'23:59:59'\"\nLINE 1: SELECT SEC_TO_TIME(86399) = TIME('23:59:59')\n                                         ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_66_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function sec_to_time(integer) does not exist\nLINE 1: SELECT SEC_TO_TIME(86399) = '23:59:59'\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_66_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"SEC_TO_TIME\"\nLINE 1: SELECT TIME(SEC_TO_TIME(86399)) = TIME('23:59:59')\n                    ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_66_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_66_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"MAKE_TIME\"\nLINE 1: SELECT TIME(MAKE_TIME(1, 0, 1)) = CAST('01:00:01' AS TIME)\n                    ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_66_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_67_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function elt(integer, integer) does not exist\nLINE 1: SELECT ELT(2, 1), FIELD(NULL, 'a', 'b', 'c')\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_67_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 0, 0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function field(unknown, unknown, unknown) does not exist\nLINE 1: SELECT FIELD('b', 'a', NULL), FIELD(1, 0, NULL) + 0, FIELD(1...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_67_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 2, 2, 2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function field(unknown, unknown, unknown) does not exist\nLINE 1: SELECT FIELD(NULL, 'a', NULL), FIELD(NULL, 0, NULL) + 0, FIE...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_67_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'one'), (2, 'one'), (4, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function elt(integer, unknown, unknown) does not exist\nLINE 1: SELECT one.id, ELT(two.val, 'one', 'two') FROM t1 AS one, t2...\n                       ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_67_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'one'), (2, 'one'), (4, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function elt(integer, unknown, unknown) does not exist\nLINE 1: SELECT one.id, ELT(two.val, 'one', 'two') FROM t1 AS one, t2...\n                       ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_68_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_68_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_68_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_68_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('</a>',), ('</a>..........................',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('</a>',), ('</a>..........................',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, True, True, False, False, True, -1, 1, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: ...LECT 0 = 0, 1 > 0, 1 >= 1, 1 < 0, 1 <= 0, 1 <> 0, STRCMP('ab...\n                                                             ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('abc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('abc',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "can't execute an empty query", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "can't execute an empty query", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('0.0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('0.0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('0.0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('0.0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('5',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('11',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('11',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((5,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: text + integer\nLINE 1: SELECT GREATEST('11', '5', '2') + 0\n                                        ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('5.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: text + numeric\nLINE 1: SELECT GREATEST('11', '5', '2') + 0.00\n                                        ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('18446744073709551615'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('18446744073709551615'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_20", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_27", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_28", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
