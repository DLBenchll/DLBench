{"sql_id": "duckdb_1_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 10))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 10))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_1_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 10), (2, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 10), (2, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_1_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2, 20))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, 20))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_1_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: INSERT INTO t1 (ts) VALUES (UNIX_TIMESTAMP('2002-10-27 01:00'))\n                                    ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: INSERT INTO t1 (ts) VALUES (UNIX_TIMESTAMP('2002-10-27 02:00'))\n                                    ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: INSERT INTO t1 (ts) VALUES (UNIX_TIMESTAMP('2002-10-27 03:00'))\n                                    ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1035680400, datetime.datetime(2002, 10, 27, 9, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)), (1035684000, datetime.datetime(2002, 10, 27, 10, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)), (1035687600, datetime.datetime(2002, 10, 27, 11, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1035680400, datetime.datetime(2002, 10, 27, 9, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)), (1035684000, datetime.datetime(2002, 10, 27, 10, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)), (1035687600, datetime.datetime(2002, 10, 27, 11, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((730851,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((730852,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((730851,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((730852,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timediff does not exist!\nDid you mean \"datediff\"?\nLINE 1: SELECT TIMEDIFF('2000:01:01 00:00:00', '2000:0...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('40 59 2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('2009-10-10 23:59:59', '%A %B ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:59:59',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"AS\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 1, 1, 11, 59, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'2003-12-31 23:59:59'\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2003, 1, 3, 0, 0, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timestampadd does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02 23:...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"date_diff(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tdate_diff(VARCHAR, TIMESTAMP, TIMESTAMP) -> BIGINT\n\tdate_diff(VARCHAR, TIME, TIME) -> BIGINT\n\tdate_diff(VARCHAR, TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH TIME ZONE) -> BIGINT\n\tdate_diff(VARCHAR, DATE, DATE) -> BIGINT\n\nLINE 1: SELECT DATE_DIFF('MONTH', '2003-02-01 23:59:59...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((63426758399.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Could not convert string '2009-11-29 23:59:59' to DOUBLE\nLINE 1: SELECT TO_SECONDS('2009-11-29 23:59:59')\n                          ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1447459199.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_101_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',), ('612020',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',), ('612020',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_101_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((13,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((13,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_101_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('41', 'a'), ('4100', 'b'), ('41', 'c'), ('4100', 'd'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('41', 'a'), ('4100', 'b'), ('41', 'c'), ('4100', 'd'))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_101_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_102_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_102_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_102_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_102_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_102_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_102_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name curdate does not exist!\nDid you mean \"current_date\"?\nLINE 1: CREATE TABLE t1 AS SELECT CURDATE() AS f1\n                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_102_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, 0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_102_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"last_day(STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tlast_day(TIMESTAMP) -> DATE\n\tlast_day(TIMESTAMP WITH TIME ZONE) -> DATE\n\tlast_day(DATE) -> DATE\n\nLINE 1: SELECT 1 FROM (SELECT LAST_DAY('0')) AS a\n                              ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_102_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name makedate does not exist!\nDid you mean \"make_date\"?\nLINE 1: SELECT 1 FROM (SELECT MAKEDATE(2011, 0)) AS a\n                              ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_2_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 'x'), (2, 'xx'), (3, 'xxx'), (4, 'xxxx'), (5, 'xxxxx'), (6, 'xxxxxx'), (7, 'xxxxxxx'), (8, 'xxxxxxxx'), (9, 'xxxxxxxxx'), (10, 'xxxxxxxxxx'))", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 'x'), (2, 'xx'), (3, 'xxx'), (4, 'xxxx'), (5, 'xxxxx'), (6, 'xxxxxx'), (7, 'xxxxxxx'), (8, 'xxxxxxxx'), (9, 'xxxxxxxxx'), (10, 'xxxxxxxxxx'))", "rowcount": 10, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_3_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('NO',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('NO',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_39_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name field does not exist!\nDid you mean \"filter\"?\nLINE 1: ...HEN a ELSE a END AS b FROM t1 ORDER BY FIELD(b + 1, 1) NULLS FIRST\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_39_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,), (3,), (1,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name field does not exist!\nDid you mean \"filter\"?\nLINE 1: ...HEN a ELSE a END AS b FROM t1 ORDER BY FIELD(b, 1) NULLS FIRST\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a=9223372036854775807 AND \u2502\\n\u2502        a IS NOT NULL      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'trim(BIGINT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\ttrim(VARCHAR) -> VARCHAR\n\ttrim(VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: ...M t1 WHERE a = 9223372036854775807 AND TRIM(a) = b\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a=9223372036854775806 AND \u2502\\n\u2502        a IS NOT NULL      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'trim(BIGINT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\ttrim(VARCHAR) -> VARCHAR\n\ttrim(VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: ...M t1 WHERE a = 9223372036854775806 AND TRIM(a) = b\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a=9223372036854775805 AND \u2502\\n\u2502        a IS NOT NULL      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'trim(BIGINT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\ttrim(VARCHAR) -> VARCHAR\n\ttrim(VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: ...M t1 WHERE a = 9223372036854775805 AND TRIM(a) = b\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502   a=0 AND a IS NOT NULL   \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'trim(BIGINT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\ttrim(VARCHAR) -> VARCHAR\n\ttrim(VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: ...CRIBE SELECT 1 FROM t1 WHERE a = 0 AND TRIM(a) = b\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('3A',), ('3B',), ('3C',), ('3D',), ('3E',), ('3F',), ('40',), ('5B',), ('5C783543',), ('5D',), ('5E',), ('5F',), ('60',), ('7B',), ('7C',), ('7D',), ('7E',))", "rowcount": 17, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('3A',), ('3B',), ('3C',), ('3D',), ('3E',), ('3F',), ('40',), ('5B',), ('5C783543',), ('5D',), ('5E',), ('5F',), ('60',), ('7B',), ('7C',), ('7D',), ('7E',))", "rowcount": 17, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name t1 does not exist!\nDid you mean \"pg_tables\"?\nLINE 1: ...SELECT concat(b1.b, b2.b) AS head FROM t1 b1, t1 b2; -- CONCAT\n                                                  ^", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name t1 does not exist!\nDid you mean \"pg_tables\"?\nLINE 1: ...SELECT CONCAT(b1.b, b2.b) AS head FROM t1 AS b1, t1 AS b2\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((256,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((256,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "'NoneType' object has no attribute 'fetchall'", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'octet_length(VARCHAR)'. You might need to add explicit type casts.\n\tCandidate functions:\n\toctet_length(BLOB) -> BIGINT\n\toctet_length(BIT) -> BIGINT\n\nLINE 1: ...ECT COUNT(*) FROM t1 WHERE a <> '' AND OCTET_LENGTH(a) = 2\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name char_length does not exist!\nDid you mean \"array_length\"?\nLINE 1: SELECT * FROM t1 WHERE CHAR_LENGTH(a) = 2\n                               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'octet_length(VARCHAR)'. You might need to add explicit type casts.\n\tCandidate functions:\n\toctet_length(BLOB) -> BIGINT\n\toctet_length(BIT) -> BIGINT\n\nLINE 1: ...ECT COUNT(*) FROM t1 WHERE a <> '' AND OCTET_LENGTH(a) = 3\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_7_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc', 2), ('\u07f0', 1), ('\u02ae', 1), ('', 0), ('50515253', 8), ('31', 2), ('h31', 3), ('2805', 4))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc', 2), ('\u07f0', 1), ('\u02ae', 1), ('', 0), ('50515253', 8), ('31', 2), ('h31', 3), ('2805', 4))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_7_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc', '                  h\u04bc'), ('\u07f0', '                   \u07f0'), ('\u02ae', '                   \u02ae'), ('', '                    '), ('50515253', '            50515253'), ('31', '                  31'), ('h31', '                 h31'), ('2805', '                2805'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc', '                  h\u04bc'), ('\u07f0', '                   \u07f0'), ('\u02ae', '                   \u02ae'), ('', '                    '), ('50515253', '            50515253'), ('31', '                  31'), ('h31', '                 h31'), ('2805', '                2805'))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_7_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc', 'h\u04bc525252525252525252'), ('\u07f0', '\u07f05252525252525252525'), ('\u02ae', '\u02ae5252525252525252525'), ('', '52525252525252525252'), ('50515253', '50515253525252525252'), ('31', '31525252525252525252'), ('h31', 'h3152525252525252525'), ('2805', '28055252525252525252'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc', 'h\u04bc525252525252525252'), ('\u07f0', '\u07f05252525252525252525'), ('\u02ae', '\u02ae5252525252525252525'), ('', '52525252525252525252'), ('50515253', '50515253525252525252'), ('31', '31525252525252525252'), ('h31', 'h3152525252525252525'), ('2805', '28055252525252525252'))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_7_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name h does not exist!\nDid you mean \"information_schema.schemata\"?\nLINE 1: SELECT INSTR(c1, 'h') FROM h; -- INSTR\n                                   ^", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name h does not exist!\nDid you mean \"information_schema.schemata\"?\nLINE 1: SELECT STRPOS(c1, 'h') FROM h\n                                    ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_7_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_7_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_7_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_7_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_7_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('h315253', 'h315253'), ('h31525352', 'h31525352'), ('h3152535252', 'h3152535252'), ('h315253525252', 'h315253525252'), ('52h315253', '52h315253'), ('5252h315253', '5252h315253'), ('525252h315253', '525252h315253'), ('   h315253   ', 'h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('h315253', 'h315253'), ('h31525352', 'h31525352'), ('h3152535252', 'h3152535252'), ('h315253525252', 'h315253525252'), ('52h315253', '52h315253'), ('5252h315253', '5252h315253'), ('525252h315253', '525252h315253'), ('   h315253   ', 'h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_71_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1973, 11, 30, 5, 33, 9, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1973, 11, 30, 5, 33, 9, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_71_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1977, 6, 8, 5, 44, 50, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1977, 6, 8, 5, 44, 50, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_71_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 8, 0, 1, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 8, 0, 1, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_71_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP(TO_TIMESTAMP(123456789))\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_71_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((234567890.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP(TO_TIMESTAMP(234567890))\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_71_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2179098000.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP('2039-01-20 01:00:00')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_71_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2149376400.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP('2038-02-10 01:00:00')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_71_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3600.0, 3601.0, 2147487247.0, 2147487248.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP('1970-01-01 01:00:00'), ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_71_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((32536771199, datetime.datetime(3001, 1, 19, 7, 59, 59, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)), (325367711990, '12280-06-28 23:59:50+00'), (325367711991, '12280-06-28 23:59:51+00'), (325367711992, '12280-06-28 23:59:52+00'), (325367711993, '12280-06-28 23:59:53+00'), (325367711994, '12280-06-28 23:59:54+00'), (325367711995, '12280-06-28 23:59:55+00'), (325367711996, '12280-06-28 23:59:56+00'), (325367711997, '12280-06-28 23:59:57+00'), (325367711998, '12280-06-28 23:59:58+00'), (325367711999, '12280-06-28 23:59:59+00'))", "rowcount": 11, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((32536771199, datetime.datetime(3001, 1, 19, 7, 59, 59, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)), (325367711990, '12280-06-28 23:59:50+00'), (325367711991, '12280-06-28 23:59:51+00'), (325367711992, '12280-06-28 23:59:52+00'), (325367711993, '12280-06-28 23:59:53+00'), (325367711994, '12280-06-28 23:59:54+00'), (325367711995, '12280-06-28 23:59:55+00'), (325367711996, '12280-06-28 23:59:56+00'), (325367711997, '12280-06-28 23:59:57+00'), (325367711998, '12280-06-28 23:59:58+00'), (325367711999, '12280-06-28 23:59:59+00'))", "rowcount": 11, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_71_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((32536803599.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP('3001-01-19 08:59:59')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_72_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', \"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502   (concat(x, x) = 'XX')   \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t             \u2502\\n\u2502                           \u2502\\n\u2502       Projections: x      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\"))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x', 'VARCHAR', 'YES', None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_74_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_74_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((13,), (13,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((13,), (13,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_74_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_74_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_74_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 'abc-def', '6162632D646566'), (2, \"'(),-.\", '2728292C2D2E'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 'abc-def', '6162632D646566'), (2, \"'(),-.\", '2728292C2D2E'))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_74_17", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 'abc-def', '6162632D646566'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 'abc-def', '6162632D646566'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_75_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_75_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 12, 12), (2, 4, 4))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'octet_length(VARCHAR)'. You might need to add explicit type casts.\n\tCandidate functions:\n\toctet_length(BLOB) -> BIGINT\n\toctet_length(BIT) -> BIGINT\n\nLINE 1: SELECT pk, OCTET_LENGTH(tx), LENGTH(tx) FROM t1\n                   ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_76_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"IGNORE\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_76_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 110, 210, 110, 210))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name char_length does not exist!\nDid you mean \"array_length\"?\nLINE 1: SELECT i, LENGTH(a), LENGTH(b), CHAR_LENGTH(a), CHAR_LENGTH(b) FROM t1\n                                        ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_76_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_77_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(12, 22, 22), datetime.date(1997, 1, 1), datetime.datetime(1997, 1, 2, 0, 0), '1997-01-01 12:22:22', 3, 7, 5))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(12, 22, 22), datetime.date(1997, 1, 1), datetime.datetime(1997, 1, 2, 0, 0), '1997-01-01 12:22:22', 3, 7, 5))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_78_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_78_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_78_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_79_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Sun', 'Sunday'), (datetime.date(2006, 1, 2), 'Mon', 'Monday'), (datetime.date(2006, 1, 3), 'Tue', 'Tuesday'), (datetime.date(2006, 1, 4), 'Wed', 'Wednesday'), (datetime.date(2006, 1, 5), 'Thu', 'Thursday'), (datetime.date(2006, 1, 6), 'Fri', 'Friday'), (datetime.date(2006, 1, 7), 'Sat', 'Saturday'))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Sun', 'Sunday'), (datetime.date(2006, 1, 2), 'Mon', 'Monday'), (datetime.date(2006, 1, 3), 'Tue', 'Tuesday'), (datetime.date(2006, 1, 4), 'Wed', 'Wednesday'), (datetime.date(2006, 1, 5), 'Thu', 'Thursday'), (datetime.date(2006, 1, 6), 'Fri', 'Friday'), (datetime.date(2006, 1, 7), 'Sat', 'Saturday'))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_79_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Jan', 'January'), (datetime.date(2006, 2, 1), 'Feb', 'February'), (datetime.date(2006, 3, 1), 'Mar', 'March'), (datetime.date(2006, 4, 1), 'Apr', 'April'), (datetime.date(2006, 5, 1), 'May', 'May'), (datetime.date(2006, 6, 1), 'Jun', 'June'), (datetime.date(2006, 7, 1), 'Jul', 'July'), (datetime.date(2006, 8, 1), 'Aug', 'August'), (datetime.date(2006, 9, 1), 'Sep', 'September'), (datetime.date(2006, 10, 1), 'Oct', 'October'), (datetime.date(2006, 11, 1), 'Nov', 'November'), (datetime.date(2006, 12, 1), 'Dec', 'December'))", "rowcount": 12, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Jan', 'January'), (datetime.date(2006, 2, 1), 'Feb', 'February'), (datetime.date(2006, 3, 1), 'Mar', 'March'), (datetime.date(2006, 4, 1), 'Apr', 'April'), (datetime.date(2006, 5, 1), 'May', 'May'), (datetime.date(2006, 6, 1), 'Jun', 'June'), (datetime.date(2006, 7, 1), 'Jul', 'July'), (datetime.date(2006, 8, 1), 'Aug', 'August'), (datetime.date(2006, 9, 1), 'Sep', 'September'), (datetime.date(2006, 10, 1), 'Oct', 'October'), (datetime.date(2006, 11, 1), 'Nov', 'November'), (datetime.date(2006, 12, 1), 'Dec', 'December'))", "rowcount": 12, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_79_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1 Mon 01',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('2001-01-01', '%w %a %A')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_79_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('2001-01-01 00:00:00 Jan 00',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('2001-01-01', '%-m %b %B')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_79_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Mar AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('2010-03-23 11:00:00', '%I %p'...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_8_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('', 'ae'), STRCMP('ae', ''), STR...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_8_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('ss', ''), STRCMP('', 'ss'), STR...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_8_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('', 'af'), STRCMP('a', ''), STRC...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_8_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('ss', 'a'), STRCMP('', 'ssa'), S...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_8_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('', 'o'), STRCMP('', 'u'), STRCM...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_8_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, 1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('af', ''), STRCMP('', 'a'), STRC...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_8_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, 1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('a', 'ss'), STRCMP('ssa', ''), S...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_8_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('u', 'a'), STRCMP('u', '')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_8_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('s', 'a'), STRCMP('a', 'x')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_8_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 1, False, True), (1, 0, True, False))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name field does not exist!\nDid you mean \"filter\"?\nLINE 1: SELECT FIELD('ue', s1), FIELD('', s1), s1 = 'u...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_8_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('oe',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('oe',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xx123',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xx123',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xyxya',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xyxya',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('          I LOVE SQL',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('          I LOVE SQL',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_81_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_81_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((25165824,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((25165824,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_82_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1)), (datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3)), (datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2)))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1)), (datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2)), (datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3)))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_83_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('4142',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('4142',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_84_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: INSERT INTO t5 VALUES (1, STRFTIME('2001-01-01', '%A'))\n                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_84_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: INSERT INTO t5 VALUES (2, STRFTIME('2001-01-01', '%A'))\n                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_84_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: INSERT INTO t5 VALUES (3, STRFTIME('2001-01-01', '%A'))\n                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_84_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_85_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_85_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_85_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_85_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_85_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1968,), (3744,), (5520,), (7296,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1968,), (3744,), (5520,), (7296,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_86_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None, True, False, True, 1, 'TRUE', 'TRUE', False, True))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None, True, False, True, 1, 'TRUE', 'TRUE', False, True))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_86_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None, None, Decimal('1.1'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None, None, Decimal('1.1'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_86_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('', 'abababababababababab', '', None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', 'abababababababababab', '', None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_86_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name field does not exist!\nDid you mean \"filter\"?\nLINE 1: SELECT FIELD(NULL, 'a', 'b', 'c')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_86_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_86_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_86_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_87_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_87_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaaaaaaaa,bbbbbbbbbb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaaaaaaaa,bbbbbbbbbb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_87_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1748421965.342,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP()\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_88_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_88_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((100,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((100,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_88_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2000,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_88_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((100, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((100, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_89_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_89_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502        EMPTY_RESULT       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('hex(a)', 'VARCHAR', 'YES', None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_89_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('5C783030415C7830305C783030',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5C783030415C7830305C783030',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_89_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('this', 'is', 'a', 2, Decimal('2.0')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('this', 'is', 'a', 2, Decimal('2.0')))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('A',), ('AA',), ('BBB',), ('a',), ('a',), ('aa',), ('aaa',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('A',), ('AA',), ('BBB',), ('a',), ('a',), ('aa',), ('aaa',))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('A',), ('AA',), ('BBB',), ('a',), ('a',), ('aa',), ('aaa',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('A',), ('AA',), ('BBB',), ('a',), ('a',), ('aa',), ('aaa',))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 CASE  WHEN ((u = 1)) THEN \u2502\\n\u2502     (NULL) ELSE u END     \u2502\\n\u2502                           \u2502\\n\u2502          ~7 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502       Projections: u      \u2502\\n\u2502                           \u2502\\n\u2502          ~7 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('\"nullif\"(u, 1)', 'INTEGER', 'YES', None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((144.54,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((144.54,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6, 56))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6, 56))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True, False))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True, False))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, '05-03-2005', 'Day 1'), (2, '17-03-2005', 'Day 2'), (3, '28-03-2005', 'Day 3'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, datetime.datetime(2005, 3, 5, 13, 20, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>), 'Day 1'), (2, datetime.datetime(2005, 3, 17, 3, 6, 40, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>), 'Day 2'), (3, datetime.datetime(2005, 3, 28, 16, 53, 20, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>), 'Day 3'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, '28-03-2005', 'Day 3'), (2, '17-03-2005', 'Day 2'), (1, '05-03-2005', 'Day 1'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3, datetime.datetime(2005, 3, 28, 16, 53, 20, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>), 'Day 3'), (2, datetime.datetime(2005, 3, 17, 3, 6, 40, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>), 'Day 2'), (1, datetime.datetime(2005, 3, 5, 13, 20, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>), 'Day 1'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_26", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1234567890123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1234567890123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_27", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1234567890123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1234567890123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_29", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2001.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2001.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_90_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('10000-03-15 00:00:00', '10000-03-16 00:00:00', '10000-03-17 00:00:00'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name from_days does not exist!\nDid you mean \"from_base64\"?\nLINE 1: SELECT FROM_DAYS(3652499), FROM_DAYS(3652500),...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_90_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('117592-03-15 00:00:00', '117592-03-16 00:00:00', '117592-03-18 00:00:00'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name from_days does not exist!\nDid you mean \"from_base64\"?\nLINE 1: SELECT FROM_DAYS(42949670), FROM_DAYS(42949671...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_91_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_91_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((12000,), (120000,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((12000,), (120000,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_92_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502            NULL           \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         DUMMY_SCAN        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('(main.\"row\"(1, 2, main.\"row\"(3, 4)) IN (main.\"row\"(3, 2, main.\"row\"(3, 4)), main.\"row\"(1, 2, main.\"row\"(3, NULL))))', 'BOOLEAN', 'YES', None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_17", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_18", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_19", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_20", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_21", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_22", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_23", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_24", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_25", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_26", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_27", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 2, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 2, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2, 3, 1), (3, 2, 1), (1, 2, None))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, 3, 1), (3, 2, 1), (1, 2, None))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,), (False,), (False,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,), (False,), (False,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,), (True,), (True,), (True,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,), (True,), (True,), (True,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True, False, False, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True, False, False, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_95_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT ROW(a, 1) IN (SELECT SUM(b), 1) FROM t1 GROUP BY ...\n                         ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_95_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT ROW(a, 1) IN (SELECT SUM(b), 3) FROM t1 GROUP BY ...\n                         ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_95_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT ROW(1, 2) = (SELECT 1, 2 FROM t1 WHERE 1 = 0)\n                           ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_95_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT ROW(1, 2) = (SELECT 1, 3 FROM t1 WHERE 1 = 0)\n                           ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_95_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             al            \u2502\\n\u2502                           \u2502\\n\u2502          ~0 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502   PERFECT_HASH_GROUP_BY   \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502         Groups: #0        \u2502\\n\u2502    Aggregates: min(#1)    \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             a             \u2502\\n\u2502             a             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502       Projections: a      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('al', 'BOOLEAN', 'YES', None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_95_19", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('axyxy',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('axyxy',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('I LOVE SQL          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('I LOVE SQL          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_97_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502     (SUBQUERY IS NULL)    \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         HASH_JOIN         \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502      Join Type: MARK      \u2502\\n\u2502     Conditions: a = #0    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502                           \u2502              \u2502\\n\u2502          ~3 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\u2502             t1            \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502        Projections:       \u2502\u2502       Projections: a      \u2502\\n\u2502             a             \u2502\u2502                           \u2502\\n\u2502             b             \u2502\u2502                           \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502          ~3 Rows          \u2502\u2502          ~3 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a', 'INTEGER', 'YES', None, None, None), ('b', 'INTEGER', 'YES', None, None, None))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_97_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_98_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             x             \u2502\\n\u2502             y             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502       CROSS_PRODUCT       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502       (SUBQUERY > 0)      \u2502\u2502             t1            \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502                           \u2502\u2502        Projections:       \u2502\\n\u2502                           \u2502\u2502             x             \u2502\\n\u2502                           \u2502\u2502             y             \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\u2502          ~0 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 CASE  WHEN ((#1 > 1)) THEN\u2502\\n\u2502  (error(\\'More than one row\u2502\\n\u2502   returned by a subquery  \u2502\\n\u2502   used as an expression - \u2502\\n\u2502    scalar subqueries can  \u2502\\n\u2502  only return a single row.\u2502\\n\u2502          Use \"SET         \u2502\\n\u2502 scalar_subquery_error_on_m\u2502\\n\u2502   ultiple_rows=false\" to  \u2502\\n\u2502     revert to previous    \u2502\\n\u2502   behavior of returning a \u2502\\n\u2502 random row.\\')) ELSE #0 END\u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502    UNGROUPED_AGGREGATE    \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502        Aggregates:        \u2502\\n\u2502        \"first\"(#0)        \u2502\\n\u2502        count_star()       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             #0            \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (CAST(uuid() AS VARCHAR) =\u2502\\n\u2502     CAST(a AS VARCHAR))   \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t2            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          ~0 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x', 'INTEGER', 'YES', None, None, None), ('y', 'INTEGER', 'YES', None, None, None))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_98_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_98_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          SUBQUERY         \u2502\\n\u2502                           \u2502\\n\u2502          ~4 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502      LEFT_DELIM_JOIN      \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502     Join Type: SINGLE     \u2502\\n\u2502                           \u2502\\n\u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502  a IS NOT DISTINCT FROM a \u2502              \u2502\\n\u2502                           \u2502              \u2502\\n\u2502          ~4 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\u2502         HASH_JOIN         \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\u2502     Join Type: SINGLE     \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502       Projections: a      \u2502\u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502                           \u2502\u2502  a IS NOT DISTINCT FROM a \u2502              \u2502\\n\u2502                           \u2502\u2502                           \u2502              \u2502\\n\u2502          ~4 Rows          \u2502\u2502          ~4 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n                             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                             \u2502      COLUMN_DATA_SCAN     \u2502\u2502         PROJECTION        \u2502\\n                             \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                             \u2502                           \u2502\u2502    COALESCE(sum(b), 0)    \u2502\\n                             \u2502                           \u2502\u2502             a             \u2502\\n                             \u2502                           \u2502\u2502                           \u2502\\n                             \u2502          ~4 Rows          \u2502\u2502          ~2 Rows          \u2502\\n                             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502         HASH_JOIN         \u2502\\n                                                          \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                          \u2502      Join Type: LEFT      \u2502\\n                                                          \u2502                           \u2502\\n                                                          \u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502 a IS NOT DISTINCT FROM #0 \u2502              \u2502\\n                                                          \u2502                           \u2502              \u2502\\n                                                          \u2502          ~2 Rows          \u2502              \u2502\\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502         DELIM_SCAN        \u2502\u2502         PROJECTION        \u2502\\n                                                          \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                          \u2502       Delim Index: 1      \u2502\u2502__internal_decompress_integ\u2502\\n                                                          \u2502                           \u2502\u2502     ral_integer(#0, 5)    \u2502\\n                                                          \u2502                           \u2502\u2502             #1            \u2502\\n                                                          \u2502                           \u2502\u2502                           \u2502\\n                                                          \u2502          ~2 Rows          \u2502\u2502          ~0 Rows          \u2502\\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502   PERFECT_HASH_GROUP_BY   \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502         Groups: #0        \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502        Aggregates:        \u2502\\n                                                                                       \u2502    sum_no_overflow(#1)    \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         PROJECTION        \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502             a             \u2502\\n                                                                                       \u2502             b             \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         PROJECTION        \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502__internal_compress_integra\u2502\\n                                                                                       \u2502     l_utinyint(#0, 5)     \u2502\\n                                                                                       \u2502             #1            \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         SEQ_SCAN          \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502             t3            \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502        Projections:       \u2502\\n                                                                                       \u2502             a             \u2502\\n                                                                                       \u2502             b             \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('(SELECT COALESCE(sum(t3.b), 0) FROM t3 WHERE (t1.a = t3.a))', 'HUGEINT', 'YES', None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_98_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_98_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          SUBQUERY         \u2502\\n\u2502                           \u2502\\n\u2502          ~4 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502      LEFT_DELIM_JOIN      \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502     Join Type: SINGLE     \u2502\\n\u2502                           \u2502\\n\u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502  a IS NOT DISTINCT FROM a \u2502              \u2502\\n\u2502                           \u2502              \u2502\\n\u2502          ~4 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\u2502         HASH_JOIN         \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\u2502     Join Type: SINGLE     \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502       Projections: a      \u2502\u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502                           \u2502\u2502  a IS NOT DISTINCT FROM a \u2502              \u2502\\n\u2502                           \u2502\u2502                           \u2502              \u2502\\n\u2502          ~4 Rows          \u2502\u2502          ~4 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n                             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                             \u2502      COLUMN_DATA_SCAN     \u2502\u2502         PROJECTION        \u2502\\n                             \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                             \u2502                           \u2502\u2502    COALESCE(sum(b), 0)    \u2502\\n                             \u2502                           \u2502\u2502             a             \u2502\\n                             \u2502                           \u2502\u2502                           \u2502\\n                             \u2502          ~4 Rows          \u2502\u2502          ~2 Rows          \u2502\\n                             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502         HASH_JOIN         \u2502\\n                                                          \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                          \u2502      Join Type: LEFT      \u2502\\n                                                          \u2502                           \u2502\\n                                                          \u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502 a IS NOT DISTINCT FROM #0 \u2502              \u2502\\n                                                          \u2502                           \u2502              \u2502\\n                                                          \u2502          ~2 Rows          \u2502              \u2502\\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502         DELIM_SCAN        \u2502\u2502         PROJECTION        \u2502\\n                                                          \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                          \u2502       Delim Index: 1      \u2502\u2502__internal_decompress_integ\u2502\\n                                                          \u2502                           \u2502\u2502     ral_integer(#0, 5)    \u2502\\n                                                          \u2502                           \u2502\u2502             #1            \u2502\\n                                                          \u2502                           \u2502\u2502                           \u2502\\n                                                          \u2502          ~2 Rows          \u2502\u2502          ~0 Rows          \u2502\\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502   PERFECT_HASH_GROUP_BY   \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502         Groups: #0        \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502        Aggregates:        \u2502\\n                                                                                       \u2502    sum_no_overflow(#1)    \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         PROJECTION        \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502             a             \u2502\\n                                                                                       \u2502             b             \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         PROJECTION        \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502__internal_compress_integra\u2502\\n                                                                                       \u2502     l_utinyint(#0, 5)     \u2502\\n                                                                                       \u2502             #1            \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         SEQ_SCAN          \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502             t3            \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502        Projections:       \u2502\\n                                                                                       \u2502             a             \u2502\\n                                                                                       \u2502             b             \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('(SELECT COALESCE(sum(t3.b), 0) FROM t3 WHERE (t1.a = t3.a))', 'HUGEINT', 'YES', None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_99_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('XYZ', 1), ('XYZ', 1), ('ABC', 1), ('ABC', 1))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('XYZ', 1), ('XYZ', 1), ('ABC', 1), ('ABC', 1))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_10_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('b', 'a', 'a', 'a211'), ('c', 'a', 'a', 'a311'), ('d', 'a', 'a', 'a411'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('b', 'a', 'a', 'a211'), ('c', 'a', 'a', 'a311'), ('d', 'a', 'a', 'a411'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_10_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aa111', 'a'), ('ba211', 'a'), ('ca311', 'a'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aa111', 'a'), ('ba211', 'a'), ('ca311', 'a'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_10_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aa111', 'a', 'c111'), ('ba211', 'a', 'c211'), ('ca311', 'a', 'c311'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aa111', 'a', 'c111'), ('ba211', 'a', 'c211'), ('ca311', 'a', 'c311'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_10_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aa', 'a', 'a111', 'c111'), ('ba', 'a', 'a211', 'c211'), ('ca', 'a', 'a311', 'c311'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aa', 'a', 'a111', 'c111'), ('ba', 'a', 'a211', 'c211'), ('ca', 'a', 'a311', 'c311'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_10_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('9797', 'a', 'a'), ('9797', 'a', 'a'), ('9797', 'a', 'a'), ('9797', 'a', 'a'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('9797', 'a', 'a'), ('9797', 'a', 'a'), ('9797', 'a', 'a'), ('9797', 'a', 'a'))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_11_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 20), (3, 50))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name std does not exist!\nDid you mean \"stddev\"?\nLINE 1: ...Fld2) FROM t1 GROUP BY Fld1 HAVING NOT STD(Fld2) IS NULL\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_11_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 20), (3, 50))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 20), (3, 50))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_12_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1000,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_12_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1000,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_12_23", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((25,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((25,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_12_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (b = repeat(chr((65 + a)),\u2502\\n\u2502            20))           \u2502\\n\u2502                           \u2502\\n\u2502          ~40 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502           filler          \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502   a<10 AND a IS NOT NULL  \u2502\\n\u2502                           \u2502\\n\u2502         ~200 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a', 'INTEGER', 'YES', None, None, None), ('b', 'VARCHAR', 'YES', None, None, None), ('filler', 'VARCHAR', 'YES', None, None, None))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_12_25", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, 'AAAAAAAAAAAAAAAAAAAA', 'filler'), (1, 'BBBBBBBBBBBBBBBBBBBB', 'filler'), (2, 'CCCCCCCCCCCCCCCCCCCC', 'filler'), (3, 'DDDDDDDDDDDDDDDDDDDD', 'filler'), (4, 'EEEEEEEEEEEEEEEEEEEE', 'filler'), (5, 'FFFFFFFFFFFFFFFFFFFF', 'filler'), (6, 'GGGGGGGGGGGGGGGGGGGG', 'filler'), (7, 'HHHHHHHHHHHHHHHHHHHH', 'filler'), (8, 'IIIIIIIIIIIIIIIIIIII', 'filler'), (9, 'JJJJJJJJJJJJJJJJJJJJ', 'filler'))", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 'AAAAAAAAAAAAAAAAAAAA', 'filler'), (1, 'BBBBBBBBBBBBBBBBBBBB', 'filler'), (2, 'CCCCCCCCCCCCCCCCCCCC', 'filler'), (3, 'DDDDDDDDDDDDDDDDDDDD', 'filler'), (4, 'EEEEEEEEEEEEEEEEEEEE', 'filler'), (5, 'FFFFFFFFFFFFFFFFFFFF', 'filler'), (6, 'GGGGGGGGGGGGGGGGGGGG', 'filler'), (7, 'HHHHHHHHHHHHHHHHHHHH', 'filler'), (8, 'IIIIIIIIIIIIIIIIIIII', 'filler'), (9, 'JJJJJJJJJJJJJJJJJJJJ', 'filler'))", "rowcount": 10, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_13_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, '61626364656667', '61626364656667', 'boo'), (3, '71727374757677', '71727374757677', 'three'), (2, '696A6B696C6D6E', '696A6B696C6D6E', 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, '61626364656667', '61626364656667', 'boo'), (3, '71727374757677', '71727374757677', 'three'), (2, '696A6B696C6D6E', '696A6B696C6D6E', 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_14_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_14_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((18432,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18432,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_14_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_14_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_14_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_14_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "'NoneType' object has no attribute 'fetchall'", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_14_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((18432,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18432,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_15_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1293840000.0, 0.0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP('2011-01-01 00:00:00') A...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_15_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_15_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('abc', 'a')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('abc', 'b')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('abc', 'c')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('abc', 'd')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR(NULL, 'a')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('a', NULL)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR(NULL, NULL)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('31',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT HEX(CONCAT(REGEXP_INSTR('a', 'a')))\n                          ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR(1, 'a')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR(1.1, 'a')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('a', 1)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('a', 1.1)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR(subject, pattern) FROM t1\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('abcabcabc', 'a+', 1)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('abcabcabc', 'a+', 2)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('abcabcabc', 'b+', 1)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('abcabcabc', 'b+', 2)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('abcabcabc', 'b+', 3)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('abcabcabc', 'a+', 1, 2)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('abcabcabc', 'a+', 1, 3)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('abcabcabc', 'a+', 1, 4)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('abcabcabc', 'a+', 4, 2)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('a', 'a+', 1, 1, NULL)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('abcabcabc', 'a+', 1, 1, 0...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('abcabcabc', 'a+', 1, 1, 1...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('aaabcabcabc', 'a+', 1, 1,...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_28", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('aaabcabcabc', 'A+', 1, 1,...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_29", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('aaabcabcabc', 'A+', 1, 1,...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_30", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('aaabcabcabc', 'A+', 1, 1,...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_31", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('aaabcabcabc', 'A+', 1, 1,...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_32", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('a', 'a+', 1, 1, 1, NULL)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Xaax',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Xaax',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaXccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaXccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaXccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaXccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaa<$1>ccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaa<$1>ccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaabbccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaabbccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaxccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaxccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaax',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaax',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaxccc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaxccc',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_17", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_18", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_19", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_20", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_21", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('XXaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('XXaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_19_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: INSERT INTO t1 VALUES (REGEXP_INSTR('a', 'a'), REGEXP_INSTR('a...\n                               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_19_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_19_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((12,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Could not convert string 'b' to INT64\nLINE 1: ...LECT LENGTH(REGEXP_REPLACE(REPEAT('a', 'b'), 'a', 'b'))\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_19_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_19_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((16384,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name char_length does not exist!\nDid you mean \"array_length\"?\nLINE 1: SELECT CHAR_LENGTH(REGEXP_REPLACE(a, 'a', 'b')...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_19_17", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('$1',), ('$1',), ('$1',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('$1',), ('$1',), ('$1',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_19_21", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_20_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_20_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_20_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_21_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('11',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'concat_ws(INTEGER, VARCHAR)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tconcat_ws(VARCHAR, ANY, [ANY...]) -> VARCHAR\n\nLINE 1: SELECT CONCAT_WS(pkCrash, strCrash) FROM t1\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_21_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1, 'one'), (2, 1, 'one'), (4, 2, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name elt does not exist!\nDid you mean \"element_at\"?\nLINE 1: SELECT one.id, two.val, ELT(two.val, 'one', 'two') FROM t1 AS o...\n                                ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_22_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: timestamp field value out of range: \"01-01:02\", expected format is (YYYY-MM-DD HH:MM:SS[.US][\u00b1HH:MM| ZONE])\nLINE 1: ...CT LEAST(CAST('01-01-01' AS DATETIME), '01-01:02')\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_22_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2001, 12, 10),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: date field value out of range: \"2001-12/11\", expected format is (YYYY-MM-DD)\nLINE 1: ...LECT LEAST(CAST('2001-12-10' AS DATE), '2001-12/11')\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_22_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP(UTC_TIMESTAMP()) - UNIX_...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: INSERT INTO t1 (i, ts) VALUES (UNIX_TIMESTAMP('2003-03-01 00:00:00'), ...\n                                       ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: INSERT INTO t1 (i, ts) VALUES (UNIX_TIMESTAMP('2003-03-30 01:59:59'), ...\n                                       ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: INSERT INTO t1 (i, ts) VALUES (UNIX_TIMESTAMP(20030330015959), 2003033...\n                                       ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: INSERT INTO t1 (i, ts) VALUES (UNIX_TIMESTAMP('2003-05-01 00:00:00'), ...\n                                       ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((5,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: INSERT INTO t1 (i, ts) VALUES (UNIX_TIMESTAMP('2003-10-26 01:00:00'), ...\n                                       ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1981, 7, 1, 8, 0, 9, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1981, 7, 1, 8, 0, 9, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1048989599.0, 'Before the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP('2003-03-30 01:59:59'), ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1048991400.0, 'Inside the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP('2003-03-30 02:30:00'), ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1048993200.0, 'After the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP('2003-03-30 03:00:00'), ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_21", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 8, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 8, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-28801.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP('1969-12-31 15:59:59')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-28800.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP('1969-12-31 16:00:00')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-28799.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP('1969-12-31 16:00:01')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP('1970-01-01 00:00:01')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1641052801.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP('2022-01-01 16:00:01')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_24_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('31',), ('30',), ('31',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(a) FROM t1\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_24_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',), ('31',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(a) FROM t1\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_24_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(MIN(a)) FROM t1\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_24_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(MIN(b)) FROM t1\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_24_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30', '31', '30', '31'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(MIN(a)), HEX(MAX(a)), HEX(MIN(b)), ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_24_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(MIN(b)) FROM t1 WHERE a = 4\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_24_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(MIN(c)) FROM t1 WHERE a = 4 AND b =...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_24_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(MAX(b)) FROM t1\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_24_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_24_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',), ('31',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('31',), ('30',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_25_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('31', 100), ('31', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(b), i2 FROM t1 WHERE (i2 >= 100 AND...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_25_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('31', 100), ('31', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(b1), i2 FROM t2 WHERE (i2 >= 100 AN...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_25_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30', 100), ('30', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(b2), i2 FROM t2 WHERE (i2 >= 100 AN...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_25_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30302C3131',), ('31302C3031',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('30302C3131',), ('30312C3130',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_25_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('3130',), ('3030',), ('3131',), ('3031',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('3031',), ('3130',), ('3030',), ('3131',))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_25_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2, '3030'), (3, '3031'), (3, '3130'), (3, '3130'), (2, '3131'))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, '3030'), (3, '3031'), (3, '3130'), (3, '3130'), (2, '3131'))", "rowcount": 5, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_26_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('783631',), ('7836313030',), ('7836313230',), ('7836313631',), ('783632',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,), ('783631',), ('7836313030',), ('7836313230',), ('7836313631',), ('783632',))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_26_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('783030',), ('7836313030783030',), ('7836313230783030',), ('7836313631783030',), ('783631783030',), ('783632783030',))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5C30',), ('78363130305C30',), ('78363132305C30',), ('78363136315C30',), ('7836315C30',), ('7836325C30',))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_26_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('783631',), ('7836313030',), ('7836313230',), ('7836313631',), ('783632',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,), ('783631',), ('7836313030',), ('7836313230',), ('7836313631',), ('783632',))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_26_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_26_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((65535, 65535))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name char_length does not exist!\nDid you mean \"array_length\"?\nLINE 1: SELECT LENGTH(c), CHAR_LENGTH(c) FROM t\n                          ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_26_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_27_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1.7976931348623157e+308,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types '-(VARCHAR)'. You might need to add explicit type casts.\n\tCandidate functions:\n\t-(TINYINT) -> TINYINT\n\t-(TINYINT, TINYINT) -> TINYINT\n\t-(SMALLINT) -> SMALLINT\n\t-(SMALLINT, SMALLINT) -> SMALLINT\n\t-(INTEGER) -> INTEGER\n\t-(INTEGER, INTEGER) -> INTEGER\n\t-(BIGINT) -> BIGINT\n\t-(BIGINT, BIGINT) -> BIGINT\n\t-(HUGEINT) -> HUGEINT\n\t-(HUGEINT, HUGEINT) -> HUGEINT\n\t-(FLOAT) -> FLOAT\n\t-(FLOAT, FLOAT) -> FLOAT\n\t-(DOUBLE) -> DOUBLE\n\t-(DOUBLE, DOUBLE) -> DOUBLE\n\t-(DECIMAL) -> DECIMAL\n\t-(DECIMAL, DECIMAL) -> DECIMAL\n\t-(UTINYINT) -> UTINYINT\n\t-(UTINYINT, UTINYINT) -> UTINYINT\n\t-(USMALLINT) -> USMALLINT\n\t-(USMALLINT, USMALLINT) -> USMALLINT\n\t-(UINTEGER) -> UINTEGER\n\t-(UINTEGER, UINTEGER) -> UINTEGER\n\t-(UBIGINT) -> UBIGINT\n\t-(UBIGINT, UBIGINT) -> UBIGINT\n\t-(UHUGEINT) -> UHUGEINT\n\t-(UHUGEINT, UHUGEINT) -> UHUGEINT\n\t-(DATE, DATE) -> BIGINT\n\t-(DATE, INTEGER) -> DATE\n\t-(TIMESTAMP, TIMESTAMP) -> INTERVAL\n\t-(INTERVAL, INTERVAL) -> INTERVAL\n\t-(DATE, INTERVAL) -> TIMESTAMP\n\t-(TIME, INTERVAL) -> TIME\n\t-(TIMESTAMP, INTERVAL) -> TIMESTAMP\n\t-(TIME WITH TIME ZONE, INTERVAL) -> TIME WITH TIME ZONE\n\t-(INTERVAL) -> INTERVAL\n\t-(TIMESTAMP WITH TIME ZONE, INTERVAL) -> TIMESTAMP WITH TIME ZONE\n\t-(TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH TIME ZONE) -> INTERVAL\n\nLINE 1: ...CT LEAST(-1.1111111111111111111111111, -GROUP_CONCAT(1.7976931348623157E+308))...\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_28_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_28_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('2025 25', 2025, 2025))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('2025 25', 2025, 2025))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_28_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1206, seconds=84012),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'2000-01-27'\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_30_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3, 2, 3, 3), (4, 3, 3, 4), (7, 3, 3, 7))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3, 2, 3, 3), (4, 3, 3, 4), (7, 3, 3, 7))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_30_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"f1\" not found in FROM clause!\nLINE 1: INSERT INTO t1 VALUES (SUBSTRING(f1, 1, 3))\n                                         ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_30_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('10', 5.0), ('30', 15.0), ('50', 25.0), ('60', 30.0))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types '//(VARCHAR, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\t//(TINYINT, TINYINT) -> TINYINT\n\t//(SMALLINT, SMALLINT) -> SMALLINT\n\t//(INTEGER, INTEGER) -> INTEGER\n\t//(BIGINT, BIGINT) -> BIGINT\n\t//(HUGEINT, HUGEINT) -> HUGEINT\n\t//(FLOAT, FLOAT) -> FLOAT\n\t//(DOUBLE, DOUBLE) -> DOUBLE\n\t//(UTINYINT, UTINYINT) -> UTINYINT\n\t//(USMALLINT, USMALLINT) -> USMALLINT\n\t//(UINTEGER, UINTEGER) -> UINTEGER\n\t//(UBIGINT, UBIGINT) -> UBIGINT\n\t//(UHUGEINT, UHUGEINT) -> UHUGEINT\n\nLINE 1: SELECT a, (a // 2) FROM t1 ORDER BY a NULLS FIRST\n                     ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_31_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Unimplemented type for cast (TIMESTAMP WITH TIME ZONE -> INTEGER)\nLINE 1: INSERT INTO t1 VALUES (NOW())\n                               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_31_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Unimplemented type for cast (INTEGER -> TIMESTAMP WITH TIME ZONE)\nLINE 1: SELECT CASE WHEN y = NOW() THEN 1 ELSE 0 END FROM t1\n                         ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_31_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Unimplemented type for cast (INTEGER -> TIMESTAMP WITH TIME ZONE)\nLINE 1: SELECT * FROM t4 WHERE yyyy = NOW()\n                               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_31_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((87,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'date_diff(STRING_LITERAL, INTEGER, DOUBLE)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tdate_diff(VARCHAR, DATE, DATE) -> BIGINT\n\tdate_diff(VARCHAR, TIMESTAMP, TIMESTAMP) -> BIGINT\n\tdate_diff(VARCHAR, TIME, TIME) -> BIGINT\n\tdate_diff(VARCHAR, TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH TIME ZONE) -> BIGINT\n\nLINE 1: SELECT DATE_DIFF('QUARTER', LEAST(y1, y2), dbl...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_31_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2085,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hour(INTEGER)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thour(DATE) -> BIGINT\n\thour(TIMESTAMP) -> BIGINT\n\thour(INTERVAL) -> BIGINT\n\thour(TIME) -> BIGINT\n\thour(TIME WITH TIME ZONE) -> BIGINT\n\thour(TIMESTAMP WITH TIME ZONE) -> BIGINT\n\nLINE 1: SELECT HOUR(GREATEST(y1, y2)) FROM t1\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_32_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, '\"\"'), (0, '\" \"'), (0, '\"2012qwer\"'), (0, '\"qwer\"'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, '\"\"'), (0, '\" \"'), (0, '\"2012qwer\"'), (0, '\"qwer\"'))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_33_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"resultrowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('6231313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131',), ('6231303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030',), ('6230303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303031',), ('6231303130313031303130313031303130313031303130313031303130313031303130313031303130313031303130313031303130313031303130313031303130',), ('6230313031303130313031303130313031303130313031303130313031303130313031303130313031303130313031303130313031303130313031303130313031',))", "rowcount": 5, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_33_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('62303030303030303030',), ('62303030303030303031',), ('62303030303030303130',), ('62303030303030303131',), ('62303030303030313030',))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('62303030303030303030',), ('62303030303030303031',), ('62303030303030303130',), ('62303030303030303131',), ('62303030303030313030',))", "rowcount": 5, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_34_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('*a*',), ('*b*',), ('*o*',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('*a*',), ('*b*',), ('*o*',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_34_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a', '*a*', 'o', '*o*'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a', '*a*', 'o', '*o*'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_34_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('-hello -hello -',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_34_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('-hello -hello -',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_34_20", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_34_22", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_34_24", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',), ('62',), ('6220',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',), ('62',), ('6220',))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_35_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "'NoneType' object has no attribute 'fetchall'", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_35_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "'NoneType' object has no attribute 'fetchall'", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_35_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "'NoneType' object has no attribute 'fetchall'", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_35_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1F9480179366F2BF567E1C4B964C1EF029080707',), ('1F9480179366F2BF567E1C4B964C1EF029082020',), ('1F9480179366F2BF567E1C4B964C1EF029087575',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1F9480179366F2BF567E1C4B964C1EF029080707',), ('1F9480179366F2BF567E1C4B964C1EF029082020',), ('1F9480179366F2BF567E1C4B964C1EF029087575',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_35_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502          ORDER_BY         \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502           #1 ASC          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502           hex(a)          \u2502\\n\u2502             a             \u2502\\n\u2502                           \u2502\\n\u2502          ~3 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502       Projections: a      \u2502\\n\u2502                           \u2502\\n\u2502          ~3 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('hex(a)', 'VARCHAR', 'YES', None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_35_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1F9480179366F2BF567E1C4B964C1EF029082020',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1F9480179366F2BF567E1C4B964C1EF029082020',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_35_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_36_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2, 2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, 2))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_36_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_36_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_36_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False, False, False, False, 'N', 'N', 'N', 'N', 'N'), (False, False, True, False, 'N', 'Y', 'Y', 'N', 'N'), (True, False, False, False, 'N', 'N', 'N', 'Y', 'N'), (False, False, False, True, 'N', 'Y', 'Y', 'N', 'N'), (False, True, False, False, 'N', 'N', 'N', 'Y', 'N'), (False, False, True, True, 'N', 'Y', 'Y', 'N', 'Y'), (False, True, True, False, 'N', 'Y', 'Y', 'Y', 'N'), (True, False, False, True, 'N', 'Y', 'Y', 'Y', 'N'), (True, True, False, False, 'Y', 'N', 'N', 'Y', 'N'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Could not convert string 'N' to INT32\nLINE 1: SELECT COALESCE(A, 'N') AS A, COALESCE(B, 'N') AS B, COALE...\n                           ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_36_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False, False, False, False, False, False, False, False, False), (False, False, True, False, False, True, True, False, False), (True, False, False, False, False, False, False, True, False), (False, False, False, True, False, True, True, False, False), (False, True, False, False, False, False, False, True, False), (False, False, True, True, False, True, True, False, True), (False, True, True, False, False, True, True, True, False), (True, False, False, True, False, True, True, True, False), (True, True, False, False, True, False, False, True, False))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False, False, False, False, False, False, False, False, False, False), (False, False, True, False, False, True, True, False, False, False), (True, False, False, False, False, False, False, True, False, False), (False, False, False, True, False, True, True, False, False, False), (False, True, False, False, False, False, False, True, False, False), (False, False, True, True, False, True, True, False, True, True), (False, True, True, False, False, True, True, True, False, False), (True, False, False, True, False, True, True, True, False, False), (True, True, False, False, True, False, False, True, False, False))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.date(2004, 1, 22),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2004, 1, 22),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timediff does not exist!\nDid you mean \"datediff\"?\nLINE 1: SELECT TIMEDIFF(CAST('2004-12-30 12:00:00' AS ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(seconds=42480),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timediff does not exist!\nDid you mean \"datediff\"?\nLINE 1: SELECT TIMEDIFF(CAST('1 12:00:00' AS TIME), '1...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True, True))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True, True))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: Type BLOB does not support any modifiers!", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, 0, 0), (None, None, None))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 0, 0), (None, None, None))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, 0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"hour(\"NULL\")\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\thour(INTERVAL) -> BIGINT\n\thour(TIME) -> BIGINT\n\thour(TIME WITH TIME ZONE) -> BIGINT\n\thour(DATE) -> BIGINT\n\nLINE 1: SELECT HOUR(NULL), MINUTE(NULL), SECOND(NULL)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_22", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('value=340000.0',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('value=340000.0',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(1, 2, 1, 600000),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(1, 2, 1, 600000),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_38_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP(a, b) FROM t1\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_38_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1988, '198819881988'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Type with name YEAR does not exist!", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_38_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x1988',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Type with name YEAR does not exist!", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_38_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((73800.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_to_sec does not exist!\nDid you mean \"timezone\"?\nLINE 1: SELECT TIME_TO_SEC(CAST('2030' AS YEAR))\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_38_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1988, 1, 1, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timestampadd does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT TIMESTAMPADD(MINUTE, 1, CAST(1988 AS YE...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_38_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2025,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Type with name YEAR does not exist!", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_38_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_40_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61', 0, -1), ('615C5C30', 1, 1), ('615C5C74', 1, 1), ('6120', 1, 0))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT HEX(a), STRCMP(a, 'a'), STRCMP(a, 'a ') FROM t1\n                       ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_40_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12', False), ('11', False), ('22', False))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12', False), ('11', False), ('22', False))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_40_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', \"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (concat(CAST(b AS VARCHAR)\u2502\\n\u2502  , CAST(c AS VARCHAR)) =  \u2502\\n\u2502          '0101')          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             b             \u2502\\n\u2502             c             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502   b=1 AND b IS NOT NULL   \u2502\\n\u2502                           \u2502\\n\u2502          ~2 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\"))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('b', 'INTEGER', 'YES', None, None, None), ('c', 'INTEGER', 'YES', None, None, None))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_40_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_40_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_40_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,), (False,), (False,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,), (False,), (False,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_40_17", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,), (True,), (True,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,), (True,), (True,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_41_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_42_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_43_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('string ', 'string '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name space does not exist!\nDid you mean \"strip_accents\"?\nLINE 1: SELECT CONCAT(name, SPACE(level)), CONCAT(name, REPEAT(' ',...\n                            ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_43_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_43_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((256,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((256,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_43_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((256,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((256,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_44_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_44_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_44_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_44_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1234567,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1234567,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_44_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'concat_ws(INTEGER_LITERAL, INTEGER_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tconcat_ws(VARCHAR, ANY, [ANY...]) -> VARCHAR\n\nLINE 1: CREATE TABLE t2 AS SELECT CONCAT_WS(1, 2, 3) FROM t1\n                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_44_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'lower(INTEGER)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tlower(VARCHAR) -> VARCHAR\n\nLINE 1: CREATE TABLE t2 AS SELECT LOWER(a) FROM t1\n                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_44_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'upper(INTEGER)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tupper(VARCHAR) -> VARCHAR\n\nLINE 1: CREATE TABLE t2 AS SELECT UPPER(a) FROM t1\n                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_44_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'repeat(INTEGER_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\trepeat(VARCHAR, BIGINT) -> VARCHAR\n\trepeat(BLOB, BIGINT) -> BLOB\n\trepeat(ANY[], BIGINT) -> ANY[]\n\nLINE 1: CREATE TABLE t2 AS SELECT REPEAT(1, 2) FROM t1\n                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_44_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name elt does not exist!\nDid you mean \"element_at\"?\nLINE 1: CREATE TABLE t2 AS SELECT ELT(1, 111, 222, 333) FROM t1\n                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('       xxx',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('       xxx',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('x', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_17", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_18", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name field does not exist!\nDid you mean \"filter\"?\nLINE 1: SELECT FIELD(c1, ''), FIELD('', c1) FROM t1\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_21", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_22", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('c1', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name elt does not exist!\nDid you mean \"element_at\"?\nLINE 1: SELECT ELT(1, c1, ''), ELT(1, '', c1) FROM t1\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_24", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_25", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_46_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 15, 2, 59, 58, 999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Invalid Input Error: Failed to parse format specifier %d-%m-%Y %H:%i:%s.%f: Unrecognized format for strftime/strptime: %i", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_46_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 12, 12, 22, 30, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Invalid Input Error: Could not parse string \"2004.12.12 22.30.59\" according to format specifier \"%Y.%m.%d %H:%M:%S\"\n2004.12.12 22.30.59\n              ^\nError: Literal does not match, expected :", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_46_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('2003-01-02 08:11:02',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('2003-01-02 08:11:02',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_46_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('14',), ('14',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('14',), ('14',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_46_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('00 (Thu), 01 00 (Jan) 2004',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('2004-01-01', '%A (%a), %-d %B...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_format does not exist!\nDid you mean \"timetz_byte_comparable\"?\nLINE 1: SELECT TIME_FORMAT('24:00:00', '%r')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_format does not exist!\nDid you mean \"timetz_byte_comparable\"?\nLINE 1: SELECT TIME_FORMAT('00:00:00', '%r')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12:00:00 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_format does not exist!\nDid you mean \"timetz_byte_comparable\"?\nLINE 1: SELECT TIME_FORMAT('12:00:00', '%r')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('03:00:00 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_format does not exist!\nDid you mean \"timetz_byte_comparable\"?\nLINE 1: SELECT TIME_FORMAT('15:00:00', '%r')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('01:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_format does not exist!\nDid you mean \"timetz_byte_comparable\"?\nLINE 1: SELECT TIME_FORMAT('01:00:00', '%r')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_format does not exist!\nDid you mean \"timetz_byte_comparable\"?\nLINE 1: SELECT TIME_FORMAT('00:00:00', '%l %p')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('01 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_format does not exist!\nDid you mean \"timetz_byte_comparable\"?\nLINE 1: SELECT TIME_FORMAT('01:00:00', '%l %p')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_format does not exist!\nDid you mean \"timetz_byte_comparable\"?\nLINE 1: SELECT TIME_FORMAT('12:00:00', '%l %p')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('11 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_format does not exist!\nDid you mean \"timetz_byte_comparable\"?\nLINE 1: SELECT TIME_FORMAT('23:00:00', '%l %p')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_format does not exist!\nDid you mean \"timetz_byte_comparable\"?\nLINE 1: SELECT TIME_FORMAT('24:00:00', '%l %p')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2004, 4, 30),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Invalid Input Error: Could not parse string \"04/30 /2004\" according to format specifier \"%m /%d /%Y\"\n04/30 /2004\n  ^\nError: Space does not match, expected  /", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2004, 4, 30),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('00 01 January 2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('0000-01-01', '%A %d %B %Y') A...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('09 28 February 0000',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('0000-02-28', '%A %d %B %Y') A...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('00 01 January 2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('2009-01-01', '%A %d %B %Y') A...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_48_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('\"3\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('\"3\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_48_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('\"$Barney\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_49_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('|teststring\\\\\\\\t|',), ('|teststring|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring\\\\\\\\t|',), ('|teststring|',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_49_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_49_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('nothing', 7), ('teststring', 10), ('teststring\\\\\\\\t', 13))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('nothing', 7), ('teststring', 10), ('teststring\\\\\\\\t', 13))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_49_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('|nothing|',), ('|teststring|',), ('|teststring |',), ('|teststring\\\\\\\\t|',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|nothing|',), ('|teststring|',), ('|teststring |',), ('|teststring\\\\\\\\t|',))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_49_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_49_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_49_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('|teststring |',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring |',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_50_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((\"Let's create some new events from the name of \",))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((\"Let's create some new events from the name of duckdb\",))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',), ('',), ('',), ('',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',), ('',), ('',), ('',))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2023, 1, 15),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT * FROM t1 ORDER BY UNIX_TIMESTAMP(f1) NULLS FIRST\n                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_18", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_19", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_20", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_21", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_22", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_23", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_24", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6, 40013), (5, 40008), (4, 40005), (3, 40003), (2, 40002), (1, 40001))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6, 40013), (5, 40008), (4, 40005), (3, 40003), (2, 40002), (1, 40001))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_52_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502             vc            \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502      (length(vc) > 3)     \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             vc            \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~1029 Rows        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('col1_idx', 'INTEGER', 'YES', None, None, None), ('col2_idx', 'INTEGER', 'YES', None, None, None), ('col3', 'INTEGER', 'YES', None, None, None), ('col4', 'INTEGER', 'YES', None, None, None), ('vc', 'VARCHAR', 'YES', None, None, None), ('vc_ft', 'VARCHAR', 'YES', None, None, None))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_52_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502             vc            \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502      (length(vc) = 3)     \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             vc            \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~1029 Rows        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('col1_idx', 'INTEGER', 'YES', None, None, None), ('col2_idx', 'INTEGER', 'YES', None, None, None), ('col3', 'INTEGER', 'YES', None, None, None), ('col4', 'INTEGER', 'YES', None, None, None), ('vc', 'VARCHAR', 'YES', None, None, None), ('vc_ft', 'VARCHAR', 'YES', None, None, None))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_52_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502             vc            \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502    (length(vc) IS NULL)   \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             vc            \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~1029 Rows        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('col1_idx', 'INTEGER', 'YES', None, None, None), ('col2_idx', 'INTEGER', 'YES', None, None, None), ('col3', 'INTEGER', 'YES', None, None, None), ('col4', 'INTEGER', 'YES', None, None, None), ('vc', 'VARCHAR', 'YES', None, None, None), ('vc_ft', 'VARCHAR', 'YES', None, None, None))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_52_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502             vc            \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502  (length(vc) IS NOT NULL) \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             vc            \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~1029 Rows        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('col1_idx', 'INTEGER', 'YES', None, None, None), ('col2_idx', 'INTEGER', 'YES', None, None, None), ('col3', 'INTEGER', 'YES', None, None, None), ('col4', 'INTEGER', 'YES', None, None, None), ('vc', 'VARCHAR', 'YES', None, None, None), ('vc_ft', 'VARCHAR', 'YES', None, None, None))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_53_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'repeat(INTEGER_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\trepeat(VARCHAR, BIGINT) -> VARCHAR\n\trepeat(BLOB, BIGINT) -> BLOB\n\trepeat(ANY[], BIGINT) -> ANY[]\n\nLINE 1: INSERT INTO t VALUES (REPEAT(10, 1000))\n                              ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_53_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_53_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_53_21", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_54_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name space does not exist!\nDid you mean \"strip_accents\"?\nLINE 1: ...1 VALUES (NULL), ('A\\0\\0\\0BBBBBBBB'), (SPACE(50000)), (SPACE(50000))\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_54_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,), (25,), (50000,), (50000,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'length(BLOB)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tlength(VARCHAR) -> BIGINT\n\tlength(BIT) -> BIGINT\n\tlength(ANY[]) -> BIGINT\n\nLINE 1: SELECT LENGTH(a) FROM t1\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_55_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_55_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a-4',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a-4',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_55_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a-4.5',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a-4.5',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_55_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a-5',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a-5',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_55_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a-1',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a-1',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_55_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a0',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a0',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_55_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a0.0',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a0.0',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_55_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a0.0000',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a0.0000',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_55_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('ab',), ('ab',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('ab',), ('ab',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_55_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('x',), ('1234562',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x',), ('1234562',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_55_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', 'First'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_56_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"+(\"NULL\", INTERVAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\t+(DATE, INTERVAL) -> TIMESTAMP\n\t+(TIME, INTERVAL) -> TIME\n\t+(TIME WITH TIME ZONE, INTERVAL) -> TIME WITH TIME ZONE\n\t+(INTERVAL, INTERVAL) -> INTERVAL\n\nLINE 1: INSERT INTO t1 VALUES (NULL + INTERVAL '1' DAY)\n                                    ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_56_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_56_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"+(\"NULL\", INTERVAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\t+(DATE, INTERVAL) -> TIMESTAMP\n\t+(TIME, INTERVAL) -> TIME\n\t+(TIME WITH TIME ZONE, INTERVAL) -> TIME WITH TIME ZONE\n\t+(INTERVAL, INTERVAL) -> INTERVAL\n\nLINE 1: INSERT INTO t1 VALUES (NULL + INTERVAL '1' DAY)\n                                    ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_56_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_56_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False, datetime.time(0, 0)))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"AS\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_57_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name t1 does not exist!\nDid you mean \"pg_tables\"?\nLINE 1: SELECT * FROM t1 WHERE mydate IS NULL AND DATEDIFF('d...\n                      ^", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name t1 does not exist!\nDid you mean \"pg_tables\"?\nLINE 1: SELECT * FROM t1 WHERE ((DATE_DIFF('DAY', CAST('0000-...\n                      ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_57_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \")\"", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_57_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \")\"", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_58_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', \"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502      prefix(a, 'abc')     \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502       Projections: a      \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a>='abc' AND a<'abd' AND a\u2502\\n\u2502         IS NOT NULL       \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\"))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a', 'VARCHAR', 'YES', None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_58_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('abc',), ('abcd',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('abc',), ('abcd',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_59_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((10.0, 10.000000000000002, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((10.0, 10.000000000000002, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_59_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3.0, 3.9068905956085187, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3.0, 3.9068905956085187, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_59_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((10.0, 16.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((10.0, 16.0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_59_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_59_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_59_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_59_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('http://www.foo.com/',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timediff does not exist!\nDid you mean \"datediff\"?\nLINE 1: ...a = 'http://www.foo.com/' ORDER BY ABS(TIMEDIFF(ts, 0)) NULLS FIRST\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_59_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-2, 2, -2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Type INT32 with value -2 can't be cast because the value is out of range for the destination type UINT64\nLINE 1: SELECT CAST(-2 AS UBIGINT) % 3, 18446744073709...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_59_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 5, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Type INT32 with value -2 can't be cast because the value is out of range for the destination type UINT64\nLINE 1: SELECT 5 % CAST(-2 AS UBIGINT), 5 % 18446744073709...\n                   ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_59_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-32.0, 2.13598703592091e+96, -32.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Type INT32 with value -2 can't be cast because the value is out of range for the destination type UINT64\nLINE 1: SELECT POWER(CAST(-2 AS UBIGINT), 5), POWER(18446744...\n                     ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_60_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('-4939092'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('-4939092'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_60_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_60_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_60_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_60_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((9223372036854774784,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((9223372036854774784,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_60_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-9223372036854775808,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-9223372036854775808,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_60_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_60_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_60_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_60_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_61_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('0cc175b9c0f1b6a831c399e269772661', '3063633137356239633066316236613833316333393965323639373732363631'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('0cc175b9c0f1b6a831c399e269772661', '3063633137356239633066316236613833316333393965323639373732363631'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_61_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_61_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('5d41402abc4b2a76b9719d911017c592',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5d41402abc4b2a76b9719d911017c592',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_61_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', \"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502'5d41402abc4b2a76b9719d9110\u2502\\n\u2502          17c592'          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         DUMMY_SCAN        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\"))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((\"md5('hello')\", 'VARCHAR', 'YES', None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_61_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((46,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'length(BLOB)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tlength(VARCHAR) -> BIGINT\n\tlength(BIT) -> BIGINT\n\tlength(ANY[]) -> BIGINT\n\nLINE 1: SELECT LENGTH(UNHEX(MD5('abrakadabra')))\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_61_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_61_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_61_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_62_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 1, 6, 12, 34),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name mid does not exist!\nDid you mean \"min\"?\nLINE 1: SELECT a FROM t1 WHERE MID(a + 0, 6, 3) IN (MID(20040106123400...\n                               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_62_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 1, 6, 12, 34),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name mid does not exist!\nDid you mean \"min\"?\nLINE 1: SELECT a FROM t1 WHERE MID(a + 0, 6, 3) = (MID(20040106123400,...\n                               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_62_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,), (2,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Cannot combine types of INTEGER and VARCHAR - an explicit cast is required\nLINE 1: SELECT DISTINCT LEAST(a, (SELECT b FROM t1 LIMIT 1)) FROM t1 UNI...\n                                 ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_62_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,), (3,), (2,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Cannot combine types of INTEGER and VARCHAR - an explicit cast is required\nLINE 1: SELECT DISTINCT GREATEST(a, (SELECT b FROM t1 LIMIT 1)) FROM t1 UNI...\n                                    ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_63_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2, 0, 3, 1.6, 3, 3, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, 0, 3, 1.6, 3, 3, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_63_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3, 1, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3, 1, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_63_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 1, 7, 3), (3, 3, 7, 3), (2, None, None, None))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 1, 7, 3), (3, 3, 7, 3), (2, None, None, None))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('000002',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('1997-12-31 23:59:59.000002', ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(3, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name makedate does not exist!\nDid you mean \"make_date\"?\nLINE 1: SELECT MAKEDATE(03, 1)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1997, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name makedate does not exist!\nDid you mean \"make_date\"?\nLINE 1: SELECT MAKEDATE(1997, 1)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1996, 12, 31, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name makedate does not exist!\nDid you mean \"make_date\"?\nLINE 1: SELECT MAKEDATE(1997, 0)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(9999, 12, 31, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name makedate does not exist!\nDid you mean \"make_date\"?\nLINE 1: SELECT MAKEDATE(9999, 365)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('10000-01-01 00:00:00',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name makedate does not exist!\nDid you mean \"make_date\"?\nLINE 1: SELECT MAKEDATE(9999, 366)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(100, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name makedate does not exist!\nDid you mean \"make_date\"?\nLINE 1: SELECT MAKEDATE(100, 1)\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1997, 12, 30, 22, 58, 57, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name subtime does not exist!\nDid you mean \"substring\"?\nLINE 1: SELECT SUBTIME('1997-12-31 23:59:59.000001', '...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1, seconds=82738),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name subtime does not exist!\nDid you mean \"substring\"?\nLINE 1: SELECT SUBTIME('1997-12-31 23:59:59.999999', '...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(23, 0, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name subtime does not exist!\nDid you mean \"substring\"?\nLINE 1: SELECT SUBTIME('01:00:00.999999', '02:00:00.99...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(1, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name subtime does not exist!\nDid you mean \"substring\"?\nLINE 1: SELECT SUBTIME('02:01:01.999999', '01:01:01.99...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=366, seconds=86399, microseconds=999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timediff does not exist!\nDid you mean \"datediff\"?\nLINE 1: SELECT TIMEDIFF('1997-01-01 23:59:59.000001', ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=1, seconds=82737, microseconds=999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timediff does not exist!\nDid you mean \"datediff\"?\nLINE 1: SELECT TIMEDIFF('1997-12-31 23:59:59.000001', ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1, seconds=86399, microseconds=999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timediff does not exist!\nDid you mean \"datediff\"?\nLINE 1: SELECT TIMEDIFF('2005-01-11 15:48:49.999999', ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(20, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(20, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 1, 1, 1, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'2001-12-01'\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 10, 1, 1, 1, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'2001-10-01'\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 20, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'2001-12-01'\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((31,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((31,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:59:59.000001',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"AS\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-31), None, None, datetime.timedelta(days=-11354)), (datetime.timedelta(days=1096, seconds=3661, microseconds=999999), datetime.timedelta(seconds=86338), datetime.timedelta(days=-1, seconds=62), datetime.timedelta(days=-10227, seconds=86339, microseconds=999999)), (datetime.timedelta(days=-1097, seconds=82738, microseconds=1), datetime.timedelta(days=-1, seconds=62), datetime.timedelta(seconds=86338), datetime.timedelta(days=-11324, seconds=82740)), (None, None, None, None))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timediff does not exist!\nDid you mean \"datediff\"?\nLINE 1: SELECT TIMEDIFF(t1, t4) AS ttt, TIMEDIFF(t2, t...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2003, 1, 2, 10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2003, 1, 2, 10, 11, 12, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1), '00:00:00'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"AS\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"AS\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"AS\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_66_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"AS\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_66_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name sec_to_time does not exist!\nDid you mean \"strftime\"?\nLINE 1: SELECT SEC_TO_TIME(86399) = '23:59:59'\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_66_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"AS\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_66_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_66_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_67_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('2', 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name elt does not exist!\nDid you mean \"element_at\"?\nLINE 1: SELECT ELT(2, 1), FIELD(NULL, 'a', 'b', 'c')\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_67_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 0, Decimal('0.0'), 0.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name field does not exist!\nDid you mean \"filter\"?\nLINE 1: SELECT FIELD('b', 'a', NULL), FIELD(1, 0, NULL...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_67_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 0, Decimal('0.0'), 0.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name field does not exist!\nDid you mean \"filter\"?\nLINE 1: SELECT FIELD(NULL, 'a', NULL), FIELD(NULL, 0, ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_67_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'one'), (2, 'one'), (4, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name elt does not exist!\nDid you mean \"element_at\"?\nLINE 1: SELECT one.id, ELT(two.val, 'one', 'two') FROM t1 AS o...\n                       ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_67_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'one'), (2, 'one'), (4, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name elt does not exist!\nDid you mean \"element_at\"?\nLINE 1: SELECT one.id, ELT(two.val, 'one', 'two') FROM t1 AS o...\n                       ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_68_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16\";\"0\";\"4\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16\";\"0\";\"4\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_68_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\";\"0\";\"4\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\";\"0\";\"4\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_68_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16\";\"0\";\"4',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16\";\"0\";\"4',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_68_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('</a>',), ('</a>..........................',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'rpad(STRING_LITERAL, BIGINT, STRING_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\trpad(VARCHAR, INTEGER, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT CONCAT('</a>', RPAD('', (55 - LENGTH(title)), '.')) FR...\n                              ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, True, True, False, False, True, -1, 1, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: ... 1 > 0, 1 >= 1, 1 < 0, 1 <= 0, 1 <> 0, STRCMP('abc', 'abcd'), STRCMP('b', 'a')...\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('abc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('abc',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "'NoneType' object has no attribute 'fetchall'", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "'NoneType' object has no attribute 'fetchall'", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('0.0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('0.0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('5',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('11',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('11',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((5,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types '+(VARCHAR, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\t+(TINYINT) -> TINYINT\n\t+(TINYINT, TINYINT) -> TINYINT\n\t+(SMALLINT) -> SMALLINT\n\t+(SMALLINT, SMALLINT) -> SMALLINT\n\t+(INTEGER) -> INTEGER\n\t+(INTEGER, INTEGER) -> INTEGER\n\t+(BIGINT) -> BIGINT\n\t+(BIGINT, BIGINT) -> BIGINT\n\t+(HUGEINT) -> HUGEINT\n\t+(HUGEINT, HUGEINT) -> HUGEINT\n\t+(FLOAT) -> FLOAT\n\t+(FLOAT, FLOAT) -> FLOAT\n\t+(DOUBLE) -> DOUBLE\n\t+(DOUBLE, DOUBLE) -> DOUBLE\n\t+(DECIMAL) -> DECIMAL\n\t+(DECIMAL, DECIMAL) -> DECIMAL\n\t+(UTINYINT) -> UTINYINT\n\t+(UTINYINT, UTINYINT) -> UTINYINT\n\t+(USMALLINT) -> USMALLINT\n\t+(USMALLINT, USMALLINT) -> USMALLINT\n\t+(UINTEGER) -> UINTEGER\n\t+(UINTEGER, UINTEGER) -> UINTEGER\n\t+(UBIGINT) -> UBIGINT\n\t+(UBIGINT, UBIGINT) -> UBIGINT\n\t+(UHUGEINT) -> UHUGEINT\n\t+(UHUGEINT, UHUGEINT) -> UHUGEINT\n\t+(DATE, INTEGER) -> DATE\n\t+(INTEGER, DATE) -> DATE\n\t+(INTERVAL, INTERVAL) -> INTERVAL\n\t+(DATE, INTERVAL) -> TIMESTAMP\n\t+(INTERVAL, DATE) -> TIMESTAMP\n\t+(TIME, INTERVAL) -> TIME\n\t+(INTERVAL, TIME) -> TIME\n\t+(TIMESTAMP, INTERVAL) -> TIMESTAMP\n\t+(INTERVAL, TIMESTAMP) -> TIMESTAMP\n\t+(TIME WITH TIME ZONE, INTERVAL) -> TIME WITH TIME ZONE\n\t+(INTERVAL, TIME WITH TIME ZONE) -> TIME WITH TIME ZONE\n\t+(TIME, DATE) -> TIMESTAMP\n\t+(DATE, TIME) -> TIMESTAMP\n\t+(TIME WITH TIME ZONE, DATE) -> TIMESTAMP WITH TIME ZONE\n\t+(DATE, TIME WITH TIME ZONE) -> TIMESTAMP WITH TIME ZONE\n\t+(ANY[], ANY[]) -> ANY[]\n\t+(TIMESTAMP WITH TIME ZONE, INTERVAL) -> TIMESTAMP WITH TIME ZONE\n\t+(INTERVAL, TIMESTAMP WITH TIME ZONE) -> TIMESTAMP WITH TIME ZONE\n\nLINE 1: SELECT GREATEST('11', '5', '2') + 0\n                                        ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('5.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types '+(VARCHAR, DECIMAL(3,2))'. You might need to add explicit type casts.\n\tCandidate functions:\n\t+(TINYINT) -> TINYINT\n\t+(TINYINT, TINYINT) -> TINYINT\n\t+(SMALLINT) -> SMALLINT\n\t+(SMALLINT, SMALLINT) -> SMALLINT\n\t+(INTEGER) -> INTEGER\n\t+(INTEGER, INTEGER) -> INTEGER\n\t+(BIGINT) -> BIGINT\n\t+(BIGINT, BIGINT) -> BIGINT\n\t+(HUGEINT) -> HUGEINT\n\t+(HUGEINT, HUGEINT) -> HUGEINT\n\t+(FLOAT) -> FLOAT\n\t+(FLOAT, FLOAT) -> FLOAT\n\t+(DOUBLE) -> DOUBLE\n\t+(DOUBLE, DOUBLE) -> DOUBLE\n\t+(DECIMAL) -> DECIMAL\n\t+(DECIMAL, DECIMAL) -> DECIMAL\n\t+(UTINYINT) -> UTINYINT\n\t+(UTINYINT, UTINYINT) -> UTINYINT\n\t+(USMALLINT) -> USMALLINT\n\t+(USMALLINT, USMALLINT) -> USMALLINT\n\t+(UINTEGER) -> UINTEGER\n\t+(UINTEGER, UINTEGER) -> UINTEGER\n\t+(UBIGINT) -> UBIGINT\n\t+(UBIGINT, UBIGINT) -> UBIGINT\n\t+(UHUGEINT) -> UHUGEINT\n\t+(UHUGEINT, UHUGEINT) -> UHUGEINT\n\t+(DATE, INTEGER) -> DATE\n\t+(INTEGER, DATE) -> DATE\n\t+(INTERVAL, INTERVAL) -> INTERVAL\n\t+(DATE, INTERVAL) -> TIMESTAMP\n\t+(INTERVAL, DATE) -> TIMESTAMP\n\t+(TIME, INTERVAL) -> TIME\n\t+(INTERVAL, TIME) -> TIME\n\t+(TIMESTAMP, INTERVAL) -> TIMESTAMP\n\t+(INTERVAL, TIMESTAMP) -> TIMESTAMP\n\t+(TIME WITH TIME ZONE, INTERVAL) -> TIME WITH TIME ZONE\n\t+(INTERVAL, TIME WITH TIME ZONE) -> TIME WITH TIME ZONE\n\t+(TIME, DATE) -> TIMESTAMP\n\t+(DATE, TIME) -> TIMESTAMP\n\t+(TIME WITH TIME ZONE, DATE) -> TIMESTAMP WITH TIME ZONE\n\t+(DATE, TIME WITH TIME ZONE) -> TIMESTAMP WITH TIME ZONE\n\t+(ANY[], ANY[]) -> ANY[]\n\t+(TIMESTAMP WITH TIME ZONE, INTERVAL) -> TIMESTAMP WITH TIME ZONE\n\t+(INTERVAL, TIMESTAMP WITH TIME ZONE) -> TIMESTAMP WITH TIME ZONE\n\nLINE 1: SELECT GREATEST('11', '5', '2') + 0.00\n                                        ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((18446744073709551615,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18446744073709551615,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_20", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_27", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_28", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_1_33", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_10_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((200,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((200,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_12_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_12_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 3), (3, 4), (3, 5))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 3), (2, 4), (3, 5))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_12_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1), (1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3), (2, 4))", "rowcount": 8, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 1), (2, 2), (None, 3), (None, 4))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_2_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_2_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_3_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_5_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(([],))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(([],))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((200,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((200,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name extremely_skewed does not exist!\nDid you mean \"sqlite_temp_master\"?", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name extremely_skewed does not exist!\nDid you mean \"sqlite_temp_master\"?", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((10000,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_7_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types '%(STRUCT(generate_series BIGINT), INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\t%(TINYINT, TINYINT) -> TINYINT\n\t%(SMALLINT, SMALLINT) -> SMALLINT\n\t%(INTEGER, INTEGER) -> INTEGER\n\t%(BIGINT, BIGINT) -> BIGINT\n\t%(HUGEINT, HUGEINT) -> HUGEINT\n\t%(FLOAT, FLOAT) -> FLOAT\n\t%(DOUBLE, DOUBLE) -> DOUBLE\n\t%(DECIMAL, DECIMAL) -> DECIMAL\n\t%(UTINYINT, UTINYINT) -> UTINYINT\n\t%(USMALLINT, USMALLINT) -> USMALLINT\n\t%(UINTEGER, UINTEGER) -> UINTEGER\n\t%(UBIGINT, UBIGINT) -> UBIGINT\n\t%(UHUGEINT, UHUGEINT) -> UHUGEINT\n\nLINE 1: INSERT INTO pagg_tab SELECT i % 20, i % 30, STRFTIME(i % 12, 'FM0000'...\n                                      ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_7_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((30000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types '%(STRUCT(generate_series BIGINT), INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\t%(TINYINT, TINYINT) -> TINYINT\n\t%(SMALLINT, SMALLINT) -> SMALLINT\n\t%(INTEGER, INTEGER) -> INTEGER\n\t%(BIGINT, BIGINT) -> BIGINT\n\t%(HUGEINT, HUGEINT) -> HUGEINT\n\t%(FLOAT, FLOAT) -> FLOAT\n\t%(DOUBLE, DOUBLE) -> DOUBLE\n\t%(DECIMAL, DECIMAL) -> DECIMAL\n\t%(UTINYINT, UTINYINT) -> UTINYINT\n\t%(USMALLINT, USMALLINT) -> USMALLINT\n\t%(UINTEGER, UINTEGER) -> UINTEGER\n\t%(UBIGINT, UBIGINT) -> UBIGINT\n\t%(UHUGEINT, UHUGEINT) -> UHUGEINT\n\nLINE 1: INSERT INTO pagg_tab_ml SELECT i % 30, i % 10, STRFTIME(i % 4, 'FM0000')...\n                                         ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_7_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, 0, ['0000', '0002'], 1000), (1, 1000, ['0001', '0003'], 1000), (2, 2000, ['0000', '0002'], 1000), (10, 0, ['0000', '0002'], 1000), (11, 1000, ['0001', '0003'], 1000), (12, 2000, ['0002', '0000'], 1000), (20, 0, ['0002', '0000'], 1000), (21, 1000, ['0001', '0003'], 1000), (22, 2000, ['0002', '0000'], 1000))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 0, ['0002', '0000'], 1000), (1, 1000, ['0001', '0003'], 1000), (2, 2000, ['0002', '0000'], 1000), (10, 0, ['0002', '0000'], 1000), (11, 1000, ['0003', '0001'], 1000), (12, 2000, ['0000', '0002'], 1000), (20, 0, ['0000', '0002'], 1000), (21, 1000, ['0003', '0001'], 1000), (22, 2000, ['0000', '0002'], 1000))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_8_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((300,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types '%(STRUCT(generate_series BIGINT), INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\t%(TINYINT, TINYINT) -> TINYINT\n\t%(SMALLINT, SMALLINT) -> SMALLINT\n\t%(INTEGER, INTEGER) -> INTEGER\n\t%(BIGINT, BIGINT) -> BIGINT\n\t%(HUGEINT, HUGEINT) -> HUGEINT\n\t%(FLOAT, FLOAT) -> FLOAT\n\t%(DOUBLE, DOUBLE) -> DOUBLE\n\t%(DECIMAL, DECIMAL) -> DECIMAL\n\t%(UTINYINT, UTINYINT) -> UTINYINT\n\t%(USMALLINT, USMALLINT) -> USMALLINT\n\t%(UINTEGER, UINTEGER) -> UINTEGER\n\t%(UBIGINT, UBIGINT) -> UBIGINT\n\t%(UHUGEINT, UHUGEINT) -> UHUGEINT\n\nLINE 1: ...M GENERATE_SERIES(0, 599) AS i WHERE i % 2 = 0\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_8_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((200,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types '%(STRUCT(generate_series BIGINT), INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\t%(TINYINT, TINYINT) -> TINYINT\n\t%(SMALLINT, SMALLINT) -> SMALLINT\n\t%(INTEGER, INTEGER) -> INTEGER\n\t%(BIGINT, BIGINT) -> BIGINT\n\t%(HUGEINT, HUGEINT) -> HUGEINT\n\t%(FLOAT, FLOAT) -> FLOAT\n\t%(DOUBLE, DOUBLE) -> DOUBLE\n\t%(DECIMAL, DECIMAL) -> DECIMAL\n\t%(UTINYINT, UTINYINT) -> UTINYINT\n\t%(USMALLINT, USMALLINT) -> USMALLINT\n\t%(UINTEGER, UINTEGER) -> UINTEGER\n\t%(UBIGINT, UBIGINT) -> UBIGINT\n\t%(UHUGEINT, UHUGEINT) -> UHUGEINT\n\nLINE 1: ...M GENERATE_SERIES(0, 599) AS i WHERE i % 3 = 0\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Sequence with name seq3 does not exist!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Sequence with name seq3 does not exist!", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 0}
